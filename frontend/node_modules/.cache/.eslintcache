[{"F:\\mess-manager\\frontend\\src\\index.tsx":"1","F:\\mess-manager\\frontend\\src\\app\\store.ts":"2","F:\\mess-manager\\frontend\\src\\App.tsx":"3","F:\\mess-manager\\frontend\\src\\reportWebVitals.ts":"4","F:\\mess-manager\\frontend\\src\\features\\user\\user_slice.ts":"5","F:\\mess-manager\\frontend\\src\\Screens\\Home.tsx":"6","F:\\mess-manager\\frontend\\src\\Screens\\login.tsx":"7","F:\\mess-manager\\frontend\\src\\components\\Navbar.tsx":"8","F:\\mess-manager\\frontend\\src\\Screens\\normal\\dashboard.tsx":"9","F:\\mess-manager\\frontend\\src\\Screens\\admin\\users\\EditUser.tsx":"10","F:\\mess-manager\\frontend\\src\\Screens\\admin\\users\\AddUsers.tsx":"11","F:\\mess-manager\\frontend\\src\\Screens\\admin\\users\\ViewUsers.tsx":"12","F:\\mess-manager\\frontend\\src\\Screens\\admin\\expenses\\ThisMonthBill.tsx":"13","F:\\mess-manager\\frontend\\src\\Screens\\admin\\expenses\\TodayExpenses.tsx":"14","F:\\mess-manager\\frontend\\src\\Screens\\admin\\expenses\\MonthlyExpenses.tsx":"15","F:\\mess-manager\\frontend\\src\\Screens\\admin\\expenses\\BillForm.tsx":"16","F:\\mess-manager\\frontend\\src\\Screens\\admin\\attendances\\MonthlyAttendance.tsx":"17","F:\\mess-manager\\frontend\\src\\Screens\\admin\\mess\\ViewMess.tsx":"18","F:\\mess-manager\\frontend\\src\\Screens\\admin\\attendances\\markAttendance.tsx":"19","F:\\mess-manager\\frontend\\src\\Screens\\admin\\mess\\UpdateMess.tsx":"20","F:\\mess-manager\\frontend\\src\\components\\Loader.tsx":"21","F:\\mess-manager\\frontend\\src\\components\\Message.tsx":"22","F:\\mess-manager\\frontend\\src\\actions\\user_actions.ts":"23","F:\\mess-manager\\frontend\\src\\actions\\mess_actions.ts":"24","F:\\mess-manager\\frontend\\src\\components\\ConvertToWeekDay.tsx":"25","F:\\mess-manager\\frontend\\src\\constants\\user_constants.ts":"26","F:\\mess-manager\\frontend\\src\\actions\\attendance_actions.ts":"27","F:\\mess-manager\\frontend\\src\\actions\\expenses_actions.ts":"28","F:\\mess-manager\\frontend\\src\\components\\counter.ts":"29","F:\\mess-manager\\frontend\\src\\components\\Downloader.tsx":"30","F:\\mess-manager\\frontend\\src\\components\\ConvertToMonth.tsx":"31","F:\\mess-manager\\frontend\\src\\Screens\\admin\\attendances\\DailyAttendance.tsx":"32","F:\\mess-manager\\frontend\\src\\constants\\mess_constants.ts":"33","F:\\mess-manager\\frontend\\src\\constants\\attendance_constants.ts":"34","F:\\mess-manager\\frontend\\src\\constants\\expenses_constants.ts":"35","F:\\mess-manager\\frontend\\src\\Screens\\admin\\attendances\\AttendanceSheet.tsx":"36","F:\\mess-manager\\frontend\\src\\app\\hooks.ts":"37"},{"size":719,"mtime":1674251561389,"results":"38","hashOfConfig":"39"},{"size":315,"mtime":1674251421030,"results":"40","hashOfConfig":"39"},{"size":2348,"mtime":1674166942917,"results":"41","hashOfConfig":"39"},{"size":382,"mtime":1674163964708,"results":"42","hashOfConfig":"39"},{"size":2311,"mtime":1674257442784,"results":"43","hashOfConfig":"39"},{"size":235,"mtime":1674166938796,"results":"44","hashOfConfig":"39"},{"size":3306,"mtime":1674257963797,"results":"45","hashOfConfig":"39"},{"size":4354,"mtime":1674256342417,"results":"46","hashOfConfig":"39"},{"size":7453,"mtime":1674167882952,"results":"47","hashOfConfig":"39"},{"size":7765,"mtime":1674167972470,"results":"48","hashOfConfig":"39"},{"size":6545,"mtime":1674168763094,"results":"49","hashOfConfig":"39"},{"size":3231,"mtime":1674168740424,"results":"50","hashOfConfig":"39"},{"size":3126,"mtime":1674168379823,"results":"51","hashOfConfig":"39"},{"size":4506,"mtime":1674168448960,"results":"52","hashOfConfig":"39"},{"size":3871,"mtime":1674168499575,"results":"53","hashOfConfig":"39"},{"size":4602,"mtime":1674168538768,"results":"54","hashOfConfig":"39"},{"size":2301,"mtime":1674168582645,"results":"55","hashOfConfig":"39"},{"size":3476,"mtime":1674168669704,"results":"56","hashOfConfig":"39"},{"size":6850,"mtime":1674168295543,"results":"57","hashOfConfig":"39"},{"size":4851,"mtime":1674168712963,"results":"58","hashOfConfig":"39"},{"size":329,"mtime":1674169213216,"results":"59","hashOfConfig":"39"},{"size":234,"mtime":1674169232580,"results":"60","hashOfConfig":"39"},{"size":10730,"mtime":1674217187807,"results":"61","hashOfConfig":"39"},{"size":1953,"mtime":1674217037588,"results":"62","hashOfConfig":"39"},{"size":227,"mtime":1674168890891,"results":"63","hashOfConfig":"39"},{"size":1790,"mtime":1673864432710,"results":"64","hashOfConfig":"39"},{"size":2095,"mtime":1674216947293,"results":"65","hashOfConfig":"39"},{"size":4274,"mtime":1674217003031,"results":"66","hashOfConfig":"39"},{"size":389,"mtime":1674163964718,"results":"67","hashOfConfig":"39"},{"size":1111,"mtime":1674168932911,"results":"68","hashOfConfig":"39"},{"size":233,"mtime":1674168885945,"results":"69","hashOfConfig":"39"},{"size":1236,"mtime":1674253071264,"results":"70","hashOfConfig":"39"},{"size":446,"mtime":1673864432710,"results":"71","hashOfConfig":"39"},{"size":386,"mtime":1673864432710,"results":"72","hashOfConfig":"39"},{"size":731,"mtime":1673864432710,"results":"73","hashOfConfig":"39"},{"size":2290,"mtime":1674169379574,"results":"74","hashOfConfig":"39"},{"size":413,"mtime":1674255627401,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1lcf99c",{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187"},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200"},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\mess-manager\\frontend\\src\\index.tsx",[],[],"F:\\mess-manager\\frontend\\src\\app\\store.ts",[],[],"F:\\mess-manager\\frontend\\src\\App.tsx",[],[],"F:\\mess-manager\\frontend\\src\\reportWebVitals.ts",[],[],"F:\\mess-manager\\frontend\\src\\features\\user\\user_slice.ts",["204","205"],[],"// DUCKS pattern\r\n\r\nimport { bindActionCreators, createSlice,PayloadAction } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\ninterface userLogin{\r\nerror?:string|null|unknown,\r\n   loading?:boolean,\r\n  userInfo?:{\r\n      refresh: string,\r\n      access: string,\r\n      id: number|null,\r\n      username: string,\r\n      isAdmin: boolean,\r\n      email: string,\r\n      phone:string| null,\r\n      room: number| null,\r\n      hostel: string| null,\r\n      token: string\r\n    }\r\n   \r\n  }\r\n  \r\nconst initialState:userLogin ={\r\n  //   error:null,\r\n  //  loading:false,\r\n  // userInfo:{\r\n  //     refresh: \"\",\r\n  //     access: \"\",\r\n  //     id: null,\r\n  //     username: \"\",\r\n  //     isAdmin: false,\r\n  //     email: \"\",\r\n  //     phone:null,\r\n  //     room :  null,\r\n  //     hostel : null,\r\n  //     token : \"\"\r\n  //   }\r\n}\r\n\r\nconst userSlice = createSlice({\r\n    \r\n    name:'user',\r\n    initialState,\r\n    \r\n    reducers:{\r\n    // user login pending/request\r\n    loginRequest(state){\r\n      state.loading=true;\r\n      state.userInfo=initialState.userInfo\r\n        \r\n      },\r\n    // user login success\r\n    loginSuccess(state ,action){ \r\n      state.loading= false; \r\n      state.userInfo= action.payload\r\n      },\r\n    \r\n    // user login failed\r\n    loginFail(state,action){\r\n      state.loading=false; \r\n      state.error=action.payload\r\n      },\r\n    // user logout\r\n    logout(){}\r\n    \r\n    }\r\n\r\n\r\n\r\n})\r\n\r\nexport const login = (username: string, password: string) => async (dispatch: any) => {\r\n  try {\r\n      dispatch(loginRequest())\r\n\r\n      const config = {\r\n          headers: {\r\n              'Content-type': 'application/json'\r\n          }\r\n      }\r\n\r\n\r\n      const { data } = await axios.post(\r\n          `/api/users/login/`,\r\n          { 'username': username, 'password': password },\r\n          config\r\n      )\r\n\r\n      dispatch(loginSuccess(data))\r\n\r\n      localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n  } catch (error) {\r\n  \r\n    dispatch(loginFail(error))\r\n  }\r\n}\r\n// if my code works i need to somehow change generic error to specific error message\r\n// error.response && error.response.data.detail\r\n//         ? error.response.data.detail\r\n//         : error.message\r\nexport const {loginRequest , loginFail, logout , loginSuccess} = userSlice.actions\r\nexport default userSlice.reducer","F:\\mess-manager\\frontend\\src\\Screens\\Home.tsx",[],[],"F:\\mess-manager\\frontend\\src\\Screens\\login.tsx",["206","207","208"],[],"F:\\mess-manager\\frontend\\src\\components\\Navbar.tsx",["209"],[],"// make a react component for navbar\r\nimport { useSelector } from \"react-redux\";\r\nimport React from \"react\";\r\nimport \"./navbar.css\";\r\nimport { Link } from \"react-router-dom\";\r\n// import { logout } from '../actions/user_actions';\r\n// import dispatch\r\n// import { useDispatch } from \"react-redux\";\r\nimport { useAppDispatch, useAppSelector } from '../app/hooks'\r\n\r\n\r\nimport { logout } from \"../features/user/user_slice\";\r\nfunction Navbar() {\r\n  const { userInfo } = useAppSelector((state) => state.userLogin);\r\n  const dispatch = useAppDispatch();\r\n  const logoutHandler = () => {\r\n    dispatch(logout())\r\n  }\r\n\r\n  return (\r\n\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n\r\n      <Link className=\"navbar-brand\" to=\"/\">\r\n        Mess Manager\r\n      </Link>\r\n\r\n      <button\r\n        className=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#navbarNav\"\r\n        aria-controls=\"navbarNav\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\"\r\n      >\r\n\r\n        <span className=\"navbar-toggler-icon\" />\r\n      </button>\r\n\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n\r\n        <ul className=\"navbar-nav\">\r\n\r\n          {!userInfo && (\r\n\r\n\r\n            <li className=\"nav-item\">\r\n\r\n              <Link className=\"nav-link\" to=\"/login\">\r\n                Login\r\n              </Link>\r\n\r\n            </li>\r\n          )\r\n\r\n          }\r\n\r\n          {userInfo && (\r\n\r\n            <>\r\n\r\n              <li className=\"nav-item\">\r\n\r\n                <button className=\"btn btn-danger\" onClick={logoutHandler}>Logout</button>\r\n              </li>\r\n\r\n\r\n              <li className=\"nav-item\">\r\n\r\n                <Link className=\"nav-link\" to=\"/dashboard\">\r\n                  Your Dash Board\r\n                </Link>\r\n              </li>\r\n\r\n              <Link className=\"dropdown-item\" to=\"/admin/view-mess\">\r\n                View Mess\r\n              </Link>\r\n            </>\r\n          )}\r\n\r\n          {userInfo && userInfo.isAdmin && (\r\n\r\n            <>\r\n              {/* make a drop down menu */}\r\n\r\n              <div className=\"dropdown\">\r\n\r\n                <button\r\n                  className=\"btn btn-secondary dropdown-toggle\"\r\n                  type=\"button\"\r\n                  id=\"dropdownMenuButton\"\r\n                  data-toggle=\"dropdown\"\r\n                  aria-haspopup=\"true\"\r\n                  aria-expanded=\"false\"\r\n                >\r\n                  Admin\r\n                </button>\r\n\r\n                <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n\r\n                  <Link className=\"dropdown-item\" to=\"/admin/add-user\">\r\n                    Add User\r\n                  </Link>\r\n\r\n                  <Link className=\"dropdown-item\" to=\"/admin/view-users\">\r\n                    View Users\r\n                  </Link>\r\n\r\n\r\n                  <div className=\"dropdown-divider\"></div>\r\n\r\n\r\n                  <Link className=\"dropdown-item\" to=\"/admin/view-mess\">\r\n                    View Mess\r\n                  </Link>\r\n\r\n\r\n                  <Link className=\"dropdown-item\" to=\"/admin/mark-attendance\">\r\n                    Mark Attendance\r\n                  </Link>\r\n\r\n                  <div className=\"dropdown-divider\"></div>\r\n\r\n\r\n                  <Link\r\n                    className=\"dropdown-item\"\r\n                    to=\"/admin/monthly-attendance\"\r\n                  >\r\n                    See Monthly Attendances\r\n                  </Link>\r\n\r\n                  <div className=\"dropdown-divider\"></div>\r\n\r\n\r\n                  <Link className=\"dropdown-item\" to=\"/admin/expenses/today\">\r\n                    Today's Expenses\r\n                  </Link>\r\n\r\n\r\n                  <Link className=\"dropdown-item\" to=\"/admin/expenses/monthly\">\r\n                    Expenses By Month\r\n                  </Link>\r\n\r\n                  <Link className=\"dropdown-item\" to=\"/admin/bill-of-month\">\r\n                    This Month's Bill\r\n                  </Link>\r\n\r\n                  <div className=\"dropdown-divider\"></div>\r\n\r\n\r\n                  <Link className=\"dropdown-item\" to=\"/admin/expenses/bill-form/\">\r\n                    Bill Form\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n\r\n            </>\r\n          )}\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","F:\\mess-manager\\frontend\\src\\Screens\\normal\\dashboard.tsx",["210","211","212","213","214","215","216","217","218"],[],"// a react component for the dashboard screen of the mess manager app\r\n//  - this is the screen that is displayed when the user is logged in\r\n//  - this screen displays the current user's name, the current date, and the current time\r\n//  - this screen also displays the current user's current meal plan's meals' items ingredients\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport \"./dashboard-cards.css\";\r\nimport { getMessMenu } from '../../actions/mess_actions'\r\nimport Loader from \"../../components/Loader\";\r\nimport Message from \"../../components/Message\";\r\nimport ConvertToWeekDay from \"../../components/ConvertToWeekDay\"\r\n\r\nfunction Dashboard() {\r\n  const dispatch = useDispatch();\r\n  const today = new Date().getDay();\r\n\r\n  useEffect(() => {\r\n    dispatch(getMessMenu())\r\n    console.log(today)\r\n  }, [])\r\n  const { messMenu, loading: loadingMessMenu, error: errorMessMenu } = useSelector((state) => state.messMenu);\r\n\r\n  const [date, setDate] = useState(today)\r\n\r\n\r\n  // FIXME:\r\n  // @ts-expect-error TS(2339): Property 'userLogin' does not exist on type 'Defau... Remove this comment to see the full error message\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { error, loading, userInfo } = userLogin;\r\n\r\n  const [dateState, setDateState] = useState(new Date());\r\n\r\n  useEffect(() => {\r\n    setInterval(() => setDateState(new Date()), 1000);\r\n  }, []);\r\n  const [todaysMess] = messMenu?.filter((item: any) => item.day === Intl.DateTimeFormat('en', { weekday: 'long' }).format(new Date(`${today}`)))\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h2>Welcome</h2>\r\n      <h3>{userInfo?.username}</h3>\r\n      <div>\r\n        Today's Date : <code> {dateState.toLocaleDateString()}</code>\r\n      </div>\r\n      <div>\r\n        Today's time :{\" \"}\r\n        <code>\r\n          {dateState.toLocaleTimeString({\r\n\r\n            // @ts-expect-error TS(2345): Argument of type '{ hour: string; minute: string; ... Remove this comment to see the full error message\r\n            hour: \"numeric\",\r\n            minute: \"numeric\",\r\n            hour12: true,\r\n          })}\r\n        </code>\r\n      </div>\r\n\r\n      {/* today's menu  */}\r\n\r\n      {loadingMessMenu ? <Loader></Loader> : errorMessMenu ? <Message >{error}</Message> :\r\n\r\n        // { messMenu?.map(item =>\r\n        <section className=\"light\">\r\n          <div className=\"container py-2\">\r\n            <div className=\"h1 text-center text-dark\" id=\"pageHeaderTitle\">\r\n              What's on <ConvertToWeekDay number={today} />\r\n            </div>\r\n\r\n            <article className=\"postcard light blue\">\r\n              <a className=\"postcard__img_link\" href=\"#\">\r\n                <img\r\n                  className=\"postcard__img\"\r\n                  src=\"https://picsum.photos/1000/1000\"\r\n                  alt=\"Image Title\"\r\n                />\r\n              </a>\r\n              <div className=\"postcard__text t-dark\">\r\n                <h1 className=\"postcard__title blue\">Lunch</h1>\r\n                <div className=\"postcard__subtitle small\">\r\n                  <time dateTime={new Date().toLocaleDateString()}>\r\n                    <i className=\"fas fa-calendar-alt mr-2\"></i>\r\n                    {new Date().toLocaleDateString()}\r\n                  </time>\r\n                </div>\r\n                <div className=\"postcard__bar\"></div>\r\n                <div className=\"postcard__preview-txt\">\r\n                  <ul className=\"list-group\">\r\n                    <li className=\"list-group-item\">{todaysMess.first_time}</li>\r\n\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n            </article>\r\n            <article className=\"postcard light blue\">\r\n              <a className=\"postcard__img_link\" href=\"#\">\r\n                <img\r\n                  className=\"postcard__img\"\r\n                  src=\"https://picsum.photos/1000/1000\"\r\n                  alt=\"Image Title\"\r\n                />\r\n              </a>\r\n              <div className=\"postcard__text t-dark\">\r\n                <h1 className=\"postcard__title blue\">Dinner</h1>\r\n                <div className=\"postcard__subtitle small\">\r\n                  <time dateTime={new Date().toLocaleDateString()}>\r\n                    <i className=\"fas fa-calendar-alt mr-2\"></i>\r\n                    {new Date().toLocaleDateString()}\r\n                  </time>\r\n                </div>\r\n                <div className=\"postcard__bar\"></div>\r\n                <div className=\"postcard__preview-txt\">\r\n                  <ul className=\"list-group\">\r\n                    <li className=\"list-group-item\">{todaysMess.second_time}</li>\r\n\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n            </article>\r\n\r\n          </div>\r\n        </section>\r\n\r\n        // )}\r\n      }\r\n      {/* table for this month's bill */}\r\n      <section className=\"light\">\r\n        <div className=\"container py-2\">\r\n          <div className=\"h1 text-center text-dark\" id=\"pageHeaderTitle\">\r\n            Your Bill\r\n          </div>\r\n          {/* download pdf button */}\r\n\r\n          <div className=\"text-end\">\r\n\r\n            <button className=\"btn btn-primary\">Download PDF</button>\r\n          </div>\r\n\r\n          <table className=\"table table-striped\">\r\n\r\n            <thead>\r\n\r\n              <tr>\r\n\r\n                <th scope=\"col\">#</th>\r\n\r\n                <th scope=\"col\">Month</th>\r\n\r\n                <th scope=\"col\">Total</th>\r\n\r\n                <th scope=\"col\">Paid</th>\r\n\r\n                <th scope=\"col\">Due</th>\r\n              </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n\r\n              <tr className=\"table-primary\">\r\n\r\n                <th scope=\"row\">0</th>\r\n\r\n                <td scope=\"row\">March</td>\r\n\r\n                <td>4000</td>\r\n              </tr>\r\n\r\n              <tr>\r\n\r\n                <th scope=\"row\">1</th>\r\n\r\n                <td>Fabruary</td>\r\n\r\n                <td>4000</td>\r\n\r\n                <td>0</td>\r\n\r\n                <td>4000</td>\r\n              </tr>\r\n\r\n              <tr>\r\n\r\n                <th scope=\"row\">2</th>\r\n\r\n                <td>May</td>\r\n\r\n                <td>3600</td>\r\n\r\n                <td>400</td>\r\n\r\n                <td>3400</td>\r\n              </tr>\r\n\r\n              <tr>\r\n\r\n                <th scope=\"row\">3</th>\r\n\r\n                <td>June</td>\r\n\r\n                <td>4400</td>\r\n\r\n                <td>0</td>\r\n\r\n                <td>4400</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </section>\r\n\r\n      {/* section for feedback to the admin */}\r\n\r\n      <section className=\"light\">\r\n\r\n        <div className=\"container py-2\">\r\n\r\n          <div className=\"h1 text-center text-dark\" id=\"pageHeaderTitle\">\r\n            Give Feedback\r\n          </div>\r\n\r\n          <form>\r\n\r\n            <div className=\"form-group\">\r\n\r\n              <label htmlFor=\"feedBackForm\">Feedback</label>\r\n\r\n              <textarea\r\n                class=\"form-control\"\r\n                id=\"feedBackForm\"\r\n                // @ts-expect-error TS(2322): Type 'string' is not assignable to type 'number'.\r\n                rows=\"3\"\r\n              ></textarea>\r\n\r\n\r\n              <div className=\"text-center\">\r\n\r\n                <button className=\"btn btn-primary\" type=\"submit\">\r\n                  Submit\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </section>\r\n\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","F:\\mess-manager\\frontend\\src\\Screens\\admin\\users\\EditUser.tsx",[],[],"F:\\mess-manager\\frontend\\src\\Screens\\admin\\users\\AddUsers.tsx",["219","220","221","222"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Loader from \"../../../components/Loader\";\r\nimport Message from \"../../../components/Message\";\r\nimport { register } from \"../../../actions/user_actions\";\r\n\r\nfunction AddUsers({\r\n    history\r\n}: any) {\r\n\r\n    const [message, setMessage] = useState(\"\");\r\n    const dispatch = useDispatch();\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n\r\n\r\n\r\n\r\n\r\n    // credentiasls\r\n    const [name, setName] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [room, setRoom] = useState(\"\");\r\n    const [hostel, setHostel] = useState(\"\");\r\n    const [phone, setPhone] = useState(\"\");\r\n    const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n\r\n\r\n    const redirect = location.search ? location.search.split(\"=\")[1] : \"/\";\r\n\r\n    // @ts-expect-error TS(2339): Property 'userRegister' does not exist on type 'De... Remove this comment to see the full error message\r\n    const userRegister = useSelector((state) => state.userRegister);\r\n    const { error, loading, userInfo, success } = userRegister;\r\n\r\n\r\n    const submitHandler = (e: any) => {\r\n        e.preventDefault();\r\n\r\n        if (password !== confirmPassword) {\r\n            setMessage(\"Passwords do not match\");\r\n        } else {\r\n            dispatch(register(name, room, password, hostel, phone));\r\n\r\n\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (success) {\r\n            setMessage(\"The user added successfully\")\r\n        }\r\n    }, [error, success])\r\n\r\n    return (\r\n        // sign up form\r\n\r\n        <div className=\"container\">\r\n\r\n            {message && <Message variant=\"danger\">{message}</Message>}\r\n\r\n            {error && <Message variant=\"danger\">{error}</Message>}\r\n\r\n            {loading && <Loader />}\r\n\r\n            <div className=\"row\">\r\n\r\n                <div className=\"col-md-6 mx-auto\">\r\n\r\n                    <div className=\"card card-body\">\r\n\r\n                        <h3 className=\"text-center mb-4\">\r\n\r\n                            <i className=\"fas fa-user-plus\"></i> Register\r\n                        </h3>\r\n\r\n                        <form onSubmit={submitHandler}>\r\n\r\n                            <div className=\"form-group\">\r\n\r\n                                <label htmlFor=\"name\">Name</label>\r\n\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    id=\"name\"\r\n                                    placeholder=\"Enter Name\"\r\n                                    value={name}\r\n                                    onChange={(e) => setName(e.target.value)}\r\n                                />\r\n                            </div>\r\n\r\n\r\n                            <div className=\"form-group\">\r\n\r\n                                <label htmlFor=\"room\">Your Room no.</label>\r\n\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    id=\"room\"\r\n                                    placeholder=\"Enter room\"\r\n                                    required\r\n                                    value={room}\r\n                                    onChange={(e) => setRoom(e.target.value)}\r\n                                />\r\n                            </div>\r\n\r\n\r\n                            <div className=\"form-group\">\r\n\r\n                                <label htmlFor=\"room\"> Hostel.</label>\r\n\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    id=\"hostel\"\r\n                                    placeholder=\"Enter Hostel\"\r\n                                    required\r\n                                    value={hostel}\r\n                                    onChange={(e) => setHostel(e.target.value)}\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n\r\n                                <label htmlFor=\"room\"> Phone Number</label>\r\n\r\n                                <input\r\n                                    type=\"number\"\r\n                                    className=\"form-control\"\r\n                                    id=\"phone\"\r\n                                    placeholder=\"Enter Your Phone\"\r\n                                    required\r\n                                    value={phone}\r\n                                    onChange={(e) => setPhone(e.target.value)}\r\n                                />\r\n                            </div>\r\n\r\n\r\n                            <div className=\"form-group\">\r\n\r\n                                <label htmlFor=\"password\">Password</label>\r\n\r\n                                <input\r\n                                    type=\"password\"\r\n                                    className=\"form-control\"\r\n                                    id=\"password\"\r\n                                    placeholder=\"Enter Password\"\r\n                                    required\r\n                                    value={password}\r\n                                    onChange={(e) => setPassword(e.target.value)}\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n\r\n                                <label htmlFor=\"password2\">Confirm Password</label>\r\n\r\n                                <input\r\n                                    type=\"password\"\r\n                                    className=\"form-control\"\r\n                                    id=\"password2\"\r\n                                    required\r\n                                    placeholder=\"Confirm Password\"\r\n                                    value={confirmPassword}\r\n                                    onChange={(e) => setConfirmPassword(e.target.value)}\r\n                                />\r\n                            </div>\r\n\r\n                            <button type=\"submit\" className=\"btn btn-primary btn-block\">\r\n                                Register\r\n                            </button>\r\n                        </form>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default AddUsers\r\n","F:\\mess-manager\\frontend\\src\\Screens\\admin\\users\\ViewUsers.tsx",["223","224"],[],"// this screen displays the list of users\r\nimport { listUsers, deleteUser } from \"../../../actions/user_actions\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Loader from \"../../../components/Loader\";\r\nimport Message from \"../../../components/Message\";\r\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\r\n\r\n\r\nfunction ViewUsers() {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  // @ts-expect-error TS(2339): Property 'userLogin' does not exist on type 'Defau... Remove this comment to see the full error message\r\n  const { userInfo } = useSelector((state) => state.userLogin);\r\n\r\n  // @ts-expect-error TS(2339): Property 'userList' does not exist on type 'Defaul... Remove this comment to see the full error message\r\n  const { users, loading, error } = useSelector((state) => state.userList);\r\n\r\n  // @ts-expect-error TS(2339): Property 'userDelete' does not exist on type 'Defa... Remove this comment to see the full error message\r\n  const { success: successDelete } = useSelector((state) => state.userDelete);\r\n\r\n  useEffect(() => {\r\n    if (userInfo && userInfo.isAdmin) {\r\n      dispatch(listUsers());\r\n    } else {\r\n      navigate(\"/login\");\r\n    }\r\n  }, [dispatch, userInfo, navigate, successDelete]);\r\n  const deleteHandler = (id: any) => {\r\n    if (window.confirm(\"Are you sure you want to delete this user?\")) {\r\n      dispatch(deleteUser(id));\r\n    }\r\n  };\r\n\r\n\r\n  return <>\r\n\r\n    <h1 className=\"text-center text-dark\">View Users</h1>\r\n    {loading ? (\r\n\r\n      <Loader />\r\n    ) : error ? (\r\n\r\n      <Message variant=\"danger\">{error}</Message>\r\n    ) : (\r\n\r\n      <table className=\"table table-striped\">\r\n\r\n        <thead>\r\n\r\n          <tr>\r\n\r\n            <th scope=\"col\">#</th>\r\n\r\n            <th scope=\"col\">Name</th>\r\n\r\n            <th scope=\"col\">Email</th>\r\n\r\n            <th scope=\"col\">Room No</th>\r\n\r\n            <th scope=\"col\">Phone</th>\r\n\r\n            <th scope=\"col\">Admin</th>\r\n\r\n            <th scope=\"col\">Edit</th>\r\n\r\n            <th scope=\"col\">Delete</th>\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n\r\n          {users.map((user: any) => <tr key={user.id}>\r\n\r\n            <th scope=\"row\">1</th>\r\n\r\n            <td>{user.username}</td>\r\n\r\n            <td>{user.email}</td>\r\n\r\n            <td>{user.room}</td>\r\n\r\n            <td>{user.phone}</td>\r\n\r\n            <td>\r\n              {user.isAdmin ? (\r\n\r\n                <i className=\"fas fa-check\" style={{ color: \"green\" }}>Yes</i>\r\n              ) : (\r\n\r\n                <i className=\"fas fa-times\" style={{ color: \"red\" }}>No</i>\r\n              )}\r\n            </td>\r\n\r\n            <td>\r\n\r\n              <Link\r\n                to={`/admin/user/${user.id}/edit`}\r\n                className=\"btn btn-primary\"\r\n              >\r\n                Edit\r\n              </Link>\r\n            </td>\r\n\r\n            <td>\r\n\r\n              <button\r\n                className=\"btn btn-danger\"\r\n                onClick={() => deleteHandler(user.id)}\r\n              >\r\n                Delete\r\n              </button>\r\n            </td>\r\n          </tr>)}\r\n        </tbody>\r\n      </table>\r\n    )}\r\n  </>;\r\n}\r\n\r\nexport default ViewUsers;\r\n","F:\\mess-manager\\frontend\\src\\Screens\\admin\\expenses\\ThisMonthBill.tsx",["225","226","227","228","229","230","231"],[],"// for this month bill\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { counter } from \"../../../components/counter\"\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getBill } from '../../../actions/expenses_actions'\r\nimport Message from \"../../../components/Message\";\r\nimport Loader from \"../../../components/Loader\";\r\nimport Downloader from '../../../components/Downloader';\r\nimport { listUsers } from \"../../../actions/user_actions\";\r\n\r\nfunction ThisMonthBill() {\r\n  const dispatch = useDispatch();\r\n  const today = new Date().toISOString().substring(0, 7);\r\n  useEffect(() => {\r\n    dispatch(listUsers())\r\n    dispatch(getBill(date.substring(5, 7)))\r\n    // @ts-expect-error TS(2448): Block-scoped variable 'date' used before its decla... Remove this comment to see the full error message\r\n  }, [date, bill])\r\n\r\n  // @ts-expect-error TS(2339): Property 'userList' does not exist on type 'Defaul... Remove this comment to see the full error message\r\n  const { users } = useSelector(state => state.userList)\r\n  // @ts-expect-error TS(2339): Property 'getBill' does not exist on type 'Default... Remove this comment to see the full error message\r\n  const { bill, loading } = useSelector(state => state.getBill)\r\n  const [date, setDate] = useState(today)\r\n\r\n  const handleSubmit = (e: any) => {\r\n    e.preventDefault()\r\n    dispatch(getBill(date.substring(5, 7)))\r\n  }\r\n  function IdToStudent({\r\n    id\r\n  }: any) {\r\n\r\n\r\n    const name = users?.find((user: any) => user.id === id).username\r\n\r\n    return (\r\n      <div>{name}</div>\r\n    )\r\n  }\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"h1 text-center text-dark\" id=\"mess-bill\">\r\n        Mess Bill\r\n\r\n\r\n\r\n\r\n        <form className=\"form form-control\" onSubmit={handleSubmit} >\r\n\r\n          <input type=\"month\" id=\"date\" value={date} onChange={(e) => setDate(e.target.value)} max={today} />\r\n\r\n\r\n          <button className=\"btn btn-primary\" type=\"submit\">Get</button>\r\n        </form>\r\n      </div>\r\n\r\n\r\n\r\n      <Downloader htmlInputId={`mess-bill`} name={\"Expenses-sheet\"} />\r\n\r\n\r\n      {loading ? (<Loader ></Loader>) :\r\n\r\n\r\n\r\n\r\n        <table className=\"table table-striped\">\r\n\r\n          <thead>\r\n\r\n            <tr>\r\n\r\n              <th scope=\"col\">#</th>\r\n\r\n              <th scope=\"col\">Name</th>\r\n\r\n              <th scope=\"col\">Room No</th>\r\n\r\n              <th scope=\"col\">This Month's Bill</th>\r\n\r\n              <th scope=\"col\">Due Bill</th>\r\n\r\n              <th scope=\"col\">Total to be Paid</th>\r\n            </tr>\r\n          </thead>\r\n\r\n          {bill?.map((item: any) => <tbody>\r\n\r\n            <tr>\r\n\r\n              <th scope=\"row\" key={item.id} >{item.id}</th>\r\n\r\n              <td><IdToStudent id={(item.student)} /></td>\r\n\r\n              <td>{item.room}</td>\r\n\r\n              <td>{item.bill.toFixed(2)}</td>\r\n\r\n              <td>{item.dues.toFixed(2)}</td>\r\n\r\n              <td>{item.total.toFixed(2)}</td>\r\n            </tr>\r\n\r\n\r\n          </tbody>\r\n          )}\r\n        </table>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ThisMonthBill;\r\n","F:\\mess-manager\\frontend\\src\\Screens\\admin\\expenses\\TodayExpenses.tsx",["232","233","234","235","236","237","238","239","240","241"],[],"// for this month bill\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { counter } from \"../../../components/counter\"\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getAttendance } from '../../../actions/attendance_actions'\r\nimport { addExpenses } from '../../../actions/expenses_actions'\r\nimport Message from \"../../../components/Message\";\r\nimport Loader from \"../../../components/Loader\";\r\n\r\n\r\nfunction TodayExpenses() {\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        dispatch(getAttendance());\r\n\r\n        if (errorExpenses) {\r\n            setMessage(errorExpenses)\r\n        }\r\n        if (successExpenses) {\r\n            // @ts-expect-error TS(2345): Argument of type '\"The expense is added successful... Remove this comment to see the full error message\r\n            setMessage(\"The expense is added successfully\")\r\n        }\r\n\r\n        // @ts-expect-error TS(2448): Block-scoped variable 'date' used before its decla... Remove this comment to see the full error message\r\n    }, [date, getAttendanceObj, errorExpenses, successExpenses])\r\n\r\n    const [todayExpenses, setTodayExpenses] = useState(0)\r\n    // @ts-expect-error TS(2339): Property 'getAttendance' does not exist on type 'D... Remove this comment to see the full error message\r\n    const { attendance: getAttendanceObj, error: getAttendanceError, loading: getAttendanceLoading } = useSelector(state => state.getAttendance)\r\n\r\n    // @ts-expect-error TS(2339): Property 'addExpenses' does not exist on type 'Def... Remove this comment to see the full error message\r\n    const { success: successExpenses, error: errorExpenses } = useSelector(state => state.addExpenses)\r\n    const submitHandler = (e: any) => {\r\n        e.preventDefault();\r\n\r\n        let expenses = {\r\n            date: date,\r\n            total_attendances: count,\r\n            expenses_per_day: todayExpenses,\r\n            expenses_per_attendance: expensePerAttendance,\r\n        }\r\n        dispatch(addExpenses(expenses))\r\n\r\n        console.log(todayExpenses)\r\n    }\r\n\r\n\r\n\r\n    const today = new Date().toISOString().substr(0, 10);\r\n    const [date, setDate] = useState(today)\r\n    const count = counter(getAttendanceObj, date)\r\n    const [message, setMessage] = useState()\r\n\r\n\r\n\r\n    const expensePerAttendance = (todayExpenses / count).toFixed(2);\r\n    return (\r\n\r\n        <div className=\"container\">\r\n\r\n            {message ? (<Message >{message}</Message>) : null}\r\n\r\n\r\n            <div className=\"h1 text-center text-dark\" id=\"pageHeaderTitle\">\r\n\r\n                Enter <input type=\"date\" id=\"date\" value={date} onChange={(e) => setDate(e.target.value)} max={today} />'s Expenses\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n\r\n                <div className=\"col-md-6 mx-auto\">\r\n\r\n                    <div className=\"card card-body\">\r\n\r\n\r\n                        <form onSubmit={submitHandler}>\r\n\r\n\r\n\r\n                            <label htmlFor=\"name\">Today's Expenses:</label>\r\n\r\n                            <input\r\n                                type=\"number\"\r\n                                className=\"form-group\"\r\n                                id=\"name\"\r\n                                placeholder=\"Enter value\"\r\n                                value={todayExpenses}\r\n                                // @ts-expect-error TS(2345): Argument of type 'string' is not assignable to par... Remove this comment to see the full error message\r\n                                onChange={(e) => setTodayExpenses(e.target.value)}\r\n                            />\r\n\r\n\r\n                            <ul className=\"list-group list-group-flush\">\r\n\r\n                                <label className=\"list-group-item  card-header\">Total Attendances</label>\r\n\r\n                                <li className=\"list-group-item\">{count}</li>\r\n\r\n\r\n                                <label className=\"list-group-item  card-header\">Expense Per Attendance</label>\r\n\r\n                                <li className=\"list-group-item\">{expensePerAttendance}</li>\r\n                            </ul>\r\n\r\n\r\n                            <button type=\"submit\" className=\"btn btn-primary\">\r\n                                Submit\r\n                            </button>\r\n\r\n\r\n\r\n                        </form>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodayExpenses;\r\n","F:\\mess-manager\\frontend\\src\\Screens\\admin\\expenses\\MonthlyExpenses.tsx",["242","243","244","245","246","247","248"],[],"import React from 'react'\r\nimport { getExpensesPerMonth } from '../../../actions/expenses_actions'\r\nimport Loader from \"../../../components/Loader\";\r\nimport Message from \"../../../components/Message\";\r\nimport ConvertToMonth from '../../../components/ConvertToMonth';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useEffect, useState } from 'react';\r\nimport Downloader from '../../../components/Downloader';\r\n\r\nexport default function MonthlyExpenses() {\r\n    const dispatch = useDispatch();\r\n    const today = new Date().toISOString().substring(0, 7);\r\n\r\n\r\n    useEffect(\r\n        () => {\r\n            dispatch(getExpensesPerMonth(date.substring(5, 7)))\r\n\r\n            console.log(today)\r\n            // @ts-expect-error TS(2448): Block-scoped variable 'date' used before its decla... Remove this comment to see the full error message\r\n        }, [date, expensesPerMonth])\r\n\r\n\r\n    // @ts-expect-error TS(2339): Property 'getExpensesPerMonth' does not exist on t... Remove this comment to see the full error message\r\n    const { expensesPerMonth, loading, success } = useSelector(state => state.getExpensesPerMonth)\r\n\r\n    const handleSubmit = (e: any) => {\r\n        e.preventDefault()\r\n        dispatch(getExpensesPerMonth(date.substring(5, 7)))\r\n\r\n        let TotalExpenses = expensesPerMonth?.reduce(function (acc: any, cur: any) {\r\n            return acc + cur.expenses_per_day\r\n        }, 0)\r\n\r\n        setTotalExpenses(TotalExpenses)\r\n\r\n        console.log(TotalExpenses)\r\n    }\r\n    const [date, setDate] = useState(today)\r\n    const [totalExpenses, setTotalExpenses] = useState();\r\n\r\n\r\n    return (\r\n\r\n        <div className='container'>\r\n\r\n            <div >\r\n\r\n                <div className=\"h1 text-center text-dark\" id=\"expensesPageHeaderTitle\">\r\n                    Get Expenses of\r\n\r\n\r\n\r\n\r\n                    <form className=\"form form-control\" onSubmit={handleSubmit} >\r\n\r\n                        <input type=\"month\" id=\"date\" value={date} onChange={(e) => setDate(e.target.value)} max={today} />\r\n\r\n\r\n                        <button className=\"button \" type=\"submit\">Get</button>\r\n                    </form>\r\n                </div>\r\n\r\n            </div >\r\n\r\n            <Downloader htmlInputId={`expensesPageHeaderTitle`} name={\"Expenses-sheet\"} />\r\n\r\n            < div id=\"expensesPageHeaderTitle\" >\r\n\r\n\r\n                {loading ? (<Loader></Loader >) :\r\n\r\n                    <table className=\"table table-striped table-hover\">\r\n\r\n                        <thead>\r\n\r\n                            <tr>\r\n\r\n                                <th scope=\"col\">#</th>\r\n\r\n                                <th scope=\"col\">Date</th>\r\n\r\n                                <th scope=\"col\">Total Attendances</th>\r\n\r\n                                <th scope=\"col\">Expenses(PKR)</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n\r\n                        {expensesPerMonth?.map((item: any) => <tbody>\r\n\r\n                            <tr key={item.id}>\r\n\r\n                                <th scope=\"row\">{item.id}</th>\r\n\r\n                                <td>{item.date}</td>\r\n\r\n                                <td>{item.total_attendances}</td>\r\n\r\n                                <td>{item.expenses_per_day}</td>\r\n                            </tr>\r\n                        </tbody>)}\r\n\r\n\r\n\r\n                        <thead>\r\n\r\n                            <tr>\r\n\r\n\r\n                                <th scope=\"row\">Total Expenses</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n\r\n                            <tr>\r\n\r\n\r\n                                <td scope=\"row\" >{totalExpenses}</td>\r\n                            </tr>\r\n\r\n                        </tbody>\r\n                    </table>\r\n                }\r\n\r\n            </div >\r\n\r\n\r\n\r\n\r\n        </div >\r\n    );\r\n}\r\n","F:\\mess-manager\\frontend\\src\\Screens\\admin\\expenses\\BillForm.tsx",["249","250","251","252","253","254","255","256","257","258","259","260"],[],"// for this month bill\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { counter } from \"../../../components/counter\"\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getBill } from '../../../actions/expenses_actions'\r\nimport Message from \"../../../components/Message\";\r\nimport Loader from \"../../../components/Loader\";\r\nimport Downloader from '../../../components/Downloader';\r\nimport { listUsers } from \"../../../actions/user_actions\";\r\n\r\nimport { addBill } from '../../../actions/expenses_actions';\r\n\r\nfunction BillForm() {\r\n\r\n    const dispatch = useDispatch();\r\n    const today = new Date().toISOString().substring(0, 7);\r\n    let myRef = useRef()\r\n\r\n    useEffect(() => {\r\n        dispatch(listUsers())\r\n        dispatch(getBill(date.substring(5, 7)))\r\n        // @ts-expect-error TS(2448): Block-scoped variable 'date' used before its decla... Remove this comment to see the full error message\r\n    }, [date, bill])\r\n\r\n    // @ts-expect-error TS(2339): Property 'userList' does not exist on type 'Defaul... Remove this comment to see the full error message\r\n    const { users } = useSelector(state => state.userList)\r\n    // @ts-expect-error TS(2339): Property 'getBill' does not exist on type 'Default... Remove this comment to see the full error message\r\n    const { bill, loading } = useSelector(state => state.getBill)\r\n    const [date, setDate] = useState(today)\r\n\r\n\r\n    const [billPayed, setBillPayed] = useState(0)\r\n\r\n\r\n\r\n    const handleSubmit = (e: any) => {\r\n        e.preventDefault()\r\n        dispatch(getBill(date.substring(5, 7)))\r\n    }\r\n    function IdToStudent({\r\n        id\r\n    }: any) {\r\n        const name = users?.find((user: any) => user.id === id).username\r\n        return (\r\n\r\n            <div>{name}</div>\r\n        )\r\n    }\r\n\r\n    const buttonClick = (e: any) => {\r\n\r\n        e.preventDefault()\r\n\r\n        // let billPayed = e.target.elements[`bill-payed-${id}`].value;\r\n\r\n        let month = date.substring(5, 7)\r\n        let id = e.target[0].id.split(\"-\").at(-1)\r\n\r\n        let billPayed = {\r\n\r\n        }\r\n\r\n\r\n\r\n        console.log(month, id, e)\r\n\r\n    }\r\n    return (\r\n\r\n        <div className=\"container\">\r\n\r\n            <div className=\"h1 text-center text-dark\" id=\"mess-bill\">\r\n                Bill Form\r\n\r\n                <form className=\"form form-control\" onSubmit={handleSubmit} >\r\n\r\n                    <input type=\"month\" id=\"date\" value={date} onChange={(e) => setDate(e.target.value)} max={today} />\r\n\r\n\r\n                    <button className=\"btn btn-primary\" type=\"submit\">Get</button>\r\n                </form>\r\n            </div>\r\n\r\n\r\n\r\n            <Downloader htmlInputId={`mess-bill`} name={\"Expenses-sheet\"} />\r\n\r\n\r\n            {loading ? (<Loader ></Loader>) :\r\n\r\n\r\n\r\n\r\n                <table className=\"table table-striped\">\r\n\r\n                    <thead>\r\n\r\n                        <tr>\r\n\r\n                            <th scope=\"col\">#</th>\r\n\r\n                            <th scope=\"col\">Name</th>\r\n\r\n                            <th scope=\"col\">Room No</th>\r\n\r\n                            <th scope=\"col\">This Month's Bill</th>\r\n\r\n                            <th scope=\"col\">Due Bill</th>\r\n\r\n                            <th scope=\"col\">Total to be Paid</th>\r\n\r\n                            <th scope=\"col\">Paid Payed</th>\r\n                        </tr>\r\n                    </thead>\r\n\r\n                    {bill?.map((item: any) => <tbody>\r\n\r\n                        <tr>\r\n\r\n                            <th scope=\"row\" key={item.id} >{item.id}</th>\r\n\r\n                            <td><IdToStudent id={(item.student)} /></td>\r\n\r\n                            <td>{item.room}</td>\r\n\r\n                            <td>{item.bill.toFixed(2)}</td>\r\n\r\n                            <td>{item.dues.toFixed(2)}</td>\r\n\r\n                            <td>{item.total.toFixed(2)}</td>\r\n\r\n                            <td>\r\n\r\n\r\n                                <form className=\"form\" onSubmit={buttonClick}>\r\n\r\n                                    <input className=\"form-control\" id={`bill-payed-${item.id}`} type=\"number\" onChange={(e) => (e.target.value)}></input>\r\n\r\n                                    <button className='btn btn-primary' type=\"submit\" name={`id-input-${item.student}`} > Add Bill</button>\r\n                                </form>\r\n                            </td>\r\n                        </tr>\r\n\r\n\r\n                    </tbody>\r\n                    )}\r\n                </table>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BillForm;\r\n","F:\\mess-manager\\frontend\\src\\Screens\\admin\\attendances\\MonthlyAttendance.tsx",["261","262","263","264","265","266"],[],"import AttendanceSheet from './AttendanceSheet'\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getAttendance } from \"../../../actions/attendance_actions\"\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport { listUsers } from \"../../../actions/user_actions\";\r\nimport ConvertToMonth from '../../../components/ConvertToMonth';\r\nimport DailyAttendance from './DailyAttendance'\r\n\r\nfunction MonthlyAttendance() {\r\n\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n\r\n\r\n    // @ts-expect-error TS(2339): Property 'userLogin' does not exist on type 'Defau... Remove this comment to see the full error message\r\n    const { userInfo } = useSelector((state) => state.userLogin);\r\n\r\n    // @ts-expect-error TS(2339): Property 'getAttendance' does not exist on type 'D... Remove this comment to see the full error message\r\n    const { attendance, error, loading } = useSelector(state => state.getAttendance)\r\n    // @ts-expect-error TS(2339): Property 'userList' does not exist on type 'Defaul... Remove this comment to see the full error message\r\n    const { users } = useSelector(state => state.userList)\r\n    const monthDateList = attendance?.map((item: any) => Number((item.date).split(\"-\")[1])) //[06,06,06]\r\n    const monthDateSet = [...new Set(monthDateList)]\r\n\r\n    useEffect(() => {\r\n        if (userInfo && userInfo.isAdmin) {\r\n            dispatch(listUsers())\r\n            dispatch(getAttendance())\r\n        } else {\r\n            navigate('./login')\r\n        }\r\n    }, [navigate, dispatch, userInfo])\r\n\r\n    const filteredAttendance = (number: any) => attendance.filter((item: any) => Number((item.date).split(\"-\")[1]) === number)\r\n\r\n\r\n    return (\r\n\r\n        <div className='container'>\r\n            {monthDateSet.map(item => (\r\n\r\n                <>\r\n\r\n                    <div className=\"h1 text-center text-dark\" id=\"pageHeaderTitle\">\r\n\r\n                        Attendance of <code><ConvertToMonth number={(item)} /></code>\r\n                    </div>\r\n\r\n\r\n                    <DailyAttendance key={item} month={item} filteredMonthlyAttendance={filteredAttendance(item)} />\r\n                </>\r\n            ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MonthlyAttendance\r\n","F:\\mess-manager\\frontend\\src\\Screens\\admin\\mess\\ViewMess.tsx",["267","268","269","270","271","272","273"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { getMessMenu } from \"../../../actions/mess_actions\";\r\n\r\nimport Message from \"../../../components/Message\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport html2canvas from 'html2canvas';\r\nimport jsPDF from 'jspdf';\r\nimport \"./ViewMess.css\";\r\nimport Loader from \"../../../components/Loader\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Downloader from \"../../../components/Downloader\";\r\n\r\nfunction ViewMess() {\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(getMessMenu());\r\n\r\n\r\n\r\n  }, [dispatch, useSelector]);\r\n\r\n  // @ts-expect-error TS(2339): Property 'messMenu' does not exist on type 'Defaul... Remove this comment to see the full error message\r\n  const { messMenu, loading, error } = useSelector((state) => state.messMenu);\r\n\r\n\r\n  const [editMenu, setEditMenu] = useState(false)\r\n\r\n  // function printDocument() {\r\n  //   const input = document.getElementById('divToPrint');\r\n  //   html2canvas(input)\r\n  //     .then((canvas) => {\r\n  //       const imgData = canvas.toDataURL('image/png');\r\n  //       const pdf = new jsPDF();\r\n  //       pdf.addImage(imgData, 'JPEG', 0, 0);\r\n  //       // pdf.output('dataurlnewwindow');\r\n  //       pdf.save(\"Mess.pdf\");\r\n  //     })\r\n  //     ;\r\n  // }\r\n\r\n  return (\r\n\r\n    <section id=\"tabs\" className=\"project-tab\">\r\n\r\n      <div className=\"container\">\r\n\r\n        <div className=\"row\">\r\n\r\n          <div className=\"col-md-12\">\r\n\r\n\r\n            <Downloader htmlInputId={'divToPrint'} name={\"Mess-Menu\"} />\r\n            {/* <button onClick={printDocument} >Download</button> */}\r\n\r\n\r\n          </div>\r\n\r\n\r\n          <div className=\"col-md-12\">\r\n\r\n            <div className=\"tab-content\" id=\"nav-tabContent\">\r\n\r\n              <div\r\n                // @ts-expect-error TS(2322): Type '{ children: Element; class: string; id: stri... Remove this comment to see the full error message\r\n                class=\"tab-pane fade show active\"\r\n                id=\"nav-home\"\r\n                role=\"tabpanel\"\r\n                aria-labelledby=\"nav-home-tab\"\r\n              >\r\n\r\n                {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message>\r\n                  : (\r\n\r\n                    <table id=\"divToPrint\" className=\"table\" cellSpacing=\"0\">\r\n\r\n                      <thead>\r\n\r\n                        <tr>\r\n\r\n                          <th>Day</th>\r\n\r\n                          <th>First Time</th>\r\n\r\n                          <th>Second Time</th>\r\n\r\n                          <th>Edit</th>\r\n                        </tr>\r\n                      </thead>\r\n\r\n\r\n                      <tbody>\r\n\r\n                        {messMenu?.map((menu: any) => <tr key={menu.id}>\r\n\r\n                          <td>\r\n\r\n                            <a href=\"#\">{menu.day}</a>\r\n                          </td>\r\n\r\n                          <td>{menu.first_time}</td>\r\n\r\n                          <td>{menu.second_time}</td>\r\n\r\n                          <td><button className=\"btn btn-primary\"><Link\r\n                            to={`/admin/update-mess/${menu.day}`}>Edit</Link>\r\n                          </button> </td>\r\n                        </tr>)}\r\n\r\n\r\n                      </tbody>\r\n                    </table>\r\n                  )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default ViewMess;\r\n","F:\\mess-manager\\frontend\\src\\Screens\\admin\\attendances\\markAttendance.tsx",["274","275","276","277","278","279","280","281","282","283"],[],"\r\nimport Button from \"../../../components/Button\";\r\nimport { listUsers, deleteUser } from \"../../../actions/user_actions\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Loader from \"../../../components/Loader\";\r\nimport Message from \"../../../components/Message\";\r\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\r\nimport { postAttendance, getAttendance } from \"../../../actions/attendance_actions\";\r\nimport { counter } from \"../../../components/counter\";\r\n\r\n\r\nexport default function MarkAttendance() {\r\n\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n\r\n\r\n\r\n\r\n\r\n  // @ts-expect-error TS(2339): Property 'userList' does not exist on type 'Defaul... Remove this comment to see the full error message\r\n  const { users, loading, error } = useSelector((state) => state.userList);\r\n  const today = new Date().toISOString().substr(0, 10);\r\n  // @ts-expect-error TS(2339): Property 'userLogin' does not exist on type 'Defau... Remove this comment to see the full error message\r\n  const { userInfo } = useSelector((state) => state.userLogin);\r\n\r\n\r\n  // @ts-expect-error TS(2339): Property 'attendance' does not exist on type 'Defa... Remove this comment to see the full error message\r\n  const { success: attendanceSuccess, error: attendanceError, loading: attendanceLoading } = useSelector((state) => state.attendance)\r\n\r\n  // @ts-expect-error TS(2339): Property 'getAttendance' does not exist on type 'D... Remove this comment to see the full error message\r\n  const { attendance: getAttendanceObj, error: getAttendanceError, loading: getAttendanceLoading } = useSelector(state => state.getAttendance)\r\n\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (userInfo && userInfo.isAdmin) {\r\n      dispatch(listUsers());\r\n\r\n    } else {\r\n      navigate(\"/login\");\r\n    }\r\n\r\n  }, [dispatch, userInfo, navigate]);\r\n\r\n\r\n\r\n\r\n  const userIds = users?.map((user: any) => user.id)\r\n\r\n\r\n  const [total, setTotal] = useState(0)\r\n\r\n\r\n\r\n  const handleSubmit = (e: any) => {\r\n    e.preventDefault();\r\n    try {\r\n      const attendanceExtractor = (e: any, id: any) => {\r\n        let first_time = e.target.elements[`first-attendance-${id}`].value;\r\n        let second_time = e.target.elements[`second-attendance-${id}`].value;\r\n\r\n        return [first_time, second_time]\r\n      }\r\n\r\n\r\n\r\n      for (let index = 0; index < userIds.length; index++) {\r\n        let id = userIds[index];\r\n\r\n        const attendance = {\r\n          student: id,\r\n          date: date,\r\n          first_time: attendanceExtractor(e, id)[0],\r\n          second_time: attendanceExtractor(e, id)[1]\r\n        }\r\n        dispatch(postAttendance(attendance, id))\r\n      }\r\n      alert(\"All the attendance is submitted successfully\")\r\n      dispatch(getAttendance());\r\n      let count = counter(getAttendanceObj, date);\r\n      setTotal(count)\r\n\r\n      console.log(count)\r\n    } catch (error) {\r\n\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const [date, setDate] = useState(today)\r\n\r\n\r\n  return <>\r\n\r\n    <section>\r\n\r\n      <div className=\"row\">\r\n\r\n        <div className=\"col-md-12 text-dark text-center\">\r\n\r\n          <h3 >Mark Attendance</h3> for <label htmlFor=\"date\">The Date:</label><h4><input type=\"date\" id=\"date\" value={date} onChange={(e) => setDate(e.target.value)} max={today} /></h4>'s meal\r\n        </div>\r\n      </div>\r\n      {loading ? (\r\n\r\n        <Loader />\r\n      ) : error ? (\r\n\r\n        <Message variant=\"danger\">{error}</Message>\r\n      ) :\r\n        (\r\n\r\n          <form className=\"form\" onSubmit={handleSubmit}>\r\n\r\n\r\n            <table className=\"table table-bordered\">\r\n\r\n              <thead>\r\n\r\n                <tr>\r\n\r\n                  <th scope=\"col\">#</th>\r\n\r\n                  <th scope=\"col\">Name</th>\r\n\r\n                  <th scope=\"col\">Room no.</th>\r\n\r\n                  <th scope=\"col\">First Time</th>\r\n\r\n                  <th scope=\"col\">Second Time</th>\r\n\r\n                  <th scope=\"col\">Status</th>\r\n                </tr>\r\n              </thead>\r\n\r\n\r\n              {users.map((user: any) => <tbody>\r\n\r\n\r\n\r\n\r\n\r\n                <tr key={user.id}>\r\n\r\n\r\n\r\n                  <th scope=\"row\" id={`user-id-${user.id}}`}>{user.id}</th>\r\n\r\n                  <td className=\"form-group\">\r\n\r\n                    <input\r\n\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      id={`table-name-${user.id}`}\r\n                      name=\"username\"\r\n                      value={user.username}\r\n\r\n                    />\r\n                  </td>\r\n\r\n                  <td className=\"form-group\">\r\n\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      id={`table-ropm-${user.id}`}\r\n                      name=\"room\"\r\n                      value={user.room}\r\n\r\n                    />\r\n\r\n                  </td>\r\n\r\n\r\n                  <td>\r\n\r\n                    <select id={`first-attendance-${user.id}`} onChange={(e) => (e.target.value)} className=\"form-control\" >\r\n\r\n                      <option value=\"present\">Present ✓</option>\r\n\r\n                      <option value=\"absent\">Absent X</option>\r\n\r\n                      <option value=\"double\">Double 2</option>\r\n                    </select>\r\n\r\n                  </td>\r\n\r\n                  <td>\r\n\r\n                    <select id={`second-attendance-${user.id}`} onChange={(e) => (e.target.value)} className=\"form-control\" >\r\n\r\n                      <option value=\"present\">Present ✓</option>\r\n\r\n                      <option value=\"absent\">Absent X</option>\r\n\r\n                      <option value=\"double\">Double 2</option>\r\n                    </select>\r\n\r\n                  </td>\r\n\r\n                  <td>\r\n\r\n                    <i className=\"bi bi-check\" ></i>\r\n                  </td>\r\n                </tr>\r\n\r\n              </tbody>)\r\n              }\r\n\r\n            </table>\r\n\r\n            <button type=\"submit\" className=\"btn btn-primary\">\r\n              Submit\r\n            </button>\r\n\r\n          </form>\r\n\r\n        )\r\n\r\n\r\n      }\r\n\r\n\r\n    </section>\r\n\r\n    <section>\r\n\r\n      <div className=\"row\">\r\n\r\n        <div className=\"col-md-12 text-dark\">\r\n\r\n          <h3>{today}'s totals </h3>\r\n        </div>\r\n      </div>\r\n\r\n      <table className=\"table table-bordered\">\r\n\r\n        <thead>\r\n\r\n          <tr>\r\n\r\n            <th scope=\"col\">#</th>\r\n\r\n            <th scope=\"col\">Total Members</th>\r\n\r\n            <th scope=\"col\">Total Absentees</th>\r\n\r\n            <th scope=\"col\">Total Attendences</th>\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n\r\n          <tr>\r\n\r\n            <th scope=\"row\">1</th>\r\n\r\n            <td>{users?.length}</td>\r\n\r\n            <td></td>\r\n\r\n            <td>{total}</td>\r\n\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n\r\n    </section>\r\n  </>;\r\n}\r\n\r\n\r\n\r\n","F:\\mess-manager\\frontend\\src\\Screens\\admin\\mess\\UpdateMess.tsx",["284","285"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router\";\r\n\r\nimport { getMessMenu, updateMessMenu } from \"../../../actions/mess_actions\";\r\n\r\nimport Message from \"../../../components/Message\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport \"./ViewMess.css\";\r\nimport Loader from \"../../../components/Loader\";\r\n\r\n\r\n\r\nfunction UpdateMess() {\r\n\r\n    const dispatch = useDispatch()\r\n    const { day } = useParams()\r\n\r\n    const [menuFirst, setMenuFirst] = useState()\r\n    const [menuSecond, setMenuSecond] = useState()\r\n    useEffect(() => {\r\n        dispatch(getMessMenu());\r\n    }, [dispatch, useSelector]);\r\n\r\n    // @ts-expect-error TS(2339): Property 'messMenu' does not exist on type 'Defaul... Remove this comment to see the full error message\r\n    const { messMenu, loading, error } = useSelector((state) => state.messMenu);\r\n    let menu = messMenu.filter((item: any) => item?.day === day)\r\n\r\n    const handleChange = (e: any) => {\r\n        const { name, value } = e.target;\r\n        if (name === \"firstTime\") {\r\n            setMenuFirst(value)\r\n        } else if (name === \"secondTime\") {\r\n            setMenuSecond(value)\r\n        }\r\n\r\n        console.log({ name, value })\r\n    }\r\n\r\n    const navigate = useNavigate()\r\n    const submitHandler = async (e: any) => {\r\n        e.preventDefault();\r\n        await dispatch(updateMessMenu(day, {\r\n            day: day,\r\n            first_time: menuFirst,\r\n            second_time: menuSecond\r\n        }))\r\n\r\n        navigate(-1)\r\n        alert(\"Menu Updated\")\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <section id=\"tabs\" className=\"project-tab\">\r\n\r\n            <div className=\"container\">\r\n\r\n\r\n\r\n\r\n\r\n\r\n                <div className=\"col-md-12\">\r\n\r\n                    <div className=\"tab-content\" id=\"nav-tabContent\">\r\n\r\n                        <div\r\n                            // @ts-expect-error TS(2322): Type '{ children: Element; class: string; id: stri... Remove this comment to see the full error message\r\n                            class=\"tab-pane fade show active\"\r\n                            id=\"nav-home\"\r\n                            role=\"tabpanel\"\r\n                            aria-labelledby=\"nav-home-tab\"\r\n                        >\r\n\r\n                            {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message>\r\n                                : (\r\n\r\n                                    <form onSubmit={(e) => submitHandler(e)}>\r\n\r\n\r\n                                        <table className=\"table\" cellSpacing=\"0\">\r\n\r\n                                            <thead>\r\n\r\n                                                <tr>\r\n\r\n                                                    <th>Day</th>\r\n\r\n                                                    <th>First Time</th>\r\n\r\n                                                    <th>Second Time</th>\r\n                                                </tr>\r\n                                            </thead>\r\n\r\n\r\n                                            <tbody>\r\n\r\n                                                {menu.map((menu: any) => <tr key={menu.id}>\r\n\r\n                                                    <td >\r\n\r\n                                                        <a href=\"#\">{menu.day}</a>\r\n                                                    </td>\r\n\r\n                                                    <td className=\"form-group\">\r\n\r\n                                                        <input type=\"text\" name=\"firstTime\" className=\"form-control\" placeholder={menu.first_time} value={menuFirst} onChange={(e) => handleChange(e)} />\r\n\r\n                                                    </td>\r\n\r\n                                                    <td className=\"form-group\">\r\n\r\n                                                        <input type=\"text\" name=\"secondTime\" className=\"form-control\" placeholder={menu.second_time} value={menuSecond} onChange={(e) => handleChange(e)} />\r\n\r\n                                                    </td>\r\n                                                </tr>)}\r\n\r\n\r\n                                            </tbody>\r\n                                        </table>\r\n\r\n                                        <div className=\"row\">\r\n\r\n                                            <div className=\"col-md-12\">\r\n\r\n                                                <button className=\"btn btn-primary\" type=\"submit\">Save</button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </form>\r\n                                )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </section >\r\n    );\r\n}\r\n\r\nexport default UpdateMess;\r\n","F:\\mess-manager\\frontend\\src\\components\\Loader.tsx",[],[],"F:\\mess-manager\\frontend\\src\\components\\Message.tsx",[],[],"F:\\mess-manager\\frontend\\src\\actions\\user_actions.ts",["286"],[],"import axios from 'axios'\r\n\r\nimport {\r\n    USER_LOGIN_REQUEST,\r\n    USER_LOGIN_SUCCESS,\r\n    USER_LOGIN_FAIL,\r\n\r\n    USER_LOGOUT,\r\n\r\n    USER_REGISTER_REQUEST,\r\n    USER_REGISTER_SUCCESS,\r\n    USER_REGISTER_FAIL,\r\n\r\n    USER_DETAILS_REQUEST,\r\n    USER_DETAILS_SUCCESS,\r\n    USER_DETAILS_FAIL,\r\n    USER_DETAILS_RESET,\r\n\r\n\r\n    USER_UPDATE_PROFILE_REQUEST,\r\n    USER_UPDATE_PROFILE_SUCCESS,\r\n    USER_UPDATE_PROFILE_FAIL,\r\n\r\n\r\n    USER_LIST_REQUEST,\r\n    USER_LIST_SUCCESS,\r\n    USER_LIST_FAIL,\r\n    USER_LIST_RESET,\r\n\r\n\r\n    USER_DELETE_REQUEST,\r\n    USER_DELETE_SUCCESS,\r\n    USER_DELETE_FAIL,\r\n\r\n    USER_UPDATE_REQUEST,\r\n    USER_UPDATE_SUCCESS,\r\n    USER_UPDATE_FAIL,\r\n\r\n\r\n    USERS_ATTENDANCE_REQUEST,\r\n    USERS_ATTENDANCE_SUCCESS,\r\n    USERS_ATTENDANCE_FAIL,\r\n    USERS_ATTENDANCE_RESET,\r\n\r\n} from '../constants/user_constants'\r\n\r\n\r\n\r\nexport const login = (username: string, password: string) => async (dispatch: any) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_LOGIN_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n\r\n\r\n        const { data } = await axios.post(\r\n            `/api/users/login/`,\r\n            { 'username': username, 'password': password },\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    } catch (error:any) {\r\n        dispatch({\r\n            type: USER_LOGIN_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const logout = () => (dispatch: any) => {\r\n    localStorage.removeItem('userInfo')\r\n    dispatch({ type: USER_LOGOUT })\r\n    dispatch({ type: USER_DETAILS_RESET })\r\n    dispatch({ type: USER_LIST_RESET })\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport const register = (username: any, room: any, password: any, hostel: any, phone: any) => async (dispatch: any) => {\r\n\r\n\r\n    try {\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            '/api/users/register/',\r\n            { 'username': username, 'password': password, 'room': room, 'hostel': hostel, 'phone': phone },\r\n            config\r\n        )\r\n        dispatch({\r\n            type: USER_REGISTER_REQUEST\r\n        })\r\n\r\n        dispatch({\r\n            type: USER_REGISTER_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error:any) {\r\n        dispatch({\r\n            type: USER_REGISTER_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n\r\n                    : error.response,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const listUsers = () => async (dispatch: any, getState: any) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_LIST_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'Authorization': `JWT${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/users/`,\r\n\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error:any) {\r\n        dispatch({\r\n            type: USER_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n// && !localStorage.getItem('userInfo')\r\n// need to be fixed\r\nexport const getUserDetails = (id: any) => async (dispatch: any, getState: any) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_DETAILS_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'Authorization': `JWT ${userInfo.token}`\r\n            }\r\n        }\r\n        //    FIXME:\r\n        const { data } = await axios.get(`/api/users/${id}/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error:any) {\r\n        dispatch({\r\n            type: USER_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const updateUserProfile = (user: any) => async (dispatch: any, getState: any) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'Authorization': `JWT ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/user/profile/update/`,\r\n            user,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    } catch (error:any) {\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const deleteUser = (id: any) => async (dispatch: any, getState: any) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_DELETE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'Authorization': `JWT ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.delete(\r\n            `/api/users/delete/${id}/`,\r\n\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_DELETE_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error:any) {\r\n        dispatch({\r\n            type: USER_DELETE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const updateUser = (user: any) => async (dispatch: any, getState: any) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_UPDATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'Authorization': `JWT ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/users/update/${user.id}/`,\r\n            user,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_UPDATE_SUCCESS,\r\n            payload: data\r\n\r\n        })\r\n\r\n        dispatch({\r\n            type: USER_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error:any) {\r\n        dispatch({\r\n            type: USER_UPDATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const markAttendance = (attendance: any) => async (dispatch: any, getState: any) => {\r\n    try {\r\n        dispatch({\r\n            type: USERS_ATTENDANCE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'Authorization': `JWT ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            `/api/user/attendance/`,\r\n            attendance,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USERS_ATTENDANCE_SUCCESS,\r\n            payload: data\r\n\r\n        })\r\n    }\r\n    catch (error:any) {\r\n        dispatch({\r\n            type: USERS_ATTENDANCE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n// export const resetUserPassword = (email) => async (dispatch) => {\r\n//     try {\r\n//         dispatch({\r\n//             type: USER_PASSWORD_RESET_REQUEST\r\n//         })\r\n\r\n\r\n//         const config = {\r\n//             headers: {\r\n//                 'Content-type': 'application/json',\r\n//             }\r\n//         }\r\n\r\n//         const { data } = await axios.post(\r\n//             `/auth/users/reset_password/`,\r\n//             { 'email': email },\r\n//             config\r\n//         )\r\n\r\n//         dispatch({\r\n//             type: USER_PASSWORD_RESET_SUCCESS,\r\n//         })\r\n\r\n\r\n\r\n//     } catch (error) {\r\n//         dispatch({\r\n//             type: USER_PASSWORD_RESET_FAIL,\r\n//             payload: error.response && error.response.data.detail\r\n//                 ? error.response.data.detail\r\n//                 : error.message,\r\n//         })\r\n//     }\r\n// }\r\n\r\n\r\n// export const resetUserPasswordConfirm = (uid, token, new_password, re_new_password) => async (dispatch) => {\r\n\r\n\r\n\r\n//     const body = JSON.stringify({ uid, token, new_password, re_new_password });\r\n//     try {\r\n//         dispatch({\r\n//             type: USER_PASSWORD_RESET_CONFIRM_REQUEST\r\n//         })\r\n\r\n\r\n//         const config = {\r\n//             headers: {\r\n//                 'Content-type': 'application/json',\r\n//             }\r\n//         }\r\n\r\n//         await axios.post(\r\n//             `/auth/users/reset_password_confirm/`,\r\n//             body,\r\n//             config\r\n//         )\r\n\r\n//         dispatch({\r\n//             type: USER_PASSWORD_RESET_CONFIRM_SUCCESS,\r\n//         })\r\n\r\n\r\n\r\n//     } catch (error) {\r\n//         dispatch({\r\n//             type: USER_PASSWORD_RESET_CONFIRM_FAIL,\r\n//             payload: error.response && error.response.data.detail\r\n//                 ? error.response.data.detail\r\n//                 : error.message,\r\n\r\n\r\n//         })\r\n//     }\r\n// }","F:\\mess-manager\\frontend\\src\\actions\\mess_actions.ts",["287"],[],"import {\r\n    GET_MESS_MENU_REQUEST,\r\n    GET_MESS_MENU_SUCCESS,\r\n    GET_MESS_MENU_FAIL,\r\n\r\n    UPDATE_MESS_MENU_REQUEST,\r\n    UPDATE_MESS_MENU_SUCCESS,\r\n    UPDATE_MESS_MENU_FAIL,\r\n    UPDATE_MESS_MENU_RESET,\r\n\r\n\r\n} from '../constants/mess_constants'\r\n\r\n\r\nimport axios from 'axios'\r\n\r\nexport const getMessMenu = () => async (dispatch: any) => {\r\n    try {\r\n        dispatch({\r\n            type: GET_MESS_MENU_REQUEST\r\n        })\r\n\r\n\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(`/api/mess/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: GET_MESS_MENU_SUCCESS,\r\n            payload: data\r\n        })\r\n        localStorage.setItem('messMenu', JSON.stringify(data))\r\n\r\n    } catch (error:any) {\r\n        dispatch({\r\n            type: GET_MESS_MENU_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport const updateMessMenu = (day: any, messMenu: any) => async (dispatch: any) => {\r\n    try {\r\n        dispatch({\r\n            type: UPDATE_MESS_MENU_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                // 'Authorization': `JWT ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(`/api/mess/update/${day}/`,\r\n            messMenu,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: UPDATE_MESS_MENU_SUCCESS,\r\n            payload: data\r\n        })\r\n    }\r\n\r\n\r\n    catch (error:any) {\r\n        dispatch({\r\n            type: UPDATE_MESS_MENU_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n\r\n}\r\n\r\n","F:\\mess-manager\\frontend\\src\\components\\ConvertToWeekDay.tsx",[],[],"F:\\mess-manager\\frontend\\src\\constants\\user_constants.ts",[],[],"F:\\mess-manager\\frontend\\src\\actions\\attendance_actions.ts",[],[],"F:\\mess-manager\\frontend\\src\\actions\\expenses_actions.ts",[],[],"F:\\mess-manager\\frontend\\src\\components\\counter.ts",[],[],"F:\\mess-manager\\frontend\\src\\components\\Downloader.tsx",[],[],"F:\\mess-manager\\frontend\\src\\components\\ConvertToMonth.tsx",[],[],"F:\\mess-manager\\frontend\\src\\Screens\\admin\\attendances\\DailyAttendance.tsx",["288","289","290","291","292","293","294","295"],[],"// @ts-expect-error TS(6142): Module './AttendanceSheet' was resolved to 'F:/mes... Remove this comment to see the full error message\r\nimport AttendanceSheet from './AttendanceSheet'\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getAttendance } from \"../../../actions/attendance_actions\"\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport { listUsers } from \"../../../actions/user_actions\";\r\n\r\n\r\n\r\n\r\nfunction DailyAttendance({\r\n    month,\r\n    filteredMonthlyAttendance\r\n}: any) {\r\n    const attendance = filteredMonthlyAttendance;\r\n    const dailyDateList = attendance?.map((item: any) => Number((item.date).split(\"-\")[2])) //[06,06,06]\r\n    const dailyDateSet = [...new Set(dailyDateList)]\r\n\r\n\r\n    const filteredAttendance = (number: any) => attendance.filter((item: any) => Number((item.date).split(\"-\")[2]) === number)\r\n\r\n\r\n    return (\r\n        <div>\r\n            {dailyDateSet.map(item => (\r\n                <>\r\n                    <AttendanceSheet month={month} day={item} filteredAttendance={filteredAttendance(item)} />\r\n                </>\r\n            ))\r\n\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DailyAttendance\r\n","F:\\mess-manager\\frontend\\src\\constants\\mess_constants.ts",[],[],"F:\\mess-manager\\frontend\\src\\constants\\attendance_constants.ts",[],[],"F:\\mess-manager\\frontend\\src\\constants\\expenses_constants.ts",[],[],"F:\\mess-manager\\frontend\\src\\Screens\\admin\\attendances\\AttendanceSheet.tsx",["296","297","298","299","300","301","302"],[],"// for this month bill\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getAttendance } from \"../../../actions/attendance_actions\"\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport { listUsers } from \"../../../actions/user_actions\";\r\nimport Downloader from \"../../../components/Downloader\";\r\nimport ConvertToMonth from \"../../../components/ConvertToMonth\";\r\n\r\n\r\n\r\nfunction AttendanceSheet({\r\n    month,\r\n    day,\r\n    filteredAttendance\r\n}: any) {\r\n    const attendance = filteredAttendance;\r\n\r\n\r\n    // @ts-expect-error TS(2339): Property 'userList' does not exist on type 'Defaul... Remove this comment to see the full error message\r\n    const { users } = useSelector(state => state.userList)\r\n\r\n\r\n    function IdToStudent({\r\n        id\r\n    }: any) {\r\n        const name = users?.find((user: any) => user.id === id).username\r\n        return <div>{name}</div>\r\n    }\r\n\r\n    return (\r\n\r\n        <div  >\r\n\r\n\r\n            <Downloader htmlInputId={`attendance-${day}`} name={\"Attendance-Sheet\"} />\r\n\r\n            <div id={`attendance-${day}`}>\r\n\r\n\r\n\r\n\r\n\r\n                <div className=\"h5 text-start\">\r\n                    {/* {`${month}-${day}`} */}\r\n\r\n                    <ConvertToMonth number={month} /> - {day}\r\n                </div>\r\n\r\n\r\n                <table className=\"table table-striped\">\r\n\r\n                    <thead>\r\n\r\n                        <tr>\r\n\r\n                            <th scope=\"col\">#</th>\r\n\r\n                            <th scope=\"col\">Students</th>\r\n\r\n                            <th scope=\"col\">First Time</th>\r\n\r\n                            <th scope=\"col\">Second Time</th>\r\n                        </tr>\r\n                    </thead>\r\n\r\n                    {attendance?.map((item: any) => <tbody  >\r\n\r\n                        <tr>\r\n\r\n                            <th key={item.id} scope=\"row\">{item.id}</th>\r\n\r\n                            <td><IdToStudent id={(item.student)} /></td>\r\n\r\n                            <td>{item.first_time}</td>\r\n\r\n                            <td>{item.second_time}</td>\r\n                        </tr>\r\n                    </tbody>)}\r\n                </table>\r\n            </div>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default AttendanceSheet;\r\n","F:\\mess-manager\\frontend\\src\\app\\hooks.ts",[],[],{"ruleId":"303","severity":1,"message":"304","line":3,"column":10,"nodeType":"305","messageId":"306","endLine":3,"endColumn":28},{"ruleId":"303","severity":1,"message":"307","line":3,"column":42,"nodeType":"305","messageId":"306","endLine":3,"endColumn":55},{"ruleId":"303","severity":1,"message":"308","line":4,"column":10,"nodeType":"305","messageId":"306","endLine":4,"endColumn":21},{"ruleId":"303","severity":1,"message":"309","line":4,"column":23,"nodeType":"305","messageId":"306","endLine":4,"endColumn":34},{"ruleId":"303","severity":1,"message":"310","line":5,"column":10,"nodeType":"305","messageId":"306","endLine":5,"endColumn":14},{"ruleId":"303","severity":1,"message":"309","line":2,"column":10,"nodeType":"305","messageId":"306","endLine":2,"endColumn":21},{"ruleId":"311","severity":1,"message":"312","line":20,"column":6,"nodeType":"313","endLine":20,"endColumn":8,"suggestions":"314"},{"ruleId":"303","severity":1,"message":"315","line":23,"column":10,"nodeType":"305","messageId":"306","endLine":23,"endColumn":14},{"ruleId":"303","severity":1,"message":"316","line":23,"column":16,"nodeType":"305","messageId":"306","endLine":23,"endColumn":23},{"ruleId":"303","severity":1,"message":"317","line":29,"column":18,"nodeType":"305","messageId":"306","endLine":29,"endColumn":25},{"ruleId":"318","severity":1,"message":"319","line":71,"column":15,"nodeType":"320","endLine":71,"endColumn":58},{"ruleId":"321","severity":1,"message":"322","line":72,"column":17,"nodeType":"320","endLine":76,"endColumn":19},{"ruleId":"318","severity":1,"message":"319","line":96,"column":15,"nodeType":"320","endLine":96,"endColumn":58},{"ruleId":"321","severity":1,"message":"322","line":97,"column":17,"nodeType":"320","endLine":101,"endColumn":19},{"ruleId":"323","severity":1,"message":"324","line":163,"column":21,"nodeType":"325","endLine":163,"endColumn":32},{"ruleId":"303","severity":1,"message":"310","line":2,"column":10,"nodeType":"305","messageId":"306","endLine":2,"endColumn":14},{"ruleId":"303","severity":1,"message":"326","line":15,"column":11,"nodeType":"305","messageId":"306","endLine":15,"endColumn":19},{"ruleId":"303","severity":1,"message":"327","line":30,"column":11,"nodeType":"305","messageId":"306","endLine":30,"endColumn":19},{"ruleId":"303","severity":1,"message":"328","line":34,"column":29,"nodeType":"305","messageId":"306","endLine":34,"endColumn":37},{"ruleId":"303","severity":1,"message":"329","line":3,"column":17,"nodeType":"305","messageId":"306","endLine":3,"endColumn":25},{"ruleId":"303","severity":1,"message":"330","line":8,"column":16,"nodeType":"305","messageId":"306","endLine":8,"endColumn":27},{"ruleId":"303","severity":1,"message":"310","line":3,"column":10,"nodeType":"305","messageId":"306","endLine":3,"endColumn":14},{"ruleId":"303","severity":1,"message":"331","line":3,"column":16,"nodeType":"305","messageId":"306","endLine":3,"endColumn":27},{"ruleId":"303","severity":1,"message":"332","line":4,"column":10,"nodeType":"305","messageId":"306","endLine":4,"endColumn":17},{"ruleId":"303","severity":1,"message":"333","line":8,"column":8,"nodeType":"305","messageId":"306","endLine":8,"endColumn":15},{"ruleId":"311","severity":1,"message":"334","line":20,"column":6,"nodeType":"313","endLine":20,"endColumn":18,"suggestions":"335"},{"ruleId":"336","severity":1,"message":"337","line":20,"column":7,"nodeType":"305","messageId":"338","endLine":20,"endColumn":11},{"ruleId":"336","severity":1,"message":"339","line":20,"column":13,"nodeType":"305","messageId":"338","endLine":20,"endColumn":17},{"ruleId":"303","severity":1,"message":"310","line":3,"column":10,"nodeType":"305","messageId":"306","endLine":3,"endColumn":14},{"ruleId":"303","severity":1,"message":"340","line":10,"column":8,"nodeType":"305","messageId":"306","endLine":10,"endColumn":14},{"ruleId":"303","severity":1,"message":"326","line":15,"column":11,"nodeType":"305","messageId":"306","endLine":15,"endColumn":19},{"ruleId":"311","severity":1,"message":"334","line":29,"column":8,"nodeType":"313","endLine":29,"endColumn":64,"suggestions":"341"},{"ruleId":"336","severity":1,"message":"337","line":29,"column":9,"nodeType":"305","messageId":"338","endLine":29,"endColumn":13},{"ruleId":"336","severity":1,"message":"342","line":29,"column":15,"nodeType":"305","messageId":"338","endLine":29,"endColumn":31},{"ruleId":"336","severity":1,"message":"343","line":29,"column":33,"nodeType":"305","messageId":"338","endLine":29,"endColumn":46},{"ruleId":"336","severity":1,"message":"344","line":29,"column":48,"nodeType":"305","messageId":"338","endLine":29,"endColumn":63},{"ruleId":"303","severity":1,"message":"345","line":33,"column":50,"nodeType":"305","messageId":"306","endLine":33,"endColumn":68},{"ruleId":"303","severity":1,"message":"346","line":33,"column":79,"nodeType":"305","messageId":"306","endLine":33,"endColumn":99},{"ruleId":"303","severity":1,"message":"333","line":4,"column":8,"nodeType":"305","messageId":"306","endLine":4,"endColumn":15},{"ruleId":"303","severity":1,"message":"347","line":5,"column":8,"nodeType":"305","messageId":"306","endLine":5,"endColumn":22},{"ruleId":"311","severity":1,"message":"312","line":21,"column":12,"nodeType":"313","endLine":21,"endColumn":36,"suggestions":"348"},{"ruleId":"336","severity":1,"message":"337","line":21,"column":13,"nodeType":"305","messageId":"338","endLine":21,"endColumn":17},{"ruleId":"336","severity":1,"message":"349","line":21,"column":19,"nodeType":"305","messageId":"338","endLine":21,"endColumn":35},{"ruleId":"303","severity":1,"message":"350","line":25,"column":40,"nodeType":"305","messageId":"306","endLine":25,"endColumn":47},{"ruleId":"323","severity":1,"message":"324","line":120,"column":37,"nodeType":"325","endLine":120,"endColumn":48},{"ruleId":"303","severity":1,"message":"310","line":3,"column":10,"nodeType":"305","messageId":"306","endLine":3,"endColumn":14},{"ruleId":"303","severity":1,"message":"331","line":3,"column":16,"nodeType":"305","messageId":"306","endLine":3,"endColumn":27},{"ruleId":"303","severity":1,"message":"332","line":4,"column":10,"nodeType":"305","messageId":"306","endLine":4,"endColumn":17},{"ruleId":"303","severity":1,"message":"333","line":8,"column":8,"nodeType":"305","messageId":"306","endLine":8,"endColumn":15},{"ruleId":"303","severity":1,"message":"351","line":13,"column":10,"nodeType":"305","messageId":"306","endLine":13,"endColumn":17},{"ruleId":"303","severity":1,"message":"352","line":19,"column":9,"nodeType":"305","messageId":"306","endLine":19,"endColumn":14},{"ruleId":"311","severity":1,"message":"334","line":25,"column":8,"nodeType":"313","endLine":25,"endColumn":20,"suggestions":"353"},{"ruleId":"336","severity":1,"message":"337","line":25,"column":9,"nodeType":"305","messageId":"338","endLine":25,"endColumn":13},{"ruleId":"336","severity":1,"message":"339","line":25,"column":15,"nodeType":"305","messageId":"338","endLine":25,"endColumn":19},{"ruleId":"303","severity":1,"message":"354","line":34,"column":12,"nodeType":"305","messageId":"306","endLine":34,"endColumn":21},{"ruleId":"303","severity":1,"message":"355","line":34,"column":23,"nodeType":"305","messageId":"306","endLine":34,"endColumn":35},{"ruleId":"303","severity":1,"message":"354","line":61,"column":13,"nodeType":"305","messageId":"306","endLine":61,"endColumn":22},{"ruleId":"303","severity":1,"message":"356","line":1,"column":8,"nodeType":"305","messageId":"306","endLine":1,"endColumn":23},{"ruleId":"303","severity":1,"message":"329","line":2,"column":17,"nodeType":"305","messageId":"306","endLine":2,"endColumn":25},{"ruleId":"303","severity":1,"message":"357","line":2,"column":38,"nodeType":"305","messageId":"306","endLine":2,"endColumn":44},{"ruleId":"303","severity":1,"message":"358","line":20,"column":25,"nodeType":"305","messageId":"306","endLine":20,"endColumn":30},{"ruleId":"303","severity":1,"message":"317","line":20,"column":32,"nodeType":"305","messageId":"306","endLine":20,"endColumn":39},{"ruleId":"303","severity":1,"message":"359","line":22,"column":13,"nodeType":"305","messageId":"306","endLine":22,"endColumn":18},{"ruleId":"303","severity":1,"message":"360","line":2,"column":10,"nodeType":"305","messageId":"306","endLine":2,"endColumn":16},{"ruleId":"303","severity":1,"message":"361","line":7,"column":8,"nodeType":"305","messageId":"306","endLine":7,"endColumn":19},{"ruleId":"303","severity":1,"message":"362","line":8,"column":8,"nodeType":"305","messageId":"306","endLine":8,"endColumn":13},{"ruleId":"311","severity":1,"message":"363","line":23,"column":6,"nodeType":"313","endLine":23,"endColumn":29,"suggestions":"364"},{"ruleId":"303","severity":1,"message":"365","line":29,"column":10,"nodeType":"305","messageId":"306","endLine":29,"endColumn":18},{"ruleId":"303","severity":1,"message":"366","line":29,"column":20,"nodeType":"305","messageId":"306","endLine":29,"endColumn":31},{"ruleId":"318","severity":1,"message":"319","line":100,"column":29,"nodeType":"320","endLine":100,"endColumn":41},{"ruleId":"303","severity":1,"message":"367","line":2,"column":8,"nodeType":"305","messageId":"306","endLine":2,"endColumn":14},{"ruleId":"303","severity":1,"message":"368","line":3,"column":21,"nodeType":"305","messageId":"306","endLine":3,"endColumn":31},{"ruleId":"303","severity":1,"message":"357","line":4,"column":38,"nodeType":"305","messageId":"306","endLine":4,"endColumn":44},{"ruleId":"303","severity":1,"message":"310","line":9,"column":10,"nodeType":"305","messageId":"306","endLine":9,"endColumn":14},{"ruleId":"303","severity":1,"message":"330","line":9,"column":16,"nodeType":"305","messageId":"306","endLine":9,"endColumn":27},{"ruleId":"303","severity":1,"message":"369","line":31,"column":20,"nodeType":"305","messageId":"306","endLine":31,"endColumn":37},{"ruleId":"303","severity":1,"message":"370","line":31,"column":46,"nodeType":"305","messageId":"306","endLine":31,"endColumn":61},{"ruleId":"303","severity":1,"message":"371","line":31,"column":72,"nodeType":"305","messageId":"306","endLine":31,"endColumn":89},{"ruleId":"303","severity":1,"message":"345","line":34,"column":48,"nodeType":"305","messageId":"306","endLine":34,"endColumn":66},{"ruleId":"303","severity":1,"message":"346","line":34,"column":77,"nodeType":"305","messageId":"306","endLine":34,"endColumn":97},{"ruleId":"311","severity":1,"message":"363","line":23,"column":8,"nodeType":"313","endLine":23,"endColumn":31,"suggestions":"372"},{"ruleId":"318","severity":1,"message":"319","line":107,"column":57,"nodeType":"320","endLine":107,"endColumn":69},{"ruleId":"303","severity":1,"message":"373","line":43,"column":5,"nodeType":"305","messageId":"306","endLine":43,"endColumn":27},{"ruleId":"303","severity":1,"message":"374","line":9,"column":5,"nodeType":"305","messageId":"306","endLine":9,"endColumn":27},{"ruleId":"303","severity":1,"message":"329","line":3,"column":17,"nodeType":"305","messageId":"306","endLine":3,"endColumn":25},{"ruleId":"303","severity":1,"message":"375","line":3,"column":27,"nodeType":"305","messageId":"306","endLine":3,"endColumn":36},{"ruleId":"303","severity":1,"message":"357","line":3,"column":38,"nodeType":"305","messageId":"306","endLine":3,"endColumn":44},{"ruleId":"303","severity":1,"message":"309","line":4,"column":10,"nodeType":"305","messageId":"306","endLine":4,"endColumn":21},{"ruleId":"303","severity":1,"message":"308","line":4,"column":23,"nodeType":"305","messageId":"306","endLine":4,"endColumn":34},{"ruleId":"303","severity":1,"message":"376","line":5,"column":10,"nodeType":"305","messageId":"306","endLine":5,"endColumn":23},{"ruleId":"303","severity":1,"message":"331","line":6,"column":10,"nodeType":"305","messageId":"306","endLine":6,"endColumn":21},{"ruleId":"303","severity":1,"message":"377","line":7,"column":10,"nodeType":"305","messageId":"306","endLine":7,"endColumn":19},{"ruleId":"303","severity":1,"message":"329","line":2,"column":17,"nodeType":"305","messageId":"306","endLine":2,"endColumn":25},{"ruleId":"303","severity":1,"message":"375","line":2,"column":27,"nodeType":"305","messageId":"306","endLine":2,"endColumn":36},{"ruleId":"303","severity":1,"message":"357","line":2,"column":38,"nodeType":"305","messageId":"306","endLine":2,"endColumn":44},{"ruleId":"303","severity":1,"message":"308","line":3,"column":23,"nodeType":"305","messageId":"306","endLine":3,"endColumn":34},{"ruleId":"303","severity":1,"message":"376","line":4,"column":10,"nodeType":"305","messageId":"306","endLine":4,"endColumn":23},{"ruleId":"303","severity":1,"message":"331","line":5,"column":10,"nodeType":"305","messageId":"306","endLine":5,"endColumn":21},{"ruleId":"303","severity":1,"message":"377","line":6,"column":10,"nodeType":"305","messageId":"306","endLine":6,"endColumn":19},"@typescript-eslint/no-unused-vars","'bindActionCreators' is defined but never used.","Identifier","unusedVar","'PayloadAction' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'today'. Either include them or remove the dependency array.","ArrayExpression",["378"],"'date' is assigned a value but never used.","'setDate' is assigned a value but never used.","'loading' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","jsx-a11y/scope","The scope prop can only be used on <th> elements.","JSXAttribute","'navigate' is assigned a value but never used.","'redirect' is assigned a value but never used.","'userInfo' is assigned a value but never used.","'useState' is defined but never used.","'useLocation' is defined but never used.","'useNavigate' is defined but never used.","'counter' is defined but never used.","'Message' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["379"],"@typescript-eslint/no-use-before-define","'date' was used before it was defined.","noUseBeforeDefine","'bill' was used before it was defined.","'Loader' is defined but never used.",["380"],"'getAttendanceObj' was used before it was defined.","'errorExpenses' was used before it was defined.","'successExpenses' was used before it was defined.","'getAttendanceError' is assigned a value but never used.","'getAttendanceLoading' is assigned a value but never used.","'ConvertToMonth' is defined but never used.",["381"],"'expensesPerMonth' was used before it was defined.","'success' is assigned a value but never used.","'addBill' is defined but never used.","'myRef' is assigned a value but never used.",["382"],"'billPayed' is assigned a value but never used.","'setBillPayed' is assigned a value but never used.","'AttendanceSheet' is defined but never used.","'useRef' is defined but never used.","'error' is assigned a value but never used.","'users' is assigned a value but never used.","'saveAs' is defined but never used.","'html2canvas' is defined but never used.","'jsPDF' is defined but never used.","React Hook useEffect has an unnecessary dependency: 'useSelector'. Either exclude it or remove the dependency array. Outer scope values like 'useSelector' aren't valid dependencies because mutating them doesn't re-render the component.",["383"],"'editMenu' is assigned a value but never used.","'setEditMenu' is assigned a value but never used.","'Button' is defined but never used.","'deleteUser' is defined but never used.","'attendanceSuccess' is assigned a value but never used.","'attendanceError' is assigned a value but never used.","'attendanceLoading' is assigned a value but never used.",["384"],"'USERS_ATTENDANCE_RESET' is defined but never used.","'UPDATE_MESS_MENU_RESET' is defined but never used.","'useEffect' is defined but never used.","'getAttendance' is defined but never used.","'listUsers' is defined but never used.",{"desc":"385","fix":"386"},{"desc":"387","fix":"388"},{"desc":"389","fix":"390"},{"desc":"391","fix":"392"},{"desc":"387","fix":"393"},{"desc":"394","fix":"395"},{"desc":"394","fix":"396"},"Update the dependencies array to be: [dispatch, today]",{"range":"397","text":"398"},"Update the dependencies array to be: [date, bill, dispatch]",{"range":"399","text":"400"},"Update the dependencies array to be: [date, getAttendanceObj, errorExpenses, successExpenses, dispatch]",{"range":"401","text":"402"},"Update the dependencies array to be: [date, dispatch, expensesPerMonth, today]",{"range":"403","text":"404"},{"range":"405","text":"400"},"Update the dependencies array to be: [dispatch]",{"range":"406","text":"407"},{"range":"408","text":"407"},[874,876],"[dispatch, today]",[888,900],"[date, bill, dispatch]",[1132,1188],"[date, getAttendanceObj, errorExpenses, successExpenses, dispatch]",[867,891],"[date, dispatch, expensesPerMonth, today]",[1005,1017],[633,656],"[dispatch]",[648,671]]