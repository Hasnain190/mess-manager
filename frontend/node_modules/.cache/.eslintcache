[{"F:\\mess-manager\\frontend\\src\\index.tsx":"1","F:\\mess-manager\\frontend\\src\\app\\store.ts":"2","F:\\mess-manager\\frontend\\src\\App.tsx":"3","F:\\mess-manager\\frontend\\src\\reportWebVitals.ts":"4","F:\\mess-manager\\frontend\\src\\features\\user\\user_slice.ts":"5","F:\\mess-manager\\frontend\\src\\Screens\\Home.tsx":"6","F:\\mess-manager\\frontend\\src\\Screens\\login.tsx":"7","F:\\mess-manager\\frontend\\src\\components\\Navbar.tsx":"8","F:\\mess-manager\\frontend\\src\\Screens\\normal\\dashboard.tsx":"9","F:\\mess-manager\\frontend\\src\\Screens\\admin\\users\\EditUser.tsx":"10","F:\\mess-manager\\frontend\\src\\Screens\\admin\\users\\AddUsers.tsx":"11","F:\\mess-manager\\frontend\\src\\Screens\\admin\\users\\ViewUsers.tsx":"12","F:\\mess-manager\\frontend\\src\\Screens\\admin\\expenses\\ThisMonthBill.tsx":"13","F:\\mess-manager\\frontend\\src\\Screens\\admin\\expenses\\TodayExpenses.tsx":"14","F:\\mess-manager\\frontend\\src\\Screens\\admin\\expenses\\MonthlyExpenses.tsx":"15","F:\\mess-manager\\frontend\\src\\Screens\\admin\\expenses\\BillForm.tsx":"16","F:\\mess-manager\\frontend\\src\\Screens\\admin\\attendances\\MonthlyAttendance.tsx":"17","F:\\mess-manager\\frontend\\src\\Screens\\admin\\mess\\ViewMess.tsx":"18","F:\\mess-manager\\frontend\\src\\Screens\\admin\\attendances\\markAttendance.tsx":"19","F:\\mess-manager\\frontend\\src\\Screens\\admin\\mess\\UpdateMess.tsx":"20","F:\\mess-manager\\frontend\\src\\components\\Loader.tsx":"21","F:\\mess-manager\\frontend\\src\\components\\Message.tsx":"22","F:\\mess-manager\\frontend\\src\\components\\ConvertToWeekDay.tsx":"23","F:\\mess-manager\\frontend\\src\\components\\counter.ts":"24","F:\\mess-manager\\frontend\\src\\components\\Downloader.tsx":"25","F:\\mess-manager\\frontend\\src\\components\\ConvertToMonth.tsx":"26","F:\\mess-manager\\frontend\\src\\Screens\\admin\\attendances\\DailyAttendance.tsx":"27","F:\\mess-manager\\frontend\\src\\Screens\\admin\\attendances\\AttendanceSheet.tsx":"28","F:\\mess-manager\\frontend\\src\\app\\hooks.ts":"29","F:\\mess-manager\\frontend\\src\\features\\mess\\mess_slice.ts":"30","F:\\mess-manager\\frontend\\src\\features\\attendance\\attendance_slice.ts":"31","F:\\mess-manager\\frontend\\src\\features\\expenses\\expenses_slice.ts":"32","F:\\mess-manager\\frontend\\src\\features\\user\\user_actions_creators.ts":"33","F:\\mess-manager\\frontend\\src\\features\\mess\\mess_actions_creators.ts":"34","F:\\mess-manager\\frontend\\src\\features\\expenses\\expenses_actions_creators.ts":"35","F:\\mess-manager\\frontend\\src\\features\\attendance\\attendance_actions_creators.ts":"36","F:\\mess-manager\\frontend\\src\\components\\IdToStudent.tsx":"37","F:\\mess-manager\\frontend\\src\\components\\Today.tsx":"38","F:\\mess-manager\\frontend\\src\\components\\Date.tsx":"39","F:\\mess-manager\\frontend\\src\\Screens\\normal\\Dashboard.tsx":"40"},{"size":658,"mtime":1674596616355,"results":"41","hashOfConfig":"42"},{"size":1910,"mtime":1675092306840,"results":"43","hashOfConfig":"42"},{"size":2348,"mtime":1676568341189,"results":"44","hashOfConfig":"42"},{"size":382,"mtime":1674163964708,"results":"45","hashOfConfig":"42"},{"size":6887,"mtime":1674927602172,"results":"46","hashOfConfig":"42"},{"size":235,"mtime":1674166938796,"results":"47","hashOfConfig":"42"},{"size":3207,"mtime":1674546878211,"results":"48","hashOfConfig":"42"},{"size":5341,"mtime":1685882608024,"results":"49","hashOfConfig":"42"},{"size":4500,"mtime":1675109019926,"results":"50","hashOfConfig":"42"},{"size":7496,"mtime":1675115177461,"results":"51","hashOfConfig":"42"},{"size":6476,"mtime":1675103152603,"results":"52","hashOfConfig":"42"},{"size":2832,"mtime":1675103195294,"results":"53","hashOfConfig":"42"},{"size":2770,"mtime":1686464881735,"results":"54","hashOfConfig":"42"},{"size":7491,"mtime":1685881670991,"results":"55","hashOfConfig":"42"},{"size":5220,"mtime":1686464794503,"results":"56","hashOfConfig":"42"},{"size":4611,"mtime":1675117858680,"results":"57","hashOfConfig":"42"},{"size":1843,"mtime":1675102858803,"results":"58","hashOfConfig":"42"},{"size":2608,"mtime":1686415342072,"results":"59","hashOfConfig":"42"},{"size":6813,"mtime":1686165559410,"results":"60","hashOfConfig":"42"},{"size":4899,"mtime":1675111964013,"results":"61","hashOfConfig":"42"},{"size":329,"mtime":1674169213216,"results":"62","hashOfConfig":"42"},{"size":234,"mtime":1674169232580,"results":"63","hashOfConfig":"42"},{"size":227,"mtime":1674168890891,"results":"64","hashOfConfig":"42"},{"size":612,"mtime":1675101908348,"results":"65","hashOfConfig":"42"},{"size":1290,"mtime":1686415169376,"results":"66","hashOfConfig":"42"},{"size":233,"mtime":1674168885945,"results":"67","hashOfConfig":"42"},{"size":822,"mtime":1674894869260,"results":"68","hashOfConfig":"42"},{"size":1561,"mtime":1686464168809,"results":"69","hashOfConfig":"42"},{"size":413,"mtime":1674255627401,"results":"70","hashOfConfig":"42"},{"size":2634,"mtime":1674548228081,"results":"71","hashOfConfig":"42"},{"size":3159,"mtime":1675101753368,"results":"72","hashOfConfig":"42"},{"size":4547,"mtime":1675093491429,"results":"73","hashOfConfig":"42"},{"size":9113,"mtime":1685561341419,"results":"74","hashOfConfig":"42"},{"size":1801,"mtime":1685561335711,"results":"75","hashOfConfig":"42"},{"size":3805,"mtime":1685561327724,"results":"76","hashOfConfig":"42"},{"size":3776,"mtime":1685878463525,"results":"77","hashOfConfig":"42"},{"size":617,"mtime":1674785657156,"results":"78","hashOfConfig":"42"},{"size":203,"mtime":1674691081324,"results":"79","hashOfConfig":"42"},{"size":4,"mtime":1675104297899,"results":"80","hashOfConfig":"42"},{"size":4500,"mtime":1675109019926,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"86"},"1lcf99c",{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"86"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"86"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"86"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"86"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"86"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"86"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"86"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172"},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"86"},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"86"},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"86"},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","suppressedMessages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},"F:\\mess-manager\\frontend\\src\\index.tsx",["221"],[],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { Provider } from \"react-redux\";\r\n// import store from \"./store\";\r\nimport { store } from \"./app/store\";\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n",[],"F:\\mess-manager\\frontend\\src\\app\\store.ts",["222"],[],"import { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nimport { userLoginSlice, userRegisterSlice, userDetailsSlice, userListSlice, userDeleteSlice, userAttendanceSlice, userUpdateSlice, userUpdateProfileSlice } from \"../features/user/user_slice\";\r\n\r\nimport { messMenuSlice, messMenuUpdateSlice } from \"../features/mess/mess_slice\";\r\n\r\n\r\nimport { postAttendanceSlice, getAttendanceSlice, getMonthlyAttendanceSlice, getDailyAttendanceSlice } from \"../features/attendance/attendance_slice\";\r\nimport { addExpensesSlice, getExpensesPerMonthSlice, getMessBillSlice, postPayingBillSlice } from \"../features/expenses/expenses_slice\";\r\n\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        // user reducers\r\n        userLogin: userLoginSlice.reducer,\r\n        userRegister: userRegisterSlice.reducer,\r\n\r\n        userDetails: userDetailsSlice.reducer,\r\n        userUpdateProfile: userUpdateProfileSlice.reducer,\r\n        userList: userListSlice.reducer,\r\n        userDelete: userDeleteSlice.reducer,\r\n        userUpdate: userUpdateSlice.reducer,\r\n\r\n\r\n\r\n        // userPasswordReset:userPasswordResetReducer,\r\n        // userPasswordResetConfirm:userPasswordResetConfirmReducer,\r\n\r\n        // mess reducers\r\n        messMenu: messMenuSlice.reducer,\r\n        updateMessMenu: messMenuUpdateSlice.reducer,\r\n\r\n        // attendance reducers\r\n        attendance: postAttendanceSlice.reducer,\r\n        getAttendance: getAttendanceSlice.reducer,\r\n        getMonthlyAttendance: getMonthlyAttendanceSlice.reducer,\r\n        getDailyAttendance: getDailyAttendanceSlice.reducer,\r\n\r\n\r\n        addExpenses: addExpensesSlice.reducer,\r\n        getExpensesPerMonth: getExpensesPerMonthSlice.reducer,\r\n\r\n        getMessBill: getMessBillSlice.reducer,\r\n        addBill: postPayingBillSlice.reducer,\r\n    }\r\n\r\n})\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n","F:\\mess-manager\\frontend\\src\\App.tsx",[],[],"F:\\mess-manager\\frontend\\src\\reportWebVitals.ts",[],[],"F:\\mess-manager\\frontend\\src\\features\\user\\user_slice.ts",["223","224","225"],[],"// DUCKS pattern\r\n\r\nimport { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { AxiosError } from \"axios\";\r\ninterface userInfo {\r\n\r\n  refresh: string,\r\n  access: string,\r\n  id: number,\r\n  username: string,\r\n  isAdmin: boolean,\r\n  email: string,\r\n  phone: string,\r\n  room: number,\r\n  hostel: string,\r\n  token: string\r\n}\r\ninterface userLogin {\r\n  error?: string | null | unknown,\r\n  loading?: boolean,\r\n  userInfo?: userInfo | null\r\n}\r\n\r\n\r\n\r\nconst userInfoFromStorage: userInfo | null = localStorage.getItem(\"userInfo\") !== null\r\n  ? JSON.parse(localStorage.getItem(\"userInfo\")!)\r\n  : null;\r\n\r\nexport const userLoginSlice = createSlice({\r\n\r\n  name: 'user-login',\r\n  initialState: {\r\n    loading: false,\r\n    error: null,\r\n    userInfo: userInfoFromStorage,\r\n    success: false,\r\n\r\n  },\r\n\r\n  reducers: {\r\n    // user login pending/request\r\n    loginRequest(state) {\r\n      state.loading = true;\r\n      state.userInfo = null\r\n\r\n    },\r\n    // user login success\r\n    loginSuccess(state, action: PayloadAction<userInfo>) {\r\n      state.loading = false;\r\n      state.userInfo = action.payload;\r\n      state.success = true;\r\n    },\r\n\r\n    // user login failed\r\n    // FIXME: determine the type of error and give its type of action\r\n    loginFail(state, action: PayloadAction<any>) {\r\n      state.loading = false;\r\n      state.error = action.payload\r\n    },\r\n    // user logout\r\n    logoutAction() { }\r\n  }\r\n})\r\n\r\nexport const { loginRequest, loginFail, loginSuccess, logoutAction } = userLoginSlice.actions\r\n\r\n\r\n\r\n\r\nexport const userRegisterSlice = createSlice({\r\n\r\n  name: 'user-register',\r\n  initialState: {\r\n    loading: false,\r\n    success: false,\r\n    userInfo: {},\r\n    error: null\r\n\r\n  },\r\n\r\n  reducers: {\r\n    // user register pending/request\r\n    registerRequest(state) {\r\n      state.loading = true;\r\n    },\r\n    // user register success\r\n    registerSuccess(state, action: PayloadAction<userInfo>) {\r\n      state.loading = false;\r\n      state.success = true;\r\n      state.userInfo = action.payload\r\n    },\r\n\r\n    // user login failed\r\n    registerFail(state, action) {\r\n      state.loading = false;\r\n      state.error = action.payload\r\n    }\r\n\r\n  }\r\n})\r\n\r\nexport const { registerRequest, registerFail, registerSuccess } = userRegisterSlice.actions\r\nconst initialState = {\r\n  user: {\r\n    id: 0,\r\n    username: '',\r\n    email: '',\r\n    room: 0,\r\n    hostel: '',\r\n    phone: '',\r\n    isAdmin: false\r\n  },\r\n  loading: false,\r\n  error: null,\r\n  success: false\r\n\r\n}\r\n// get details for a particular user\r\nexport const userDetailsSlice = createSlice({\r\n  name: 'user-details',\r\n  initialState,\r\n\r\n  reducers: {\r\n\r\n    detailsRequest(state) {\r\n      state.loading = true\r\n    },\r\n\r\n    detailsSuccess(state, action: PayloadAction<userInfo>) {\r\n\r\n      state.loading = false;\r\n      state.user = action.payload;\r\n      state.success = true;\r\n    },\r\n    detailsFail(state, action) { state.loading = false; state.error = action.payload; },\r\n\r\n    detailsReset(state) { state.user = initialState.user }\r\n\r\n  }\r\n})\r\nexport const { detailsRequest, detailsFail, detailsSuccess, detailsReset } = userDetailsSlice.actions\r\n\r\n\r\n// update user profile\r\nexport const userUpdateProfileSlice = createSlice({\r\n  name: 'user-update-profile',\r\n  initialState: {\r\n    userInfo: userInfoFromStorage,\r\n    loading: false,\r\n    error: null,\r\n    success: false\r\n  },\r\n  reducers: {\r\n\r\n    updateProfileRequest(state) {\r\n      state.loading = true\r\n    },\r\n    updateProfileSuccess(state, action: PayloadAction<userInfo>) {\r\n      state.loading = false;\r\n      state.userInfo = action.payload;\r\n      state.success = true;\r\n\r\n    },\r\n    updateProfileFail(state, action) { state.loading = false; state.error = action.payload },\r\n\r\n\r\n\r\n  }\r\n})\r\nexport const { updateProfileRequest, updateProfileFail, updateProfileSuccess } = userUpdateProfileSlice.actions\r\n\r\n// FIXME: i don't know how it works\r\n// delete user\r\nexport const userDeleteSlice = createSlice({\r\n  name: 'user-delete',\r\n  initialState: {\r\n\r\n    loading: false,\r\n    error: null,\r\n    success: false\r\n  },\r\n  reducers: {\r\n    deleteRequest(state) { state.loading = true },\r\n    deleteSuccess(state) { state.loading = false; state.success = true },\r\n    deleteFail(state, action) { state.loading = false; state.error = action.payload },\r\n  }\r\n})\r\nexport const { deleteRequest, deleteFail, deleteSuccess } = userDeleteSlice.actions\r\n\r\n// FIXME: I don't know what it does so i am just writing it as it is\r\n\r\nexport const userUpdateSlice = createSlice({\r\n\r\n  name: 'update',\r\n  initialState: {\r\n    loading: false,\r\n    success: false,\r\n    user: {},\r\n    error: null\r\n\r\n  },\r\n\r\n  reducers: {\r\n    // user update pending/request\r\n    updateRequest(state) {\r\n      state.loading = true;\r\n    },\r\n    // user update success\r\n    updateSuccess(state, action: PayloadAction<userInfo>) {\r\n      state.loading = false;\r\n      state.success = true;\r\n      state.user = action.payload\r\n    },\r\n\r\n    // update failed\r\n    updateFail(state, action) {\r\n      state.loading = false;\r\n      state.error = action.payload\r\n    }\r\n\r\n  }\r\n})\r\n\r\nexport const { updateRequest, updateSuccess, updateFail } = userUpdateSlice.actions\r\n\r\n\r\n// get the attendance of user\r\n\r\nexport const userAttendanceSlice = createSlice({\r\n\r\n  name: 'user-attendance',\r\n  initialState: {\r\n    loading: false,\r\n    success: false,\r\n\r\n    error: null\r\n\r\n  },\r\n\r\n  reducers: {\r\n    // user userAttendance pending/request\r\n    attendanceRequest(state) {\r\n      state.loading = true;\r\n    },\r\n    // user userAttendance success\r\n    attendanceSuccess(state) {\r\n      state.loading = false;\r\n\r\n      state.success = true;\r\n    },\r\n\r\n    //  failed\r\n    attendanceFail(state, action) {\r\n      state.loading = false;\r\n      state.error = action.payload\r\n    }\r\n\r\n  }\r\n})\r\n\r\nexport const { attendanceRequest, attendanceFail, attendanceSuccess } = userAttendanceSlice.actions\r\n\r\n\r\n\r\n// get list of user \r\nexport const userListSlice = createSlice({\r\n\r\n  name: 'user-list',\r\n  initialState: {\r\n    loading: false,\r\n    success: false,\r\n    users: [\r\n\r\n\r\n      {\r\n        id: 0,\r\n        username: '',\r\n        email: '',\r\n        room: 0,\r\n        hostel: '',\r\n        phone: '',\r\n        isAdmin: false\r\n      },\r\n\r\n    ],\r\n    error: null\r\n\r\n  },\r\n\r\n  reducers: {\r\n    // user list pending/request\r\n    listRequest(state) {\r\n      state.loading = true;\r\n    },\r\n    // user List success\r\n    listSuccess(state, action) {\r\n      state.loading = false;\r\n      state.success = true;\r\n      state.users = action.payload\r\n    },\r\n\r\n    // usList failed\r\n    listFail(state, action) {\r\n      state.loading = false;\r\n      state.error = action.payload\r\n    },\r\n    // usList failed\r\n    listReset(state) {\r\n\r\n      state.users = []\r\n    }\r\n  }\r\n})\r\n\r\nexport const { listRequest, listFail, listSuccess, listReset } = userListSlice.actions\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","F:\\mess-manager\\frontend\\src\\Screens\\Home.tsx",[],[],"F:\\mess-manager\\frontend\\src\\Screens\\login.tsx",["226"],[],"import React, { useState, useEffect } from \"react\";\r\nimport './login.css'\r\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\r\n\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { login } from \"../features/user/user_actions_creators\";\r\n\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../app/hooks\";\r\n\r\nfunction Login() {\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const location = useLocation()\r\n    const navigate = useNavigate()\r\n\r\n    const redirect = location.search ? location.search.split('=')[1] : '/dashboard'\r\n\r\n    const userLogin = useAppSelector(state => state.userLogin)\r\n    const { error, loading, userInfo } = userLogin\r\n\r\n    useEffect(() => {\r\n\r\n        // if (userInfo && userInfo !== []) {\r\n        if (userInfo) {\r\n            navigate(redirect)\r\n\r\n        }\r\n    }, [navigate, userInfo, redirect])\r\n\r\n    const submitHandler = (e: any) => {\r\n        e.preventDefault()\r\n        dispatch(login(username, password))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6 mx-auto\">\r\n                    <div className=\"card card-body\">\r\n                        <h3 className=\"text-center mb-4\">\r\n                            <i className=\"fas fa-user-plus\"></i> Login</h3>\r\n                        {error! && <Message variant='danger'>There is some error here</Message>}\r\n                        {loading && <Loader />}\r\n\r\n                        <form onSubmit={submitHandler}>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"username\">User Name</label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    id=\"username\"\r\n                                    placeholder=\"Enter username\"\r\n                                    value={username}\r\n                                    onChange={(e) => setUsername(e.target.value)}\r\n\r\n\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"password\">Password</label>\r\n                                <input\r\n                                    type=\"password\"\r\n                                    className=\"form-control\"\r\n                                    id=\"password\"\r\n                                    placeholder=\"Enter Password\"\r\n                                    value={password}\r\n                                    onChange={(e) => setPassword(e.target.value)}\r\n\r\n\r\n                                />\r\n                            </div>\r\n\r\n                            <button type=\"submit\" className=\"btn btn-primary btn-block\">\r\n                                login</button>\r\n                        </form>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Login\r\n","F:\\mess-manager\\frontend\\src\\components\\Navbar.tsx",["227","228"],[],"// make a react component for navbar\r\nimport { useSelector } from \"react-redux\";\r\nimport React, { useEffect } from \"react\";\r\nimport \"./navbar.css\";\r\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\r\nimport { useAppDispatch, useAppSelector } from '../app/hooks'\r\n\r\n\r\nimport { logout } from \"../features/user/user_actions_creators\";\r\nfunction Navbar() {\r\n\r\n  const { userInfo } = useAppSelector((state) => state.userLogin);\r\n  const navigate = useNavigate()\r\n  const location = useLocation()\r\n  const currentPath = location.pathname;\r\n\r\n  const dispatch = useAppDispatch();\r\n  const logoutHandler = () => {\r\n    dispatch(logout());\r\n    navigate('/')\r\n    window.location.reload()\r\n    // navigate()\r\n\r\n  }\r\n\r\n\r\n  return (\r\n\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n\r\n      <Link className=\"navbar-brand\" to=\"/\">\r\n        Mess Manager\r\n      </Link>\r\n\r\n      <button\r\n        className=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#navbarNav\"\r\n        aria-controls=\"navbarNav\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\"\r\n      >\r\n\r\n        <span className=\"navbar-toggler-icon\" />\r\n      </button>\r\n\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n\r\n        <ul className=\"navbar-nav\">\r\n\r\n          {!userInfo && (\r\n\r\n\r\n            <li className=\"nav-item\">\r\n\r\n              <Link className=\"nav-link\" to=\"/login\">\r\n                Login\r\n              </Link>\r\n\r\n            </li>\r\n          )\r\n\r\n          }\r\n\r\n          {userInfo && userInfo.id !== 0 && (\r\n\r\n            <>\r\n\r\n              <li className=\"nav-item\">\r\n\r\n                <button className=\"btn btn-danger\" onClick={logoutHandler}>Logout</button>\r\n              </li>\r\n\r\n\r\n              <li className=\"nav-item\">\r\n\r\n                <Link className=\"nav-link\" to=\"/dashboard\">\r\n                  Your Dash Board\r\n                </Link>\r\n              </li>\r\n\r\n              <Link className=\"dropdown-item\" to=\"/admin/view-mess\">\r\n                View Mess\r\n              </Link>\r\n            </>\r\n          )}\r\n\r\n          {userInfo && userInfo.isAdmin && (\r\n\r\n            <>\r\n              {/* make a drop down menu */}\r\n\r\n              <div className=\"dropdown\">\r\n\r\n                <button\r\n                  className=\"btn btn-secondary dropdown-toggle\"\r\n                  type=\"button\"\r\n                  id=\"dropdownMenuButton\"\r\n                  data-toggle=\"dropdown\"\r\n                  aria-haspopup=\"true\"\r\n                  aria-expanded=\"false\"\r\n                >\r\n                  Admin\r\n                </button>\r\n\r\n                <div className=\"dropdown-menu \" aria-labelledby=\"dropdownMenuButton\">\r\n\r\n                  <Link\r\n                    className={`dropdown-item ${currentPath === '/admin/add-user' ? 'active' : ''}`}\r\n                    to=\"/admin/add-user\"\r\n                  >\r\n                    Add User\r\n                  </Link>\r\n\r\n\r\n                  <Link className={`dropdown-item ${currentPath === '/admin/view-users' ? 'active' : ''}`} to=\"/admin/view-users\">\r\n                    View Users\r\n                  </Link>\r\n\r\n\r\n                  <div className=\"dropdown-divider\"></div>\r\n\r\n\r\n                  <Link className={`dropdown-item ${currentPath === '/admin/view-mess' ? 'active' : ''}`} to=\"/admin/view-mess\">\r\n                    View Mess\r\n                  </Link>\r\n\r\n\r\n                  <Link className={`dropdown-item ${currentPath === '/admin/mark-attendance' ? 'active' : ''}`} to=\"/admin/mark-attendance\">\r\n                    Mark Attendance\r\n                  </Link>\r\n\r\n                  <div className=\"dropdown-divider\"></div>\r\n\r\n\r\n                  <Link\r\n                    className={`dropdown-item ${currentPath === '/admin/monthly-attendance' ? 'active' : ''}`}\r\n                    to=\"/admin/monthly-attendance\"\r\n                  >\r\n                    See Monthly Attendances\r\n                  </Link>\r\n\r\n                  <div className=\"dropdown-divider\"></div>\r\n\r\n                  <Link\r\n                    className={`dropdown-item ${currentPath === '/admin/expenses/today' ? 'active' : ''}`}\r\n                    to=\"/admin/expenses/today\"\r\n                  >\r\n                    Today's Expenses\r\n                  </Link>\r\n                  <Link\r\n                    className={`dropdown-item ${currentPath === '/admin/expenses/monthly' ? 'active' : ''}`}\r\n                    to=\"/admin/expenses/monthly\"\r\n                  >\r\n                    Expenses By Month\r\n                  </Link>\r\n                  <Link\r\n                    className={`dropdown-item ${currentPath === '/admin/bill-of-month' ? 'active' : ''}`}\r\n                    to=\"/admin/bill-of-month\"\r\n                  >\r\n                    This Month's Bill\r\n                  </Link>\r\n\r\n                  <div className=\"dropdown-divider\"></div>\r\n\r\n                  <Link\r\n                    className={`dropdown-item ${currentPath === '/admin/expenses/bill-form/' ? 'active' : ''}`}\r\n                    to=\"/admin/expenses/bill-form/\"\r\n                  >\r\n                    Bill Form\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n\r\n            </>\r\n          )}\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","F:\\mess-manager\\frontend\\src\\Screens\\normal\\dashboard.tsx",["229","230","231","232","233","234","235"],[],"\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"./dashboard-cards.css\";\r\n\r\nimport { getMessMenu } from '../../features/mess/mess_actions_creators'\r\nimport Loader from \"../../components/Loader\";\r\nimport Message from \"../../components/Message\";\r\nimport ConvertToWeekDay from \"../../components/ConvertToWeekDay\"\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\n\r\n\r\nfunction Dashboard() {\r\n  const dispatch = useAppDispatch();\r\n  const today = new Date().toISOString().slice(0, 7); //2023-01-23\r\n\r\n\r\n  const [dateState, setDateState] = useState(new Date());\r\n\r\n\r\n\r\n  const { messMenu, loading: loadingMessMenu, error: errorMessMenu } = useAppSelector((state) => state.messMenu);\r\n  const userLogin = useAppSelector((state) => state.userLogin);\r\n  const { error, loading, userInfo } = userLogin;\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const [todaysMess] = messMenu.filter((item: any) => item.day === Intl.DateTimeFormat('en', { weekday: 'long' }).format(new Date(`${today}`)))\r\n  // e.g. it item.day === \"sunday\" \r\n\r\n  useEffect(() => {\r\n    setInterval(() => setDateState(new Date()), 1000);\r\n\r\n    dispatch(getMessMenu())\r\n\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <h2>Welcome</h2>\r\n      <h3>{userInfo?.username}</h3>\r\n      <div>\r\n        Today's Date : <code> {today}</code>\r\n      </div>\r\n      <div>\r\n        Today's time :{\" \"}\r\n        <code>\r\n          {dateState.toLocaleTimeString('en-US')}\r\n          {/*  Expected output: \"1:15:30 AM\" */}\r\n        </code>\r\n      </div>\r\n\r\n      {/* today's menu  */}\r\n\r\n      {loadingMessMenu ? <Loader></Loader> : errorMessMenu ? <Message >{error}</Message> :\r\n\r\n\r\n        <section className=\"light\">\r\n          <div className=\"container py-2\">\r\n            <div className=\"h1 text-center text-dark\" id=\"pageHeaderTitle\">\r\n              What's on <ConvertToWeekDay number={today} />\r\n            </div>\r\n\r\n            <article className=\"postcard light blue\">\r\n              <a className=\"postcard__img_link\" href=\"#\">\r\n                <img\r\n                  className=\"postcard__img\"\r\n                  src=\"https://picsum.photos/1000/1000\"\r\n                  alt=\"Image Title\"\r\n                />\r\n              </a>\r\n              <div className=\"postcard__text t-dark\">\r\n                <h1 className=\"postcard__title blue\">Lunch</h1>\r\n\r\n                <div className=\"postcard__preview-txt\">\r\n                  <ul className=\"list-group\">\r\n                    <li className=\"list-group-item\">{todaysMess?.first_time}</li>\r\n\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n            </article>\r\n            <article className=\"postcard light blue\">\r\n              <a className=\"postcard__img_link\" href=\"#\">\r\n                <img\r\n                  className=\"postcard__img\"\r\n                  src=\"https://picsum.photos/1000/1000\"\r\n                  alt=\"Image Title\"\r\n                />\r\n              </a>\r\n              <div className=\"postcard__text t-dark\">\r\n                <h1 className=\"postcard__title blue\">Dinner</h1>\r\n\r\n                <div className=\"postcard__preview-txt\">\r\n                  <ul className=\"list-group\">\r\n                    <li className=\"list-group-item\">{todaysMess?.second_time}</li>\r\n\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n            </article>\r\n\r\n          </div>\r\n        </section>\r\n\r\n        // )}\r\n      }\r\n\r\n\r\n      {/* table for this month's bill */}\r\n      <section className=\"light\">\r\n        <div className=\"container py-2\">\r\n          <div className=\"h1 text-center text-dark\" id=\"pageHeaderTitle\">\r\n            Your Bill\r\n          </div>\r\n          {/* download pdf button */}\r\n\r\n          <div className=\"text-end\">\r\n\r\n            <button className=\"btn btn-primary\">Download PDF</button>\r\n          </div>\r\n\r\n          <table className=\"table table-striped\">\r\n\r\n            <thead>\r\n\r\n              <tr>\r\n\r\n                <th scope=\"col\">#</th>\r\n\r\n                <th scope=\"col\">Month</th>\r\n\r\n                <th scope=\"col\">Total</th>\r\n\r\n                <th scope=\"col\">Paid</th>\r\n\r\n                <th scope=\"col\">Due</th>\r\n              </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n\r\n              <tr className=\"table-primary\">\r\n\r\n                <th scope=\"row\">0</th>\r\n\r\n                <td scope=\"row\">March</td>\r\n\r\n                <td>4000</td>\r\n              </tr>\r\n\r\n\r\n\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </section>\r\n\r\n\r\n\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","F:\\mess-manager\\frontend\\src\\Screens\\admin\\users\\EditUser.tsx",["236","237"],[],"import React, { useState, useEffect } from 'react'\r\nimport { Link, useParams, useNavigate } from 'react-router-dom'\r\n\r\nimport { useAppDispatch, useAppSelector } from '../../../app/hooks'\r\nimport Loader from '../../../components/Loader'\r\nimport Message from '../../../components/Message'\r\nimport { getUserDetails, updateUser } from '../../../features/user/user_actions_creators'\r\nimport { detailsReset } from '../../../features/user/user_slice'\r\n\r\n\r\nexport default function EditUser() {\r\n    interface IUser {\r\n        username: string;\r\n        email: string;\r\n        room: string;\r\n        phone: string;\r\n        hostel: string;\r\n        isAdmin: boolean;\r\n    }\r\n\r\n    const { id } = useParams()\r\n    const navigate = useNavigate()\r\n\r\n    const userDetails = useAppSelector(state => state.userDetails)\r\n    const { error, loading, user, success } = userDetails\r\n\r\n    const [username, setUsername] = useState(user.username)\r\n    const [email, setEmail] = useState(user.email)\r\n    const [room, setRoom] = useState(user.room)\r\n    const [phone, setPhone] = useState(user.phone)\r\n    const [hostel, setHostel] = useState(user.hostel)\r\n    const [isAdmin, setIsAdmin] = useState(user.isAdmin)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n\r\n    const userUpdate = useAppSelector(state => state.userUpdate)\r\n    const { error: errorUpdate, loading: loadingUpdate, success: successUpdate } = userUpdate\r\n\r\n    useEffect(() => {\r\n\r\n\r\n\r\n\r\n        if (!user?.username || user?.id !== Number(id)) {\r\n            dispatch(getUserDetails(id))\r\n        } else {\r\n            setUsername(user?.username)\r\n            setEmail(user?.email)\r\n            setIsAdmin(user?.isAdmin)\r\n            setRoom(user?.room)\r\n            setPhone(user?.phone)\r\n            setHostel(user?.hostel)\r\n\r\n\r\n        }\r\n\r\n\r\n        if (successUpdate) {\r\n            dispatch(detailsReset())\r\n            navigate(-1)\r\n        }\r\n\r\n    }, [successUpdate, success, id])\r\n\r\n    const submitHandler = (e: any) => {\r\n        e.preventDefault()\r\n        dispatch(updateUser({ id: id, username, email, hostel, room, phone, isAdmin }))\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n        <>\r\n\r\n            <Link to='/admin/view-users'>\r\n                Go Back\r\n            </Link>\r\n\r\n\r\n            <div className='container'>\r\n\r\n                <div className=\"row justify-content-md-center\">\r\n\r\n                    <div className=\"col-md-6 col-xs-12\">\r\n\r\n\r\n\r\n                        <h1>Edit User</h1>\r\n\r\n                        {loadingUpdate && <Loader />}\r\n\r\n                        {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\r\n\r\n\r\n                        {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message>\r\n                            : (\r\n\r\n                                <form onSubmit={submitHandler}>\r\n\r\n                                    {/* for name */}\r\n                                    < div className='form-group' >\r\n\r\n                                        <label htmlFor='username'>Name</label>\r\n\r\n                                        <input\r\n\r\n                                            className='form-control'\r\n\r\n                                            type='name'\r\n                                            placeholder='Enter name'\r\n                                            value={user.username}\r\n                                            onChange={(e) => setUsername(e.target.value)}\r\n                                        >\r\n                                        </input>\r\n                                    </div>\r\n\r\n                                    {/* for email */}\r\n                                    <div className='form-group'>\r\n\r\n                                        <label htmlFor='email'>Email Address</label>\r\n\r\n                                        <input\r\n                                            className='form-control'\r\n                                            type='email'\r\n                                            placeholder='Enter Email'\r\n                                            value={user.email}\r\n                                            onChange={(e) => setEmail(e.target.value)}\r\n                                        >\r\n                                        </input>\r\n                                    </div>\r\n                                    {/* isAdmin */}\r\n\r\n                                    <div className='form-group'>\r\n\r\n                                        <label htmlFor='isAdmin'>Is Admin</label>\r\n\r\n                                        <input\r\n\r\n                                            type='checkbox'\r\n\r\n                                            checked={user.isAdmin}\r\n                                            onChange={(e) => setIsAdmin(e.target.checked)}\r\n                                        >\r\n\r\n                                        </input>\r\n\r\n\r\n                                    </div>\r\n\r\n                                    {/* for phone */}\r\n\r\n                                    <div className='form-group' >\r\n\r\n                                        <label htmlFor='phone'>Phone</label>\r\n\r\n                                        <input\r\n\r\n                                            className='form-control'\r\n                                            type='phone'\r\n                                            placeholder='Enter phone'\r\n                                            value={user.phone}\r\n                                            onChange={(e) => setPhone(e.target.value)}\r\n                                        >\r\n                                        </input>\r\n                                    </div>\r\n                                    {/* for hostel */}\r\n\r\n                                    <div className='form-group'>\r\n\r\n                                        <label htmlFor='hostel'>Hostel</label>\r\n\r\n                                        <input\r\n                                            className='form-control'\r\n                                            type='text'\r\n                                            placeholder='Enter hostel'\r\n                                            value={user.hostel}\r\n                                            onChange={(e) => setHostel(e.target.value)}\r\n                                        >\r\n                                        </input>\r\n                                    </div>\r\n                                    {/* for room */}\r\n\r\n                                    <div className='form-group' >\r\n\r\n                                        <label htmlFor='room'>Room</label>\r\n\r\n                                        <input\r\n                                            className='form-control'\r\n                                            type='text'\r\n                                            placeholder='Enter room'\r\n                                            value={user.room}\r\n                                            onChange={(e) => setRoom(Number(e.target.value))}\r\n                                        >\r\n                                        </input>\r\n                                    </div>\r\n\r\n\r\n                                    <button type='submit' >\r\n                                        Update\r\n                                    </button>\r\n\r\n                                </form>)\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        </>\r\n\r\n    )\r\n}\r\n","F:\\mess-manager\\frontend\\src\\Screens\\admin\\users\\AddUsers.tsx",["238","239","240","241"],[],"import React, { useState, useEffect, useReducer } from \"react\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { useAppDispatch, useAppSelector } from \"../../../app/hooks\";\r\nimport Loader from \"../../../components/Loader\";\r\nimport Message from \"../../../components/Message\";\r\nimport { register } from \"../../../features/user/user_actions_creators\";\r\n\r\n\r\n\r\nfunction AddUsers() {\r\n\r\n    const [message, setMessage] = useState(\"\");\r\n    const dispatch = useAppDispatch();\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n\r\n\r\n\r\n\r\n\r\n    // credentials\r\n    const [name, setName] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [room, setRoom] = useState(Number);\r\n    const [hostel, setHostel] = useState('');\r\n    const [phone, setPhone] = useState(\"\");\r\n    const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n\r\n\r\n\r\n\r\n    const redirect = location.search ? location.search.split(\"=\")[1] : \"/\";\r\n\r\n    const userRegister = useAppSelector((state) => state.userRegister);\r\n    const { error, loading, userInfo, success } = userRegister;\r\n\r\n\r\n    const submitHandler = (e: any) => {\r\n        e.preventDefault();\r\n\r\n        if (password !== confirmPassword) {\r\n            setMessage(\"Your passwords do not match\");\r\n        } else {\r\n            dispatch(register(name, room, password, hostel, phone));\r\n\r\n\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (success) {\r\n            setMessage(\"The user added successfully\")\r\n            navigate(-1)\r\n        }\r\n    }, [error, success])\r\n\r\n    return (\r\n        // sign up form\r\n\r\n        <div className=\"container\">\r\n\r\n            {message && <Message variant=\"danger\">{message}</Message>}\r\n\r\n            {error && <Message variant=\"danger\">{error}</Message>}\r\n\r\n            {loading && <Loader />}\r\n\r\n            <div className=\"row\">\r\n\r\n                <div className=\"col-md-6 mx-auto\">\r\n\r\n                    <div className=\"card card-body\">\r\n\r\n                        <h3 className=\"text-center mb-4\">\r\n\r\n                            <i className=\"fas fa-user-plus\"></i> Register\r\n                        </h3>\r\n\r\n                        <form onSubmit={submitHandler}>\r\n\r\n                            <div className=\"form-group\">\r\n\r\n                                <label htmlFor=\"name\">Name</label>\r\n\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    id=\"name\"\r\n                                    placeholder=\"Enter Name\"\r\n                                    value={name}\r\n                                    onChange={(e) => setName(e.target.value)}\r\n\r\n                                />\r\n                            </div>\r\n\r\n\r\n                            <div className=\"form-group\">\r\n\r\n                                <label htmlFor=\"room\">Your Room no.</label>\r\n\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    id=\"room\"\r\n                                    placeholder=\"Enter room\"\r\n                                    required\r\n                                    value={room}\r\n                                    onChange={(e) => setRoom(Number(e.target.value))}\r\n                                />\r\n                            </div>\r\n\r\n\r\n                            <div className=\"form-group\">\r\n\r\n                                <label htmlFor=\"room\"> Hostel.</label>\r\n\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    id=\"hostel\"\r\n                                    placeholder=\"Enter Hostel\"\r\n                                    required\r\n                                    value={hostel}\r\n                                    onChange={(e) => setHostel(e.target.value)}\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n\r\n                                <label htmlFor=\"room\"> Phone Number</label>\r\n\r\n                                <input\r\n                                    type=\"number\"\r\n                                    className=\"form-control\"\r\n                                    id=\"phone\"\r\n                                    placeholder=\"Enter Your Phone\"\r\n                                    required\r\n                                    value={phone}\r\n                                    onChange={(e) => setPhone(e.target.value)}\r\n                                />\r\n                            </div>\r\n\r\n\r\n                            <div className=\"form-group\">\r\n\r\n                                <label htmlFor=\"password\">Password</label>\r\n\r\n                                <input\r\n                                    type=\"password\"\r\n                                    className=\"form-control\"\r\n                                    id=\"password\"\r\n                                    placeholder=\"Enter Password\"\r\n                                    required\r\n                                    value={password}\r\n                                    onChange={(e) => setPassword(e.target.value)}\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n\r\n                                <label htmlFor=\"password2\">Confirm Password</label>\r\n\r\n                                <input\r\n                                    type=\"password\"\r\n                                    className=\"form-control\"\r\n                                    id=\"password2\"\r\n                                    required\r\n                                    placeholder=\"Confirm Password\"\r\n                                    value={confirmPassword}\r\n                                    onChange={(e) => setConfirmPassword(e.target.value)}\r\n                                />\r\n                            </div>\r\n\r\n                            <button type=\"submit\" className=\"btn btn-primary btn-block\">\r\n                                Register\r\n                            </button>\r\n                        </form>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default AddUsers\r\n","F:\\mess-manager\\frontend\\src\\Screens\\admin\\users\\ViewUsers.tsx",[],[],"F:\\mess-manager\\frontend\\src\\Screens\\admin\\expenses\\ThisMonthBill.tsx",["242","243"],[],"F:\\mess-manager\\frontend\\src\\Screens\\admin\\expenses\\TodayExpenses.tsx",["244","245"],[],"\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { counter } from \"../../../components/counter\"\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../../../app/hooks\";\r\nimport { getDailyAttendance } from '../../../features/attendance/attendance_actions_creators'\r\nimport { addExpenses } from '../../../features/expenses/expenses_actions_creators'\r\nimport Message from \"../../../components/Message\";\r\nimport Loader from \"../../../components/Loader\";\r\n\r\n\r\nfunction TodayExpenses() {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const [todayExpensesFirst, setTodayExpensesFirst] = useState(0)\r\n    const [todayExpensesSecond, setTodayExpensesSecond] = useState(0)\r\n\r\n    const [todayExpenses, setTodayExpenses] = useState(0)\r\n\r\n    const { attendance: getAttendanceLi, error: getAttendanceError, loading: getAttendanceLoading } = useAppSelector(state => state.getDailyAttendance)\r\n\r\n    const { success: successExpenses, error: errorExpenses } = useAppSelector(state => state.addExpenses)\r\n    const submitHandler = (e: any) => {\r\n        e.preventDefault();\r\n\r\n        let expenses = {\r\n            date: date,\r\n            attendance_first_time: countFirstTimePrs ? countFirstTimePrs : 1,\r\n            attendance_second_time: countSecondTimePrs ? countSecondTimePrs : 1,\r\n            total_attendances: (countFirstTimePrs + countSecondTimePrs),\r\n            expenses_first_time: todayExpensesFirst,\r\n            expenses_second_time: todayExpensesSecond,\r\n            expenses_total: (todayExpensesFirst + todayExpensesSecond)\r\n\r\n\r\n        }\r\n        dispatch(addExpenses(expenses))\r\n        console.log(todayExpenses)\r\n    }\r\n\r\n\r\n\r\n    const today = new Date().toISOString().slice(0, 10);\r\n    const [date, setDate] = useState(today)\r\n    const {\r\n        countFirstTimePrs,\r\n        countSecondTimePrs,\r\n\r\n    } = counter(getAttendanceLi, date)\r\n\r\n\r\n    const [message, setMessage] = useState('')\r\n    // factor\r\n    const [factor, setFactor] = useState(0.6)\r\n\r\n    // const expensePerAttendance = (todayExpenses / count).toFixed(2);\r\n    useEffect(() => {\r\n        setTodayExpensesFirst(parseFloat((todayExpenses * factor).toFixed(2))); setTodayExpensesSecond(parseFloat((todayExpenses * (1 - factor)).toFixed(2)))\r\n    }, [todayExpenses, factor])\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getDailyAttendance(date));\r\n\r\n        if (successExpenses) {\r\n            setMessage(\"The expense is added successfully\")\r\n            // empty all the inputs\r\n            setTodayExpensesFirst(0)\r\n            setTodayExpensesSecond(0)\r\n            setTodayExpenses(0)\r\n        }\r\n\r\n        if (errorExpenses) {\r\n            setMessage(String(errorExpenses))\r\n        }\r\n\r\n    }, [date, errorExpenses, successExpenses])\r\n    return (\r\n\r\n        <div className=\"container\">\r\n\r\n            {getAttendanceLoading ? (\r\n\r\n                <Loader />\r\n            ) : errorExpenses ? (\r\n\r\n                <Message variant=\"danger\">{message || errorExpenses}</Message>\r\n            ) : (\r\n                <>\r\n                    <div className=\"h1 text-center text-dark\" id=\"pageHeaderTitle\">\r\n\r\n                        <input type=\"date\" id=\"date\" value={date} onChange={(e) => setDate(e.target.value)} max={today} /> Expenses\r\n                    </div><div className=\"row\">\r\n                        {successExpenses && <Message variant=\"success\">{Message}</Message>}\r\n                        <div className=\"col-md-6 mx-auto\">\r\n\r\n                            <div className=\"card card-body\">\r\n\r\n                                <h1>Set Expenses</h1>\r\n                                <form onSubmit={submitHandler}>\r\n\r\n                                    <div className=\"form-group\">\r\n\r\n                                        <label htmlFor=\"name\">Total Expenses:</label>\r\n\r\n                                        <input\r\n\r\n                                            className=\"form-group\"\r\n                                            id=\"total\"\r\n                                            value={todayExpenses}\r\n                                            onChange={(e) => setTodayExpenses(Number(e.target.value))}\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div className=\"form-group\">\r\n\r\n                                        <label htmlFor=\"name\">Set Factor For First Time</label>\r\n\r\n                                        <input\r\n                                            type=\"range\"\r\n                                            min=\"0\"\r\n                                            max=\"1\"\r\n                                            step=\"any\"\r\n\r\n                                            list=\"markers\"\r\n                                            className=\"form-group\"\r\n                                            id=\"total\"\r\n                                            value={factor}\r\n\r\n                                            onChange={(e) => setFactor(parseFloat(Number(e.target.value).toFixed(2)))}\r\n                                        />\r\n                                        <span>{factor}</span>\r\n\r\n                                        <datalist id=\"markers\">\r\n                                            <option value=\"0\" label=\"0\">0</option>\r\n                                            <option value=\"0.25\" label=\"1/4\">1/4</option>\r\n                                            <option value=\"0.33\" label=\"1/3\">1/3</option>\r\n                                            <option value=\"0.5\" label=\"1/2\">1/2</option>\r\n                                            <option value=\"0.6\" label=\"2/3\">2/3</option>\r\n                                            <option value=\"1\" label=\"1\">1</option>\r\n                                        </datalist>\r\n                                    </div>\r\n\r\n\r\n                                    <ul className=\"list-group list-group-flush\">\r\n\r\n                                        <label htmlFor=\"name\">First Time:</label>\r\n\r\n                                        <li className=\"list-group-item card-header\"\r\n                                            id=\"first_time\"\r\n                                        >{todayExpensesFirst}</li>\r\n\r\n\r\n                                        <label htmlFor=\"name\">Second Time Expenses:</label>\r\n\r\n                                        <li\r\n                                            className=\"list-group-item card-header\"\r\n                                            id=\"second_time\"\r\n\r\n                                        >{todayExpensesSecond}</li>\r\n                                        <label className=\"list-group-item  card-header\">Total Attendances For First Time</label>\r\n\r\n                                        <li className=\"list-group-item\">{countFirstTimePrs}</li>\r\n\r\n                                        <label className=\"list-group-item  card-header\">Total Attendances For Second Time</label>\r\n\r\n                                        <li className=\"list-group-item\">{countSecondTimePrs}</li>\r\n\r\n\r\n                                    </ul>\r\n\r\n\r\n                                    <button type=\"submit\" className=\"btn btn-primary\">\r\n                                        Submit\r\n                                    </button>\r\n\r\n\r\n\r\n                                </form>\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                    </div></>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodayExpenses;\r\n","F:\\mess-manager\\frontend\\src\\Screens\\admin\\expenses\\MonthlyExpenses.tsx",["246","247","248","249","250","251"],[],"F:\\mess-manager\\frontend\\src\\Screens\\admin\\expenses\\BillForm.tsx",["252","253","254"],[],"// for this month bill\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../../../app/hooks\";\r\nimport { getMessBill } from '../../../features/expenses/expenses_actions_creators'\r\nimport Message from \"../../../components/Message\";\r\nimport Loader from \"../../../components/Loader\";\r\nimport Downloader from '../../../components/Downloader';\r\nimport { listUsers } from \"../../../features/user/user_actions_creators\";\r\nimport { payBill } from '../../../features/expenses/expenses_actions_creators';\r\n\r\n\r\nfunction BillForm() {\r\n    const dispatch = useAppDispatch();\r\n\r\n\r\n    const today = new Date().toISOString().slice(0, 7);\r\n    const [date, setDate] = useState(today)\r\n    const month = Number(date.slice(5, 7)) //1\r\n    const year = Number(today.slice(0, 4)) //2023 \r\n\r\n    const { messBill, loading } = useAppSelector(state => state.getMessBill)\r\n    const { loading: addBillLoading, success: addBillSuccess } = useAppSelector(state => state.addBill)\r\n\r\n    const [message, setMessage] = useState<string>('')\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(listUsers())\r\n        dispatch(getMessBill(year, month))\r\n\r\n\r\n    }, [date, addBillSuccess])\r\n\r\n    useEffect(() => {\r\n        setMessage(\"Bill is added\")\r\n\r\n        setInterval(() =>\r\n\r\n            setMessage(\"\"),\r\n            2000\r\n        )\r\n    }, [addBillSuccess])\r\n\r\n\r\n    const [billPayed, setBillPayed] = useState(0)\r\n\r\n\r\n\r\n    const handleSubmit = (e: any) => {\r\n        e.preventDefault()\r\n        dispatch(getMessBill(year, month))\r\n    }\r\n\r\n    const saveHandler = (e: any) => {\r\n\r\n        e.preventDefault()\r\n\r\n        let billId = e.target[0].id.split(\"-\").at(-1);\r\n        let billPayed = Number(e.target.elements[`bill-payed-${billId}`].value);\r\n\r\n        let studentId = e.target[1].id.split(\"-\").at(-1);\r\n        let payingBill = {\r\n            paying_bill: billPayed\r\n        }\r\n\r\n        dispatch(payBill(year, month, studentId, payingBill))\r\n\r\n    }\r\n    return (\r\n\r\n        <div id=\"mess-bill\" className=\"container\">\r\n            {addBillSuccess && <Message variant=\"success\">{message}</Message>}\r\n\r\n            <div className=\"h1 text-center text-dark\" >\r\n                Bill Form\r\n\r\n                <form className=\"form form-control\" onSubmit={handleSubmit} >\r\n\r\n                    <input type=\"month\" id=\"date\" value={date} onChange={(e) => setDate(e.target.value)} max={today} />\r\n\r\n\r\n                    <button className=\"btn btn-primary\" type=\"submit\">Get</button>\r\n                </form>\r\n            </div>\r\n\r\n\r\n\r\n            <Downloader htmlInputId={`mess-bill`} name={\"Expenses-sheet\"} />\r\n\r\n\r\n            {loading || addBillLoading ? (<Loader ></Loader>) :\r\n\r\n\r\n\r\n\r\n                <table className=\"table table-striped\">\r\n\r\n                    <thead>\r\n\r\n                        <tr>\r\n\r\n                            <th scope=\"col\">#</th>\r\n\r\n                            <th scope=\"col\">Name</th>\r\n\r\n                            <th scope=\"col\">Room No</th>\r\n\r\n                            <th scope=\"col\">This Month's Bill</th>\r\n\r\n                            <th scope=\"col\">Due Bill</th>\r\n\r\n                            <th scope=\"col\">Total to be Paid</th>\r\n\r\n                            <th scope=\"col\">Paid Payed</th>\r\n\r\n                        </tr>\r\n                    </thead>\r\n\r\n                    {messBill?.bills.map((bill) => <tbody>\r\n\r\n                        <tr>\r\n\r\n                            <th scope=\"row\" key={bill.id} >{bill.id}</th>\r\n\r\n                            <td>{bill.student}</td>\r\n\r\n                            <td>{bill.room}</td>\r\n\r\n                            <td>{bill.bill}</td>\r\n\r\n                            <td>{bill.dues}</td>\r\n\r\n                            <td>{bill.total}</td>\r\n\r\n\r\n                            <td>\r\n\r\n\r\n                                <form className=\"form\" onSubmit={saveHandler}>\r\n\r\n                                    <input className=\"form-control\" id={`bill-payed-${bill.id}`} type=\"number\" onChange={(e) => (e.target.value)}></input>\r\n\r\n                                    <button className='btn btn-primary'\r\n                                        disabled={Number(bill.total) === 0}\r\n\r\n                                        type=\"submit\" id={`student-input-id-${bill.student_id}`} name={`id-input-${bill.student}`} >Pay Bill</button>\r\n                                </form>\r\n                            </td>\r\n                        </tr>\r\n\r\n\r\n                    </tbody>\r\n                    )}\r\n                </table>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BillForm;\r\n","F:\\mess-manager\\frontend\\src\\Screens\\admin\\attendances\\MonthlyAttendance.tsx",[],[],"F:\\mess-manager\\frontend\\src\\Screens\\admin\\mess\\ViewMess.tsx",["255","256","257"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { getMessMenu } from \"../../../features/mess/mess_actions_creators\";\r\n\r\nimport Message from \"../../../components/Message\";\r\nimport { useAppSelector, useAppDispatch } from \"../../../app/hooks\";\r\nimport \"./ViewMess.css\";\r\nimport Loader from \"../../../components/Loader\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Downloader from \"../../../components/Downloader\";\r\n\r\nfunction ViewMess() {\r\n\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(getMessMenu());\r\n\r\n\r\n\r\n  }, [dispatch, useAppSelector]);\r\n\r\n  const { messMenu, loading, error } = useAppSelector((state) => state.messMenu);\r\n\r\n\r\n\r\n\r\n  return (\r\n\r\n    <section id=\"tabs\" className=\"project-tab\">\r\n\r\n      <div className=\"container\">\r\n\r\n        <div className=\"row\">\r\n\r\n          <div className=\"col-md-12\">\r\n\r\n\r\n            <Downloader tableData={messMenu} htmlInputId={'divToPrint'} name={\"Mess-Menu\"} />\r\n\r\n\r\n\r\n          </div>\r\n\r\n\r\n          <div className=\"col-md-12\">\r\n\r\n            <div className=\"tab-content\" id=\"nav-tabContent\">\r\n\r\n              <div\r\n                className=\"tab-pane fade show active\"\r\n                id=\"nav-home\"\r\n                role=\"tabpanel\"\r\n                aria-labelledby=\"nav-home-tab\"\r\n              >\r\n\r\n                {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message>\r\n                  : (\r\n\r\n                    <table id=\"divToPrint\" className=\"table\" cellSpacing=\"0\">\r\n\r\n                      <thead>\r\n\r\n                        <tr>\r\n\r\n                          <th>Day</th>\r\n\r\n                          <th>First Time</th>\r\n\r\n                          <th>Second Time</th>\r\n\r\n                          <th>Edit</th>\r\n                        </tr>\r\n                      </thead>\r\n\r\n\r\n                      <tbody>\r\n\r\n                        {messMenu?.map((menu) => <tr key={menu.id}>\r\n\r\n                          <td>\r\n\r\n                            <a href=\"#\">{menu.day}</a>\r\n                          </td>\r\n\r\n                          <td>{menu.first_time}</td>\r\n\r\n                          <td>{menu.second_time}</td>\r\n\r\n                          <td><button className=\"btn btn-primary\"><Link\r\n                            to={`/admin/update-mess/${menu.day}`}>Edit</Link>\r\n                          </button> </td>\r\n                        </tr>)}\r\n\r\n\r\n                      </tbody>\r\n                    </table>\r\n                  )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default ViewMess;\r\n","F:\\mess-manager\\frontend\\src\\Screens\\admin\\attendances\\markAttendance.tsx",["258","259","260","261","262","263"],[],"\r\nimport { listUsers } from \"../../../features/user/user_actions_creators\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../../../app/hooks\";\r\nimport Loader from \"../../../components/Loader\";\r\nimport Message from \"../../../components/Message\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { postAttendance, getDailyAttendance } from \"../../../features/attendance/attendance_actions_creators\";\r\nimport { counter } from \"../../../components/counter\";\r\n\r\n\r\nexport default function MarkAttendance() {\r\n\r\n  const dispatch = useAppDispatch();\r\n  const navigate = useNavigate();\r\n  const { users, loading, error } = useAppSelector((state) => state.userList);\r\n  const today = new Date().toISOString().slice(0, 10);\r\n\r\n  const { userInfo } = useAppSelector((state) => state.userLogin);\r\n\r\n\r\n  // postAttendance\r\n  const { success: attendanceSuccess, error: attendanceError, loading: attendanceLoading } = useAppSelector((state) => state.attendance)\r\n\r\n\r\n  const { attendance: getAttendanceLi, error: getAttendanceError, loading: getAttendanceLoading } = useAppSelector(state => state.getDailyAttendance)\r\n\r\n\r\n\r\n\r\n\r\n  const userIds = users?.map((user: any) => user.id)\r\n\r\n  // Prs = Present\r\n  const [totalFirstTimePrs, setTotalFirstTimePrs] = useState(0)\r\n  const [totalSecondTimePrs, setTotalSecondTimePrs] = useState(0)\r\n  const [totalGrandPrs, setTotalGrandPrs] = useState(0)\r\n\r\n\r\n\r\n\r\n\r\n  function attendanceExtractor(e, id: number): string[] {\r\n    let first_time = e.target.elements[`first-attendance-${id}`].value;\r\n    let second_time = e.target.elements[`second-attendance-${id}`].value;\r\n\r\n    return [first_time, second_time];\r\n  }\r\n\r\n  const handleSubmit = (e: any) => {\r\n    e.preventDefault();\r\n    try {\r\n      for (let index = 0; index < userIds.length; index++) {\r\n        let id: number = userIds[index];\r\n\r\n        const attendance = {\r\n          student: id,\r\n          date: date,\r\n          first_time: attendanceExtractor(e, id)[0],\r\n          second_time: attendanceExtractor(e, id)[1]\r\n        }\r\n\r\n        dispatch(postAttendance(attendance, id))\r\n        let { countFirstTimePrs, countSecondTimePrs, } = counter(getAttendanceLi, date);\r\n        setTotalFirstTimePrs(countFirstTimePrs)\r\n        setTotalSecondTimePrs(countSecondTimePrs)\r\n\r\n      }\r\n\r\n\r\n\r\n    } catch (error) {\r\n      console.error(error)\r\n\r\n    }\r\n  }\r\n\r\n\r\n\r\n  const [date, setDate] = useState(today)\r\n  useEffect(() => {\r\n    if (userInfo && userInfo.isAdmin) {\r\n      dispatch(listUsers());\r\n      if (attendanceSuccess) {\r\n        dispatch(getDailyAttendance(today))\r\n\r\n      }\r\n\r\n    } else {\r\n      navigate(\"/login\");\r\n    }\r\n\r\n  }, [attendanceSuccess, userInfo]);\r\n\r\n\r\n\r\n  return (<>\r\n\r\n    <section>\r\n\r\n      <div className=\"row\">\r\n\r\n        <div className=\"col-md-12 text-dark text-center\">\r\n\r\n          <h3 >Mark Attendance</h3> for <label htmlFor=\"date\">The Date:</label><h4><input type=\"date\" id=\"date\" value={date} onChange={(e) => setDate(e.target.value)} max={today} /></h4>'s meal\r\n        </div>\r\n      </div>\r\n      {loading ? (\r\n\r\n        <Loader />\r\n      ) : (error) ? (\r\n\r\n        <Message variant=\"danger\">{error}</Message>\r\n      ) :\r\n        (\r\n\r\n          <form className=\"form\" onSubmit={handleSubmit}>\r\n\r\n\r\n            <table className=\"table table-bordered\">\r\n\r\n              <thead>\r\n\r\n                <tr>\r\n\r\n                  <th scope=\"col\">ID</th>\r\n\r\n                  <th scope=\"col\">Name</th>\r\n\r\n                  <th scope=\"col\">Room no.</th>\r\n\r\n                  <th scope=\"col\">First Time</th>\r\n\r\n                  <th scope=\"col\">Second Time</th>\r\n\r\n                  <th scope=\"col\">Status</th>\r\n                </tr>\r\n              </thead>\r\n\r\n\r\n              {users.map((user) => <tbody>\r\n\r\n\r\n\r\n\r\n\r\n                <tr key={user.id}>\r\n\r\n\r\n\r\n                  <th scope=\"row\" id={`user-id-${user.id}}`}>{user.id}</th>\r\n\r\n                  <td className=\"form-group\">\r\n\r\n                    <div\r\n                      className=\"form-control\"\r\n                      id={`table-name-${user.id}`}>\r\n                      {user.username}\r\n                    </div>\r\n                  </td>\r\n\r\n                  <td className=\"form-group\">\r\n\r\n                    <div\r\n\r\n                      className=\"form-control\"\r\n                      id={`table-room-${user.id}`}>\r\n\r\n                      {user.room}\r\n                    </div>\r\n\r\n                  </td>\r\n\r\n\r\n                  <td>\r\n\r\n                    <select id={`first-attendance-${user.id}`} onChange={(e) => (e.target.value)} className=\"form-control\"  >\r\n\r\n                      <option value=\"present\">✓ Present </option>\r\n\r\n                      <option value=\"absent\">X Absent </option>\r\n\r\n                      <option value=\"double\">2 Double </option>\r\n                    </select>\r\n\r\n                  </td>\r\n\r\n                  <td>\r\n                    {/* {loadingSubmitAttendance ? <Loader /> : errorSubmitAttendance ? <Message variant='danger'>{error}</Message> */}\r\n\r\n\r\n\r\n\r\n\r\n                  </td>\r\n                  <td>\r\n\r\n                    <select id={`second-attendance-${user.id}`} onChange={(e) => (e.target.value)} className=\"form-control\"  >\r\n\r\n                      <option value=\"present\">✓ Present </option>\r\n\r\n                      <option value=\"absent\" >X Absent </option>\r\n\r\n                      <option value=\"double\">2 Double </option>\r\n                    </select>\r\n\r\n                  </td>\r\n\r\n                  <td>\r\n\r\n                    <i className=\"bi bi-check\" >{attendanceError && attendanceError}</i>\r\n                  </td>\r\n                </tr>\r\n\r\n              </tbody>)\r\n              }\r\n\r\n            </table>\r\n\r\n            <button type=\"submit\" className=\"btn btn-primary\">\r\n              Submit\r\n            </button>\r\n\r\n          </form>\r\n\r\n        )\r\n\r\n\r\n      }\r\n\r\n\r\n    </section>\r\n\r\n    <section>\r\n\r\n      <div className=\"row\">\r\n\r\n        <div className=\"col-md-12 text-dark\">\r\n\r\n          <h3>{today}'s totals </h3>\r\n        </div>\r\n      </div>\r\n\r\n      <table className=\"table table-bordered\">\r\n\r\n        <thead>\r\n\r\n          <tr>\r\n\r\n            <th scope=\"col\">#</th>\r\n\r\n            <th scope=\"col\">Total Members</th>\r\n\r\n\r\n            <th scope=\"col\">Total Attendances First Time</th>\r\n            <th scope=\"col\">Total Attendances Second Time</th>\r\n            <th scope=\"col\">Total Attendances </th>\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n\r\n          <tr>\r\n\r\n            <th scope=\"row\">1</th>\r\n\r\n            <td>{users?.length}</td>\r\n\r\n\r\n\r\n            <td>{totalFirstTimePrs}</td>\r\n            <td>{totalSecondTimePrs}</td>\r\n            <td>{totalGrandPrs}</td>\r\n\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n\r\n    </section>\r\n  </>\r\n  )\r\n\r\n}\r\n\r\n\r\n\r\n","F:\\mess-manager\\frontend\\src\\Screens\\admin\\mess\\UpdateMess.tsx",["264","265","266"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router\";\r\n\r\nimport { getMessMenu, updateMessMenu } from \"../../../features/mess/mess_actions_creators\";\r\n\r\nimport Message from \"../../../components/Message\";\r\nimport { useAppSelector, useAppDispatch } from \"../../../app/hooks\";\r\n\r\nimport \"./ViewMess.css\";\r\nimport Loader from \"../../../components/Loader\";\r\n\r\ntype menuPerDay = {\r\n    id: number;\r\n    day: string;\r\n    first_time: string,\r\n    second_time: string\r\n}\r\n// interface messMenu {\r\n//     messMenu: menuPerDay[]\r\n// }\r\ntype messMenu = menuPerDay[]\r\n\r\n\r\nfunction UpdateMess() {\r\n\r\n    const dispatch = useAppDispatch()\r\n    const { day } = useParams<string>()\r\n\r\n    const [menuFirst, setMenuFirst] = useState<string>()\r\n    const [menuSecond, setMenuSecond] = useState<string>()\r\n    useEffect(() => {\r\n        dispatch(getMessMenu());\r\n    }, [dispatch, useAppSelector]);\r\n\r\n\r\n    const { messMenu, loading, error } = useAppSelector((state) => state.messMenu);\r\n    let menu = messMenu.find((item: menuPerDay) => item.day === day)\r\n\r\n    const handleChange = (e: any) => {\r\n        const { name, value } = e.target;\r\n        if (name === \"firstTime\") {\r\n            setMenuFirst(value)\r\n        } else if (name === \"secondTime\") {\r\n            setMenuSecond(value)\r\n        }\r\n\r\n        console.log({ name, value })\r\n    }\r\n\r\n    const navigate = useNavigate()\r\n    const submitHandler = (e: any) => {\r\n        e.preventDefault();\r\n        if (!menu) {\r\n            throw new Error(\"Day must be provided\")\r\n        }\r\n        dispatch(updateMessMenu(menu.day, {\r\n            id: menu.id,\r\n            day: menu.day,\r\n            first_time: menuFirst as string,\r\n            second_time: menuSecond as string,\r\n        }))\r\n\r\n        navigate(-1)\r\n        alert(\"Menu Updated\")\r\n    }\r\n\r\n    return (\r\n\r\n        <section id=\"tabs\" className=\"project-tab\">\r\n\r\n            <div className=\"container\">\r\n\r\n                <div className=\"col-md-12\">\r\n\r\n                    <div className=\"tab-content\" id=\"nav-tabContent\">\r\n\r\n                        <div\r\n\r\n                            className=\"tab-pane fade show active\"\r\n                            id=\"nav-home\"\r\n                            role=\"tabpanel\"\r\n                            aria-labelledby=\"nav-home-tab\"\r\n                        >\r\n\r\n                            {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message>\r\n                                : (\r\n\r\n                                    <form onSubmit={(e) => submitHandler(e)}>\r\n\r\n\r\n                                        <table className=\"table\" cellSpacing=\"0\">\r\n\r\n                                            <thead>\r\n\r\n                                                <tr>\r\n\r\n                                                    <th>Day</th>\r\n\r\n                                                    <th>First Time</th>\r\n\r\n                                                    <th>Second Time</th>\r\n                                                </tr>\r\n                                            </thead>\r\n\r\n\r\n                                            <tbody>\r\n\r\n                                                <tr >\r\n\r\n                                                    <td >\r\n\r\n                                                        <a href=\"#\">{menu?.day}</a>\r\n                                                    </td>\r\n\r\n                                                    <td className=\"form-group\">\r\n\r\n                                                        <input type=\"text\" name=\"firstTime\" className=\"form-control\" placeholder={menu?.first_time} value={menuFirst} onChange={(e) => handleChange(e)} />\r\n\r\n                                                    </td>\r\n\r\n                                                    <td className=\"form-group\">\r\n\r\n                                                        <input type=\"text\" name=\"secondTime\" className=\"form-control\" placeholder={menu?.second_time} value={menuSecond} onChange={(e) => handleChange(e)} />\r\n\r\n                                                    </td>\r\n                                                </tr>\r\n\r\n\r\n                                            </tbody>\r\n                                        </table>\r\n\r\n                                        <div className=\"row\">\r\n\r\n                                            <div className=\"col-md-12\">\r\n\r\n                                                <button className=\"btn btn-primary\" type=\"submit\">Save</button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </form>\r\n                                )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </section >\r\n    );\r\n}\r\n\r\nexport default UpdateMess;\r\n","F:\\mess-manager\\frontend\\src\\components\\Loader.tsx",[],[],"F:\\mess-manager\\frontend\\src\\components\\Message.tsx",[],[],"F:\\mess-manager\\frontend\\src\\components\\ConvertToWeekDay.tsx",[],[],[],"F:\\mess-manager\\frontend\\src\\components\\counter.ts",[],[],"F:\\mess-manager\\frontend\\src\\components\\Downloader.tsx",["267"],[],"import React from 'react'\r\n\r\nimport { utils, writeFileXLSX, write } from 'xlsx';\r\n\r\n\r\nfunction Downloader({\r\n    tableData,\r\n    htmlInputId,\r\n    name,\r\n}: any) {\r\n\r\n\r\n    function printDocument() {\r\n        // const input = document.getElementById(htmlInputId);\r\n\r\n        const workbook = utils.book_new();\r\n\r\n        const worksheet = utils.json_to_sheet(tableData)\r\n\r\n        utils.book_append_sheet(workbook, worksheet, name)\r\n\r\n        // Generate an XLSX file buffer\r\n        const buffer = write(workbook, { type: 'buffer', bookType: 'xlsx' });\r\n\r\n        // Create a Blob from the buffer\r\n        const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\r\n\r\n        // Create a download link\r\n        const url = URL.createObjectURL(blob);\r\n\r\n        // Trigger a click on the download link\r\n        const link = document.createElement('a');\r\n        link.href = url;\r\n        link.download = 'table.xlsx';\r\n        link.click();\r\n\r\n        // Release the object URL\r\n        URL.revokeObjectURL(url);\r\n    }\r\n\r\n    return (\r\n        <button className=\"btn btn-primary\" data-html2canvas-ignore onClick={printDocument}>Download as Excel Sheet  <i className=\"fas fa-download\" /></button>\r\n\r\n    )\r\n}\r\n\r\nexport default Downloader","F:\\mess-manager\\frontend\\src\\components\\ConvertToMonth.tsx",[],[],"F:\\mess-manager\\frontend\\src\\Screens\\admin\\attendances\\DailyAttendance.tsx",[],[],"F:\\mess-manager\\frontend\\src\\Screens\\admin\\attendances\\AttendanceSheet.tsx",[],[],"F:\\mess-manager\\frontend\\src\\app\\hooks.ts",[],[],"F:\\mess-manager\\frontend\\src\\features\\mess\\mess_slice.ts",["268"],[],"import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n// this is how a mess menu look like\r\n// [\r\n//   {\r\n//     \"id\": 1,\r\n//     \"day\": \"Monday\",\r\n//     \"first_time\": \"Daal Chawal\",\r\n//     \"second_time\": \"Acchar\"\r\n//   },\r\n//   {\r\n//     \"id\": 2,\r\n//     \"day\": \"Tuesday\",\r\n//     \"first_time\": \"Alu Qeema\",\r\n//     \"second_time\": \"Seasonal Vegetable\"\r\n//   },\r\n//   {\r\n//     \"id\": 3,\r\n//     \"day\": \"Wednesday\",\r\n//     \"first_time\": \"Paratha Chai\",\r\n//     \"second_time\": \"Fish\"\r\n//   },\r\n//   {\r\n//     \"id\": 4,\r\n//     \"day\": \"Thursday\",\r\n//     \"first_time\": \"Palak\",\r\n//     \"second_time\": \"Biryani\"\r\n//   },\r\n//   {\r\n//     \"id\": 5,\r\n//     \"day\": \"Friday\",\r\n//     \"first_time\": \"Biryani\",\r\n//     \"second_time\": \"Haleem\"\r\n//   },\r\n//   {\r\n//     \"id\": 6,\r\n//     \"day\": \"Saturday\",\r\n//     \"first_time\": \"Qeema\",\r\n//     \"second_time\": \"Alu Matar\"\r\n//   },\r\n//   {\r\n//     \"id\": 7,\r\n//     \"day\": \"Sunday\",\r\n//     \"first_time\": \"Alu Paratha\",\r\n//     \"second_time\": \"off\"\r\n//   }\r\n// ] \r\n\r\ntype menuPerDay = {\r\n    id: number;\r\n    day: string;\r\n    first_time: string,\r\n    second_time: string\r\n}\r\n// interface messMenu {\r\n//     messMenu: menuPerDay[]\r\n// }\r\ntype messMenu = menuPerDay[]\r\n\r\nconst messMenuFromStorage: messMenu | [] = localStorage.getItem(\"messMenu\") !== null\r\n    ? JSON.parse(localStorage.getItem(\"messMenu\")!)\r\n    : [];\r\n\r\n\r\nexport const messMenuSlice = createSlice({\r\n    name: 'mess-menu',\r\n    initialState: {\r\n        messMenu: messMenuFromStorage,\r\n\r\n        loading: false,\r\n        error: null\r\n    },\r\n    reducers: {\r\n\r\n        getMessMenuRequest(state) { state.loading = true },\r\n        getMessMenuSuccess(state, action) { state.loading = false; state.messMenu = action.payload },\r\n        getMessMenuFail(state, action) { state.error = action.payload }\r\n    }\r\n})\r\n\r\nexport const { getMessMenuRequest, getMessMenuSuccess, getMessMenuFail } = messMenuSlice.actions\r\n\r\nexport const messMenuUpdateSlice = createSlice({\r\n    name: 'mess-menu-update',\r\n    initialState: {\r\n        messMenu: messMenuFromStorage,\r\n        success: false,\r\n        error: false,\r\n        loading: false\r\n    },\r\n    reducers: {\r\n        updateMessMenuRequest(state) { state.loading = true },\r\n        updateMessMenuSuccess(state, action) {\r\n            state.loading = false;\r\n            state.success = true;\r\n            state.messMenu = action.payload\r\n        },\r\n\r\n        updateMessMenuFail(state, action) {\r\n            state.error = action.payload\r\n\r\n        }\r\n\r\n    }\r\n})\r\n\r\nexport const { updateMessMenuRequest, updateMessMenuSuccess, updateMessMenuFail } = messMenuUpdateSlice.actions\r\n","F:\\mess-manager\\frontend\\src\\features\\attendance\\attendance_slice.ts",["269","270"],[],"import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\n\r\n\r\nconst AttendanceInitialState = {\r\n    loading: false,\r\n    success: false,\r\n    error: null,\r\n    attendance: [\r\n        {\r\n            id: 0,\r\n            date: '00-00-2000',\r\n            first_time: 'absent',\r\n            second_time: 'absent',\r\n            student: \"Student\",\r\n            student_id: 0\r\n        }\r\n    ]\r\n};\r\nexport const getAttendanceSlice = createSlice({\r\n    name: 'get-attendances',\r\n    initialState: AttendanceInitialState,\r\n    reducers: {\r\n\r\n        getAttendanceRequest(state) { state.loading = true },\r\n        getAttendanceSuccess(state, action) { state.loading = false; state.attendance = action.payload; state.success = true; },\r\n        getAttendanceFail(state, action) { state.error = action.payload; state.loading = false }\r\n\r\n    }\r\n\r\n})\r\n\r\nexport const { getAttendanceRequest, getAttendanceSuccess, getAttendanceFail } = getAttendanceSlice.actions\r\n\r\n\r\n\r\nexport const getMonthlyAttendanceSlice = createSlice({\r\n    name: 'get-monthly-attendances',\r\n    initialState: AttendanceInitialState,\r\n    reducers: {\r\n\r\n        getMonthAttendanceRequest(state) { state.loading = true },\r\n        getMonthAttendanceSuccess(state, action) { state.loading = false; state.attendance = action.payload; state.success = true; },\r\n        getMonthAttendanceFail(state, action) { state.error = action.payload; state.loading = false }\r\n\r\n    }\r\n\r\n})\r\n\r\nexport const { getMonthAttendanceRequest, getMonthAttendanceSuccess, getMonthAttendanceFail } = getMonthlyAttendanceSlice.actions\r\n\r\n\r\nexport const getDailyAttendanceSlice = createSlice({\r\n    name: 'get-daily-attendances',\r\n    initialState: AttendanceInitialState,\r\n    reducers: {\r\n\r\n        getDailyAttendanceRequest(state) { state.loading = true },\r\n        getDailyAttendanceSuccess(state, action) { state.loading = false; state.attendance = action.payload; state.success = true; },\r\n        getDailyAttendanceFail(state, action) { state.error = action.payload; state.loading = false }\r\n\r\n    }\r\n\r\n})\r\n\r\nexport const { getDailyAttendanceRequest, getDailyAttendanceSuccess, getDailyAttendanceFail } = getDailyAttendanceSlice.actions\r\n\r\n\r\n\r\n// we cannot store expenses per month since we don't know which months the user wants and secondly it will bloat the memory\r\n// const expensesPerMonthFromStorage: expenses | [] = localStorage.getItem(\"expensesPerMonth\") !== null\r\n//   ? JSON.parse(localStorage.getItem(\"userInfo\")!)\r\n//   : [];\r\n\r\nexport const postAttendanceSlice = createSlice({\r\n    name: 'post-attendance',\r\n    initialState: {\r\n        loading: false,\r\n        success: false,\r\n        error: null,\r\n        attendance: {}\r\n\r\n    },\r\n    reducers: {\r\n\r\n        postAttendanceRequest(state) { state.loading = true },\r\n        postAttendanceSuccess(state, action) { state.loading = false; state.attendance = action.payload; state.success = true; },\r\n        postAttendanceFail(state, action) { state.error = action.payload; state.loading = false },\r\n\r\n    }\r\n\r\n})\r\n\r\nexport const { postAttendanceRequest, postAttendanceSuccess, postAttendanceFail } = postAttendanceSlice.actions\r\n\r\n\r\n","F:\\mess-manager\\frontend\\src\\features\\expenses\\expenses_slice.ts",["271","272","273"],[],"import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\n\r\n//  GET EXpenses \r\n// [\r\n// \t{\r\n// \t\t\"date\": \"2023-01-20\",\r\n// \t\t\"total_attendances\": 150,\r\n\r\n\r\n// \t    \"expenses_per_first_time\": number;\r\n//       \"expenses_per_first_second\": number;\r\n\r\n// \t},\r\n// \t{\r\n// \t\t\"date\": \"2023-01-21\",\r\n// \t\t\"total_attendances\": 120,\r\n// \t    \"expenses_per_first_time\": number;\r\n//       \"expenses_per_first_second\": number;\r\n\r\n// \t},\r\n// \t{\r\n// \t\t\"date\": \"2023-01-22\",\r\n// \t\t\"total_attendances\": 150,\r\n//      \"expenses_per_first_time\": number;\r\n//       \"expenses_per_first_second\": number;\r\n\r\n// \r\n// \t}\r\n// ]\r\n\r\ninterface expensesPerDay {\r\n    date: string;\r\n    total_attendances: number;\r\n    expenses_per_first_time: number;\r\n    expenses_per_first_second: number;\r\n\r\n\r\n}\r\n\r\ntype TExpenses = expensesPerDay[]\r\nconst ExpenseInitialState = {\r\n    loading: false,\r\n    success: false,\r\n    error: null,\r\n    expensesPerMonth: [\r\n\r\n        {\r\n            id: 0,\r\n            date: \"0000-00-00\",\r\n            attendance_first_time: 0,\r\n            attendance_second_time: 0,\r\n            total_attendances: 0,\r\n            expenses_first_time: \"0\",\r\n            expenses_second_time: \"0\",\r\n            expenses_total: \"0\"\r\n        }\r\n\r\n    ]\r\n\r\n}\r\nexport const addExpensesSlice = createSlice({\r\n    name: 'add-expenses',\r\n    initialState: ExpenseInitialState,\r\n    reducers: {\r\n\r\n        addExpensesRequest(state) { state.loading = true },\r\n        addExpensesSuccess(state, action) { state.loading = false; state.success = true; state.expensesPerMonth = action.payload },\r\n        addExpensesFail(state, action) { state.error = action.payload; state.loading = false },\r\n\r\n    }\r\n\r\n})\r\n\r\nexport const { addExpensesRequest, addExpensesSuccess, addExpensesFail } = addExpensesSlice.actions\r\n\r\n\r\n\r\n\r\n\r\n// we cannot store expenses per month since we don't know which months the user wants and secondly it will bloat the memory\r\n// const expensesPerMonthFromStorage: expenses | [] = localStorage.getItem(\"expensesPerMonth\") !== null\r\n//   ? JSON.parse(localStorage.getItem(\"userInfo\")!)\r\n//   : [];\r\n\r\nexport const getExpensesPerMonthSlice = createSlice({\r\n    name: 'get-expenses-per-month',\r\n    initialState: ExpenseInitialState,\r\n    reducers: {\r\n\r\n        getExpensesPerMonthRequest(state) { state.loading = true },\r\n        getExpensesPerMonthSuccess(state, action) { state.loading = false; state.expensesPerMonth = action.payload; state.success = true; },\r\n        getExpensesPerMonthFail(state, action) { state.error = action.payload; state.loading = false },\r\n\r\n    }\r\n\r\n})\r\n\r\nexport const { getExpensesPerMonthRequest, getExpensesPerMonthSuccess, getExpensesPerMonthFail } = getExpensesPerMonthSlice.actions\r\n\r\n\r\n\r\n// get mess bill wo jo akhry maheenay main ata hai\r\nexport const getMessBillSlice = createSlice({\r\n    name: 'get-mess-bill',\r\n    initialState: {\r\n        loading: false,\r\n\r\n        success: false,\r\n        error: null,\r\n        messBill: {\r\n            id: 0,\r\n            dateMonth: \"0000-00-00\",\r\n            bills: [\r\n\r\n                {\r\n                    id: 9,\r\n                    room: \"0\",\r\n                    dateMonth: \"0000-00-00\",\r\n                    bill: \"0.00\",\r\n                    dues: \"0.00\",\r\n                    total: \"0.00\",\r\n                    student: \"student\",\r\n                    student_id: 0\r\n                }\r\n\r\n            ]\r\n\r\n\r\n\r\n        }\r\n\r\n    },\r\n    reducers: {\r\n\r\n        getMessBillRequest(state) { state.loading = true },\r\n        getMessBillSuccess(state, action) { state.loading = false; state.messBill = action.payload; state.success = true; },\r\n        getMessBillFailure(state, action) { state.error = action.payload; state.loading = false },\r\n\r\n    }\r\n\r\n})\r\n\r\nexport const { getMessBillRequest, getMessBillSuccess, getMessBillFailure } = getMessBillSlice.actions\r\n// jab log bill jama krwane ate hain\r\nexport const postPayingBillSlice = createSlice({\r\n    name: 'add-paying-bill',\r\n    initialState: {\r\n        loading: false,\r\n        success: false,\r\n        error: null,\r\n        addBill: {}\r\n\r\n    },\r\n    reducers: {\r\n\r\n        postPayingBillRequest(state) { state.loading = true },\r\n        postPayingBillSuccess(state, action) { state.loading = false; state.addBill = action.payload; state.success = true; },\r\n        postPayingBillFail(state, action) { state.error = action.payload; state.loading = false },\r\n\r\n    }\r\n\r\n})\r\n\r\nexport const { postPayingBillRequest, postPayingBillSuccess, postPayingBillFail } = postPayingBillSlice.actions\r\n\r\n\r\n","F:\\mess-manager\\frontend\\src\\features\\user\\user_actions_creators.ts",[],[],"F:\\mess-manager\\frontend\\src\\features\\mess\\mess_actions_creators.ts",[],[],"F:\\mess-manager\\frontend\\src\\features\\expenses\\expenses_actions_creators.ts",[],[],"F:\\mess-manager\\frontend\\src\\features\\attendance\\attendance_actions_creators.ts",[],[],"F:\\mess-manager\\frontend\\src\\components\\IdToStudent.tsx",[],[],"F:\\mess-manager\\frontend\\src\\components\\Today.tsx",["274","275","276"],[],"F:\\mess-manager\\frontend\\src\\components\\Date.tsx",[],[],"F:\\mess-manager\\frontend\\src\\Screens\\normal\\Dashboard.tsx",["277","278","279","280","281","282","283"],[],{"ruleId":"284","severity":1,"message":"285","line":4,"column":8,"nodeType":"286","messageId":"287","endLine":4,"endColumn":23},{"ruleId":"284","severity":1,"message":"288","line":3,"column":95,"nodeType":"286","messageId":"287","endLine":3,"endColumn":114},{"ruleId":"284","severity":1,"message":"289","line":3,"column":10,"nodeType":"286","messageId":"287","endLine":3,"endColumn":26},{"ruleId":"284","severity":1,"message":"290","line":4,"column":10,"nodeType":"286","messageId":"287","endLine":4,"endColumn":20},{"ruleId":"284","severity":1,"message":"291","line":18,"column":11,"nodeType":"286","messageId":"287","endLine":18,"endColumn":20},{"ruleId":"284","severity":1,"message":"292","line":3,"column":10,"nodeType":"286","messageId":"287","endLine":3,"endColumn":14},{"ruleId":"284","severity":1,"message":"293","line":2,"column":10,"nodeType":"286","messageId":"287","endLine":2,"endColumn":21},{"ruleId":"284","severity":1,"message":"294","line":3,"column":17,"nodeType":"286","messageId":"287","endLine":3,"endColumn":26},{"ruleId":"284","severity":1,"message":"295","line":23,"column":18,"nodeType":"286","messageId":"287","endLine":23,"endColumn":25},{"ruleId":"296","severity":1,"message":"297","line":38,"column":6,"nodeType":"298","endLine":38,"endColumn":8,"suggestions":"299"},{"ruleId":"300","severity":1,"message":"301","line":67,"column":15,"nodeType":"302","endLine":67,"endColumn":58},{"ruleId":"303","severity":1,"message":"304","line":68,"column":17,"nodeType":"302","endLine":72,"endColumn":19},{"ruleId":"300","severity":1,"message":"301","line":86,"column":15,"nodeType":"302","endLine":86,"endColumn":58},{"ruleId":"303","severity":1,"message":"304","line":87,"column":17,"nodeType":"302","endLine":91,"endColumn":19},{"ruleId":"305","severity":1,"message":"306","line":149,"column":21,"nodeType":"307","endLine":149,"endColumn":32},{"ruleId":"284","severity":1,"message":"308","line":12,"column":15,"nodeType":"286","messageId":"287","endLine":12,"endColumn":20},{"ruleId":"296","severity":1,"message":"309","line":64,"column":8,"nodeType":"298","endLine":64,"endColumn":36,"suggestions":"310"},{"ruleId":"284","severity":1,"message":"311","line":1,"column":38,"nodeType":"286","messageId":"287","endLine":1,"endColumn":48},{"ruleId":"284","severity":1,"message":"312","line":32,"column":11,"nodeType":"286","messageId":"287","endLine":32,"endColumn":19},{"ruleId":"284","severity":1,"message":"313","line":35,"column":29,"nodeType":"286","messageId":"287","endLine":35,"endColumn":37},{"ruleId":"296","severity":1,"message":"314","line":55,"column":8,"nodeType":"298","endLine":55,"endColumn":24,"suggestions":"315"},{"ruleId":"284","severity":1,"message":"316","line":14,"column":16,"nodeType":"286","messageId":"287","endLine":14,"endColumn":23},{"ruleId":"296","severity":1,"message":"317","line":28,"column":6,"nodeType":"298","endLine":28,"endColumn":12,"suggestions":"318"},{"ruleId":"284","severity":1,"message":"319","line":20,"column":49,"nodeType":"286","messageId":"287","endLine":20,"endColumn":67},{"ruleId":"296","severity":1,"message":"297","line":77,"column":8,"nodeType":"298","endLine":77,"endColumn":46,"suggestions":"320"},{"ruleId":"284","severity":1,"message":"321","line":4,"column":8,"nodeType":"286","messageId":"287","endLine":4,"endColumn":15},{"ruleId":"284","severity":1,"message":"322","line":22,"column":40,"nodeType":"286","messageId":"287","endLine":22,"endColumn":47},{"ruleId":"296","severity":1,"message":"323","line":55,"column":12,"nodeType":"298","endLine":55,"endColumn":18,"suggestions":"324"},{"ruleId":"305","severity":1,"message":"306","line":145,"column":37,"nodeType":"307","endLine":145,"endColumn":48},{"ruleId":"305","severity":1,"message":"306","line":146,"column":37,"nodeType":"307","endLine":146,"endColumn":48},{"ruleId":"305","severity":1,"message":"306","line":147,"column":37,"nodeType":"307","endLine":147,"endColumn":48},{"ruleId":"296","severity":1,"message":"317","line":33,"column":8,"nodeType":"298","endLine":33,"endColumn":30,"suggestions":"325"},{"ruleId":"284","severity":1,"message":"326","line":46,"column":12,"nodeType":"286","messageId":"287","endLine":46,"endColumn":21},{"ruleId":"284","severity":1,"message":"327","line":46,"column":23,"nodeType":"286","messageId":"287","endLine":46,"endColumn":35},{"ruleId":"284","severity":1,"message":"328","line":1,"column":28,"nodeType":"286","messageId":"287","endLine":1,"endColumn":36},{"ruleId":"296","severity":1,"message":"329","line":20,"column":6,"nodeType":"298","endLine":20,"endColumn":32,"suggestions":"330"},{"ruleId":"300","severity":1,"message":"301","line":82,"column":29,"nodeType":"302","endLine":82,"endColumn":41},{"ruleId":"284","severity":1,"message":"292","line":8,"column":10,"nodeType":"286","messageId":"287","endLine":8,"endColumn":14},{"ruleId":"284","severity":1,"message":"331","line":24,"column":72,"nodeType":"286","messageId":"287","endLine":24,"endColumn":89},{"ruleId":"284","severity":1,"message":"319","line":27,"column":47,"nodeType":"286","messageId":"287","endLine":27,"endColumn":65},{"ruleId":"284","severity":1,"message":"332","line":27,"column":76,"nodeType":"286","messageId":"287","endLine":27,"endColumn":96},{"ruleId":"284","severity":1,"message":"333","line":38,"column":25,"nodeType":"286","messageId":"287","endLine":38,"endColumn":41},{"ruleId":"296","severity":1,"message":"334","line":94,"column":6,"nodeType":"298","endLine":94,"endColumn":35,"suggestions":"335"},{"ruleId":"284","severity":1,"message":"336","line":21,"column":6,"nodeType":"286","messageId":"287","endLine":21,"endColumn":14},{"ruleId":"296","severity":1,"message":"329","line":33,"column":8,"nodeType":"298","endLine":33,"endColumn":34,"suggestions":"337"},{"ruleId":"300","severity":1,"message":"301","line":112,"column":57,"nodeType":"302","endLine":112,"endColumn":69},{"ruleId":"284","severity":1,"message":"338","line":3,"column":17,"nodeType":"286","messageId":"287","endLine":3,"endColumn":30},{"ruleId":"284","severity":1,"message":"339","line":1,"column":23,"nodeType":"286","messageId":"287","endLine":1,"endColumn":36},{"ruleId":"284","severity":1,"message":"289","line":1,"column":10,"nodeType":"286","messageId":"287","endLine":1,"endColumn":26},{"ruleId":"284","severity":1,"message":"339","line":1,"column":41,"nodeType":"286","messageId":"287","endLine":1,"endColumn":54},{"ruleId":"284","severity":1,"message":"289","line":1,"column":10,"nodeType":"286","messageId":"287","endLine":1,"endColumn":26},{"ruleId":"284","severity":1,"message":"339","line":1,"column":41,"nodeType":"286","messageId":"287","endLine":1,"endColumn":54},{"ruleId":"284","severity":1,"message":"340","line":41,"column":6,"nodeType":"286","messageId":"287","endLine":41,"endColumn":15},{"ruleId":"284","severity":1,"message":"341","line":1,"column":8,"nodeType":"286","messageId":"287","endLine":1,"endColumn":13},{"ruleId":"284","severity":1,"message":"342","line":5,"column":12,"nodeType":"286","messageId":"287","endLine":5,"endColumn":16},{"ruleId":"284","severity":1,"message":"316","line":5,"column":18,"nodeType":"286","messageId":"287","endLine":5,"endColumn":25},{"ruleId":"284","severity":1,"message":"295","line":23,"column":18,"nodeType":"286","messageId":"287","endLine":23,"endColumn":25},{"ruleId":"296","severity":1,"message":"297","line":38,"column":6,"nodeType":"298","endLine":38,"endColumn":8,"suggestions":"343"},{"ruleId":"300","severity":1,"message":"301","line":67,"column":15,"nodeType":"302","endLine":67,"endColumn":58},{"ruleId":"303","severity":1,"message":"304","line":68,"column":17,"nodeType":"302","endLine":72,"endColumn":19},{"ruleId":"300","severity":1,"message":"301","line":86,"column":15,"nodeType":"302","endLine":86,"endColumn":58},{"ruleId":"303","severity":1,"message":"304","line":87,"column":17,"nodeType":"302","endLine":91,"endColumn":19},{"ruleId":"305","severity":1,"message":"306","line":149,"column":21,"nodeType":"307","endLine":149,"endColumn":32},"@typescript-eslint/no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","'userAttendanceSlice' is defined but never used.","'createAsyncThunk' is defined but never used.","'AxiosError' is defined but never used.","'userLogin' is defined but never used.","'Link' is defined but never used.","'useSelector' is defined but never used.","'useEffect' is defined but never used.","'loading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["344"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","jsx-a11y/scope","The scope prop can only be used on <th> elements.","JSXAttribute","'IUser' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'navigate', 'user?.email', 'user?.hostel', 'user?.id', 'user?.isAdmin', 'user?.phone', 'user?.room', and 'user?.username'. Either include them or remove the dependency array.",["345"],"'useReducer' is defined but never used.","'redirect' is assigned a value but never used.","'userInfo' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["346"],"'setDate' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'month', and 'year'. Either include them or remove the dependency array.",["347"],"'getAttendanceError' is assigned a value but never used.",["348"],"'Message' is defined but never used.","'success' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'month', 'today', and 'year'. Either include them or remove the dependency array.",["349"],["350"],"'billPayed' is assigned a value but never used.","'setBillPayed' is assigned a value but never used.","'useState' is defined but never used.","React Hook useEffect has an unnecessary dependency: 'useAppSelector'. Either exclude it or remove the dependency array. Outer scope values like 'useAppSelector' aren't valid dependencies because mutating them doesn't re-render the component.",["351"],"'attendanceLoading' is assigned a value but never used.","'getAttendanceLoading' is assigned a value but never used.","'setTotalGrandPrs' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'navigate', and 'today'. Either include them or remove the dependency array.",["352"],"'messMenu' is defined but never used.",["353"],"'writeFileXLSX' is defined but never used.","'PayloadAction' is defined but never used.","'TExpenses' is defined but never used.","'React' is defined but never used.","'date' is assigned a value but never used.",["354"],{"desc":"355","fix":"356"},{"desc":"357","fix":"358"},{"desc":"359","fix":"360"},{"desc":"361","fix":"362"},{"desc":"363","fix":"364"},{"desc":"365","fix":"366"},{"desc":"367","fix":"368"},{"desc":"355","fix":"369"},{"desc":"370","fix":"371"},{"desc":"355","fix":"372"},{"desc":"355","fix":"373"},"Update the dependencies array to be: [dispatch]",{"range":"374","text":"375"},"Update the dependencies array to be: [successUpdate, success, id, user?.username, user?.id, user?.email, user?.isAdmin, user?.room, user?.phone, user?.hostel, dispatch, navigate]",{"range":"376","text":"377"},"Update the dependencies array to be: [error, navigate, success]",{"range":"378","text":"379"},"Update the dependencies array to be: [date, dispatch, month, year]",{"range":"380","text":"381"},"Update the dependencies array to be: [date, dispatch, errorExpenses, successExpenses]",{"range":"382","text":"383"},"Update the dependencies array to be: [date, dispatch, month, today, year]",{"range":"384","text":"385"},"Update the dependencies array to be: [date, addBillSuccess, dispatch, year, month]",{"range":"386","text":"387"},{"range":"388","text":"375"},"Update the dependencies array to be: [attendanceSuccess, dispatch, navigate, today, userInfo]",{"range":"389","text":"390"},{"range":"391","text":"375"},{"range":"392","text":"375"},[1137,1139],"[dispatch]",[1906,1934],"[successUpdate, success, id, user?.username, user?.id, user?.email, user?.isAdmin, user?.room, user?.phone, user?.hostel, dispatch, navigate]",[1556,1572],"[error, navigate, success]",[1016,1022],"[date, dispatch, month, year]",[2689,2727],"[date, dispatch, errorExpenses, successExpenses]",[1942,1948],"[date, dispatch, month, today, year]",[1178,1200],"[date, addBillSuccess, dispatch, year, month]",[558,584],[2700,2729],"[attendanceSuccess, dispatch, navigate, today, userInfo]",[904,930],[1137,1139]]