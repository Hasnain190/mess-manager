[{"F:\\mess-manager\\frontend\\src\\index.tsx":"1","F:\\mess-manager\\frontend\\src\\app\\store.ts":"2","F:\\mess-manager\\frontend\\src\\App.tsx":"3","F:\\mess-manager\\frontend\\src\\reportWebVitals.ts":"4","F:\\mess-manager\\frontend\\src\\features\\user\\user_slice.ts":"5","F:\\mess-manager\\frontend\\src\\Screens\\Home.tsx":"6","F:\\mess-manager\\frontend\\src\\Screens\\login.tsx":"7","F:\\mess-manager\\frontend\\src\\components\\Navbar.tsx":"8","F:\\mess-manager\\frontend\\src\\Screens\\normal\\dashboard.tsx":"9","F:\\mess-manager\\frontend\\src\\Screens\\admin\\users\\EditUser.tsx":"10","F:\\mess-manager\\frontend\\src\\Screens\\admin\\users\\AddUsers.tsx":"11","F:\\mess-manager\\frontend\\src\\Screens\\admin\\users\\ViewUsers.tsx":"12","F:\\mess-manager\\frontend\\src\\Screens\\admin\\expenses\\ThisMonthBill.tsx":"13","F:\\mess-manager\\frontend\\src\\Screens\\admin\\expenses\\TodayExpenses.tsx":"14","F:\\mess-manager\\frontend\\src\\Screens\\admin\\expenses\\MonthlyExpenses.tsx":"15","F:\\mess-manager\\frontend\\src\\Screens\\admin\\expenses\\BillForm.tsx":"16","F:\\mess-manager\\frontend\\src\\Screens\\admin\\attendances\\MonthlyAttendance.tsx":"17","F:\\mess-manager\\frontend\\src\\Screens\\admin\\mess\\ViewMess.tsx":"18","F:\\mess-manager\\frontend\\src\\Screens\\admin\\attendances\\markAttendance.tsx":"19","F:\\mess-manager\\frontend\\src\\Screens\\admin\\mess\\UpdateMess.tsx":"20","F:\\mess-manager\\frontend\\src\\components\\Loader.tsx":"21","F:\\mess-manager\\frontend\\src\\components\\Message.tsx":"22","F:\\mess-manager\\frontend\\src\\components\\ConvertToWeekDay.tsx":"23","F:\\mess-manager\\frontend\\src\\components\\counter.ts":"24","F:\\mess-manager\\frontend\\src\\components\\Downloader.tsx":"25","F:\\mess-manager\\frontend\\src\\Screens\\admin\\attendances\\DailyAttendance.tsx":"26","F:\\mess-manager\\frontend\\src\\Screens\\admin\\attendances\\AttendanceSheet.tsx":"27","F:\\mess-manager\\frontend\\src\\app\\hooks.ts":"28","F:\\mess-manager\\frontend\\src\\features\\mess\\mess_slice.ts":"29","F:\\mess-manager\\frontend\\src\\features\\attendance\\attendance_slice.ts":"30","F:\\mess-manager\\frontend\\src\\features\\expenses\\expenses_slice.ts":"31","F:\\mess-manager\\frontend\\src\\features\\user\\user_actions_creators.ts":"32","F:\\mess-manager\\frontend\\src\\features\\mess\\mess_actions_creators.ts":"33","F:\\mess-manager\\frontend\\src\\features\\expenses\\expenses_actions_creators.ts":"34","F:\\mess-manager\\frontend\\src\\features\\attendance\\attendance_actions_creators.ts":"35","F:\\mess-manager\\frontend\\src\\components\\IdToStudent.tsx":"36","F:\\mess-manager\\frontend\\src\\components\\Today.tsx":"37","F:\\mess-manager\\frontend\\src\\components\\Date.tsx":"38","F:\\mess-manager\\frontend\\src\\Screens\\normal\\Dashboard.tsx":"39","F:\\mess-manager\\frontend\\src\\components\\ExcelMeta\\ThisMonthBill.ts":"40","F:\\mess-manager\\frontend\\src\\components\\ConvertToMonth.ts":"41","F:\\mess-manager\\frontend\\src\\components\\ExcelMeta\\Menu.ts":"42","F:\\mess-manager\\frontend\\src\\components\\ExcelMeta\\Attendance.ts":"43","F:\\mess-manager\\frontend\\src\\components\\ExcelMeta\\MonthlyExpenses.ts":"44"},{"size":658,"mtime":1674596616355,"results":"45","hashOfConfig":"46"},{"size":2065,"mtime":1690556338584,"results":"47","hashOfConfig":"46"},{"size":2546,"mtime":1690507034410,"results":"48","hashOfConfig":"46"},{"size":382,"mtime":1674163964708,"results":"49","hashOfConfig":"46"},{"size":6656,"mtime":1690634015518,"results":"50","hashOfConfig":"46"},{"size":1839,"mtime":1690507068234,"results":"51","hashOfConfig":"46"},{"size":3207,"mtime":1687547750165,"results":"52","hashOfConfig":"46"},{"size":5341,"mtime":1685882608024,"results":"53","hashOfConfig":"46"},{"size":4500,"mtime":1675109019926,"results":"54","hashOfConfig":"46"},{"size":9346,"mtime":1689505565237,"results":"55","hashOfConfig":"46"},{"size":6138,"mtime":1690614262566,"results":"56","hashOfConfig":"46"},{"size":2921,"mtime":1689504896842,"results":"57","hashOfConfig":"46"},{"size":3580,"mtime":1690630690058,"results":"58","hashOfConfig":"46"},{"size":12421,"mtime":1690557477612,"results":"59","hashOfConfig":"46"},{"size":6368,"mtime":1690636358410,"results":"60","hashOfConfig":"46"},{"size":5141,"mtime":1690637226494,"results":"61","hashOfConfig":"46"},{"size":1847,"mtime":1686681731635,"results":"62","hashOfConfig":"46"},{"size":3224,"mtime":1690633508474,"results":"63","hashOfConfig":"46"},{"size":12380,"mtime":1690633028962,"results":"64","hashOfConfig":"46"},{"size":4870,"mtime":1688609829289,"results":"65","hashOfConfig":"46"},{"size":329,"mtime":1674169213216,"results":"66","hashOfConfig":"46"},{"size":234,"mtime":1674169232580,"results":"67","hashOfConfig":"46"},{"size":227,"mtime":1674168890891,"results":"68","hashOfConfig":"46"},{"size":618,"mtime":1690538979431,"results":"69","hashOfConfig":"46"},{"size":3025,"mtime":1690632521749,"results":"70","hashOfConfig":"46"},{"size":998,"mtime":1690635077813,"results":"71","hashOfConfig":"46"},{"size":2411,"mtime":1690635553593,"results":"72","hashOfConfig":"46"},{"size":413,"mtime":1674255627401,"results":"73","hashOfConfig":"46"},{"size":1534,"mtime":1690632857262,"results":"74","hashOfConfig":"46"},{"size":3942,"mtime":1690556215800,"results":"75","hashOfConfig":"46"},{"size":4527,"mtime":1690633711580,"results":"76","hashOfConfig":"46"},{"size":9163,"mtime":1690614000507,"results":"77","hashOfConfig":"46"},{"size":1801,"mtime":1685561335711,"results":"78","hashOfConfig":"46"},{"size":4594,"mtime":1690401342098,"results":"79","hashOfConfig":"46"},{"size":4647,"mtime":1690556274849,"results":"80","hashOfConfig":"46"},{"size":617,"mtime":1674785657156,"results":"81","hashOfConfig":"46"},{"size":203,"mtime":1674691081324,"results":"82","hashOfConfig":"46"},{"size":4,"mtime":1675104297899,"results":"83","hashOfConfig":"46"},{"size":4500,"mtime":1675109019926,"results":"84","hashOfConfig":"46"},{"size":104,"mtime":1690628523448,"results":"85","hashOfConfig":"46"},{"size":228,"mtime":1690630677737,"results":"86","hashOfConfig":"46"},{"size":147,"mtime":1690631892442,"results":"87","hashOfConfig":"46"},{"size":97,"mtime":1690634163365,"results":"88","hashOfConfig":"46"},{"size":103,"mtime":1690635695109,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},"1lcf99c",{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"115"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"115"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156"},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160"},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164"},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192"},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196"},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"218","messages":"219","suppressedMessages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","suppressedMessages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"115"},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","suppressedMessages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","suppressedMessages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","suppressedMessages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","suppressedMessages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\mess-manager\\frontend\\src\\index.tsx",["239"],[],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { Provider } from \"react-redux\";\r\n// import store from \"./store\";\r\nimport { store } from \"./app/store\";\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n","F:\\mess-manager\\frontend\\src\\app\\store.ts",["240"],[],"import { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nimport { userLoginSlice, userRegisterSlice, userDetailsSlice, userListSlice, userDeleteSlice, userAttendanceSlice, userUpdateSlice, userUpdateProfileSlice } from \"../features/user/user_slice\";\r\n\r\nimport { messMenuSlice, messMenuUpdateSlice } from \"../features/mess/mess_slice\";\r\n\r\n\r\nimport { postAttendanceSlice, getAttendanceSlice, getMonthlyAttendanceSlice, getDailyAttendanceSlice, getFirstAndSecondSlice } from \"../features/attendance/attendance_slice\";\r\nimport { addExpensesSlice, getExpensesPerMonthSlice, getMessBillSlice, getSumSlice, postPayingBillSlice } from \"../features/expenses/expenses_slice\";\r\n\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        // user reducers\r\n        userLogin: userLoginSlice.reducer,\r\n        userRegister: userRegisterSlice.reducer,\r\n\r\n        userDetails: userDetailsSlice.reducer,\r\n        userUpdateProfile: userUpdateProfileSlice.reducer,\r\n        userList: userListSlice.reducer,\r\n        userDelete: userDeleteSlice.reducer,\r\n        userUpdate: userUpdateSlice.reducer,\r\n\r\n\r\n\r\n        // userPasswordReset:userPasswordResetReducer,\r\n        // userPasswordResetConfirm:userPasswordResetConfirmReducer,\r\n\r\n        // mess reducers\r\n        messMenu: messMenuSlice.reducer,\r\n        updateMessMenu: messMenuUpdateSlice.reducer,\r\n\r\n        // attendance reducers\r\n        attendance: postAttendanceSlice.reducer,\r\n        getAttendance: getAttendanceSlice.reducer,\r\n        getMonthlyAttendance: getMonthlyAttendanceSlice.reducer,\r\n        getDailyAttendance: getDailyAttendanceSlice.reducer,\r\n        getFirstAndSecond: getFirstAndSecondSlice.reducer,\r\n\r\n        // expense\r\n\r\n        getSum: getSumSlice.reducer,\r\n        addExpenses: addExpensesSlice.reducer,\r\n        getExpensesPerMonth: getExpensesPerMonthSlice.reducer,\r\n\r\n        getMessBill: getMessBillSlice.reducer,\r\n        addBill: postPayingBillSlice.reducer,\r\n    }\r\n\r\n})\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n","F:\\mess-manager\\frontend\\src\\App.tsx",[],[],"F:\\mess-manager\\frontend\\src\\reportWebVitals.ts",[],[],"F:\\mess-manager\\frontend\\src\\features\\user\\user_slice.ts",["241","242"],[],"// DUCKS pattern\r\n\r\nimport { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { AxiosError } from \"axios\";\r\nimport { UserInfo } from \"../../types/userTypes\";\r\n\r\nconst userInfoFromStorage: UserInfo | null = localStorage.getItem(\"userInfo\") !== null\r\n  ? JSON.parse(localStorage.getItem(\"userInfo\")!)\r\n  : null;\r\n\r\nexport const userLoginSlice = createSlice({\r\n\r\n  name: 'user-login',\r\n  initialState: {\r\n    loading: false,\r\n    error: null,\r\n    userInfo: userInfoFromStorage,\r\n    success: false,\r\n\r\n  },\r\n\r\n  reducers: {\r\n    // user login pending/request\r\n    loginRequest(state) {\r\n      state.loading = true;\r\n      state.userInfo = null\r\n\r\n    },\r\n    // user login success\r\n    loginSuccess(state, action: PayloadAction<UserInfo>) {\r\n      state.loading = false;\r\n      state.userInfo = action.payload;\r\n      state.success = true;\r\n    },\r\n\r\n\r\n    loginFail(state, action: PayloadAction<any>) {\r\n      state.loading = false;\r\n      state.error = action.payload\r\n    },\r\n    // user logout\r\n    logoutAction() { }\r\n  }\r\n})\r\n\r\nexport const { loginRequest, loginFail, loginSuccess, logoutAction } = userLoginSlice.actions\r\n\r\n\r\n\r\n\r\nexport const userRegisterSlice = createSlice({\r\n\r\n  name: 'user-register',\r\n  initialState: {\r\n    loading: false,\r\n    success: false,\r\n    userInfo: {},\r\n    error: null\r\n\r\n  },\r\n\r\n  reducers: {\r\n    // user register pending/request\r\n    registerRequest(state) {\r\n      state.loading = true;\r\n    },\r\n    // user register success\r\n    registerSuccess(state, action: PayloadAction<UserInfo>) {\r\n      state.loading = false;\r\n      state.success = true;\r\n      state.userInfo = action.payload\r\n    },\r\n\r\n    // user login failed\r\n    registerFail(state, action) {\r\n      state.loading = false;\r\n      state.error = action.payload\r\n    }\r\n\r\n  }\r\n})\r\n\r\nexport const { registerRequest, registerFail, registerSuccess } = userRegisterSlice.actions\r\nconst initialState = {\r\n  user: {\r\n    id: 0,\r\n    username: '',\r\n    email: '',\r\n    room: 0,\r\n    hostel: '',\r\n    phone: '',\r\n    security_fee: 0,\r\n    isAdmin: false\r\n  },\r\n  loading: false,\r\n  error: null,\r\n  success: false\r\n\r\n}\r\n// get details for a particular user\r\nexport const userDetailsSlice = createSlice({\r\n  name: 'user-details',\r\n  initialState,\r\n\r\n  reducers: {\r\n\r\n    detailsRequest(state) {\r\n      state.loading = true\r\n    },\r\n\r\n    detailsSuccess(state, action: PayloadAction<UserInfo>) {\r\n\r\n      state.loading = false;\r\n      state.user = action.payload;\r\n      state.success = true;\r\n    },\r\n    detailsFail(state, action) { state.loading = false; state.error = action.payload; },\r\n\r\n    detailsReset(state) { state.user = initialState.user; state.loading = false; state.success = false; state.error = null }\r\n\r\n  }\r\n})\r\nexport const { detailsRequest, detailsFail, detailsSuccess, detailsReset } = userDetailsSlice.actions\r\n\r\n\r\n// update user profile\r\nexport const userUpdateProfileSlice = createSlice({\r\n  name: 'user-update-profile',\r\n  initialState: {\r\n    userInfo: userInfoFromStorage,\r\n    loading: false,\r\n    error: null,\r\n    success: false\r\n  },\r\n  reducers: {\r\n\r\n    updateProfileRequest(state) {\r\n      state.loading = true\r\n    },\r\n    updateProfileSuccess(state, action: PayloadAction<UserInfo>) {\r\n      state.loading = false;\r\n      state.userInfo = action.payload;\r\n      state.success = true;\r\n\r\n    },\r\n    updateProfileFail(state, action) { state.loading = false; state.error = action.payload },\r\n\r\n\r\n\r\n  }\r\n})\r\nexport const { updateProfileRequest, updateProfileFail, updateProfileSuccess } = userUpdateProfileSlice.actions\r\n\r\nexport const userDeleteSlice = createSlice({\r\n  name: 'user-delete',\r\n  initialState: {\r\n\r\n    loading: false,\r\n    error: null,\r\n    success: false\r\n  },\r\n  reducers: {\r\n    deleteRequest(state) { state.loading = true },\r\n    deleteSuccess(state) { state.loading = false; state.success = true },\r\n    deleteFail(state, action) { state.loading = false; state.error = action.payload },\r\n  }\r\n})\r\nexport const { deleteRequest, deleteFail, deleteSuccess } = userDeleteSlice.actions\r\n\r\nexport const userUpdateSlice = createSlice({\r\n\r\n  name: 'update',\r\n  initialState: {\r\n    loading: false,\r\n    success: false,\r\n    user: {},\r\n    error: null\r\n\r\n  },\r\n\r\n  reducers: {\r\n    // user update pending/request\r\n    updateRequest(state) {\r\n      state.loading = true;\r\n    },\r\n    // user update success\r\n    updateSuccess(state, action: PayloadAction<UserInfo>) {\r\n      state.loading = false;\r\n      state.success = true;\r\n      state.user = action.payload\r\n    },\r\n\r\n    // update failed\r\n    updateFail(state, action) {\r\n      state.loading = false;\r\n      state.error = action.payload\r\n    },\r\n    updateReset(state) {\r\n      // state.loading = false;\r\n      state.user = initialState.user;\r\n      state.success = false;\r\n    }\r\n\r\n  }\r\n})\r\n\r\nexport const { updateRequest, updateSuccess, updateFail, updateReset } = userUpdateSlice.actions\r\n\r\n\r\n// get the attendance of user\r\n\r\nexport const userAttendanceSlice = createSlice({\r\n\r\n  name: 'user-attendance',\r\n  initialState: {\r\n    loading: false,\r\n    success: false,\r\n\r\n    error: null\r\n\r\n  },\r\n\r\n  reducers: {\r\n    // user userAttendance pending/request\r\n    attendanceRequest(state) {\r\n      state.loading = true;\r\n    },\r\n    // user userAttendance success\r\n    attendanceSuccess(state) {\r\n      state.loading = false;\r\n\r\n      state.success = true;\r\n    },\r\n\r\n    //  failed\r\n    attendanceFail(state, action) {\r\n      state.loading = false;\r\n      state.error = action.payload\r\n    }\r\n\r\n  }\r\n})\r\n\r\nexport const { attendanceRequest, attendanceFail, attendanceSuccess } = userAttendanceSlice.actions\r\n\r\n\r\n\r\n// get list of user \r\nexport const userListSlice = createSlice({\r\n\r\n  name: 'user-list',\r\n  initialState: {\r\n    loading: false,\r\n    success: false,\r\n    users: [\r\n\r\n\r\n      {\r\n        id: 0,\r\n        username: '',\r\n        email: '',\r\n        room: 0,\r\n        hostel: '',\r\n        phone: '',\r\n        security_fee: \"0.00\",\r\n        isAdmin: false\r\n      },\r\n\r\n    ],\r\n    error: null\r\n\r\n  },\r\n\r\n  reducers: {\r\n    // user list pending/request\r\n    listRequest(state) {\r\n      state.loading = true;\r\n    },\r\n    // user List success\r\n    listSuccess(state, action) {\r\n      state.loading = false;\r\n      state.success = true;\r\n      state.users = action.payload\r\n    },\r\n\r\n    // usList failed\r\n    listFail(state, action) {\r\n      state.loading = false;\r\n      state.error = action.payload\r\n    },\r\n    // usList failed\r\n    listReset(state) {\r\n\r\n      state.users = []\r\n    }\r\n  }\r\n})\r\n\r\nexport const { listRequest, listFail, listSuccess, listReset } = userListSlice.actions\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","F:\\mess-manager\\frontend\\src\\Screens\\Home.tsx",[],[],"F:\\mess-manager\\frontend\\src\\Screens\\login.tsx",["243"],[],"import React, { useState, useEffect } from \"react\";\r\nimport './login.css'\r\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\r\n\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { login } from \"../features/user/user_actions_creators\";\r\n\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../app/hooks\";\r\n\r\nfunction Login() {\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const location = useLocation()\r\n    const navigate = useNavigate()\r\n\r\n    const redirect = location.search ? location.search.split('=')[1] : '/dashboard'\r\n\r\n    const userLogin = useAppSelector(state => state.userLogin)\r\n    const { error, loading, userInfo } = userLogin\r\n\r\n    useEffect(() => {\r\n\r\n        // if (userInfo && userInfo !== []) {\r\n        if (userInfo) {\r\n            navigate(redirect)\r\n\r\n        }\r\n    }, [navigate, userInfo, redirect])\r\n\r\n    const submitHandler = (e: any) => {\r\n        e.preventDefault()\r\n        dispatch(login(username, password))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6 mx-auto\">\r\n                    <div className=\"card card-body\">\r\n                        <h3 className=\"text-center mb-4\">\r\n                            <i className=\"fas fa-user-plus\"></i> Login</h3>\r\n                        {error! && <Message variant='danger'>There is some error here</Message>}\r\n                        {loading && <Loader />}\r\n\r\n                        <form onSubmit={submitHandler}>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"username\">User Name</label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    id=\"username\"\r\n                                    placeholder=\"Enter username\"\r\n                                    value={username}\r\n                                    onChange={(e) => setUsername(e.target.value)}\r\n\r\n\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"password\">Password</label>\r\n                                <input\r\n                                    type=\"password\"\r\n                                    className=\"form-control\"\r\n                                    id=\"password\"\r\n                                    placeholder=\"Enter Password\"\r\n                                    value={password}\r\n                                    onChange={(e) => setPassword(e.target.value)}\r\n\r\n\r\n                                />\r\n                            </div>\r\n\r\n                            <button type=\"submit\" className=\"btn btn-primary btn-block\">\r\n                                login</button>\r\n                        </form>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Login\r\n",[],"F:\\mess-manager\\frontend\\src\\components\\Navbar.tsx",["244","245"],[],"// make a react component for navbar\r\nimport { useSelector } from \"react-redux\";\r\nimport React, { useEffect } from \"react\";\r\nimport \"./navbar.css\";\r\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\r\nimport { useAppDispatch, useAppSelector } from '../app/hooks'\r\n\r\n\r\nimport { logout } from \"../features/user/user_actions_creators\";\r\nfunction Navbar() {\r\n\r\n  const { userInfo } = useAppSelector((state) => state.userLogin);\r\n  const navigate = useNavigate()\r\n  const location = useLocation()\r\n  const currentPath = location.pathname;\r\n\r\n  const dispatch = useAppDispatch();\r\n  const logoutHandler = () => {\r\n    dispatch(logout());\r\n    navigate('/')\r\n    window.location.reload()\r\n    // navigate()\r\n\r\n  }\r\n\r\n\r\n  return (\r\n\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n\r\n      <Link className=\"navbar-brand\" to=\"/\">\r\n        Mess Manager\r\n      </Link>\r\n\r\n      <button\r\n        className=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#navbarNav\"\r\n        aria-controls=\"navbarNav\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\"\r\n      >\r\n\r\n        <span className=\"navbar-toggler-icon\" />\r\n      </button>\r\n\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n\r\n        <ul className=\"navbar-nav\">\r\n\r\n          {!userInfo && (\r\n\r\n\r\n            <li className=\"nav-item\">\r\n\r\n              <Link className=\"nav-link\" to=\"/login\">\r\n                Login\r\n              </Link>\r\n\r\n            </li>\r\n          )\r\n\r\n          }\r\n\r\n          {userInfo && userInfo.id !== 0 && (\r\n\r\n            <>\r\n\r\n              <li className=\"nav-item\">\r\n\r\n                <button className=\"btn btn-danger\" onClick={logoutHandler}>Logout</button>\r\n              </li>\r\n\r\n\r\n              <li className=\"nav-item\">\r\n\r\n                <Link className=\"nav-link\" to=\"/dashboard\">\r\n                  Your Dash Board\r\n                </Link>\r\n              </li>\r\n\r\n              <Link className=\"dropdown-item\" to=\"/admin/view-mess\">\r\n                View Mess\r\n              </Link>\r\n            </>\r\n          )}\r\n\r\n          {userInfo && userInfo.isAdmin && (\r\n\r\n            <>\r\n              {/* make a drop down menu */}\r\n\r\n              <div className=\"dropdown\">\r\n\r\n                <button\r\n                  className=\"btn btn-secondary dropdown-toggle\"\r\n                  type=\"button\"\r\n                  id=\"dropdownMenuButton\"\r\n                  data-toggle=\"dropdown\"\r\n                  aria-haspopup=\"true\"\r\n                  aria-expanded=\"false\"\r\n                >\r\n                  Admin\r\n                </button>\r\n\r\n                <div className=\"dropdown-menu \" aria-labelledby=\"dropdownMenuButton\">\r\n\r\n                  <Link\r\n                    className={`dropdown-item ${currentPath === '/admin/add-user' ? 'active' : ''}`}\r\n                    to=\"/admin/add-user\"\r\n                  >\r\n                    Add User\r\n                  </Link>\r\n\r\n\r\n                  <Link className={`dropdown-item ${currentPath === '/admin/view-users' ? 'active' : ''}`} to=\"/admin/view-users\">\r\n                    View Users\r\n                  </Link>\r\n\r\n\r\n                  <div className=\"dropdown-divider\"></div>\r\n\r\n\r\n                  <Link className={`dropdown-item ${currentPath === '/admin/view-mess' ? 'active' : ''}`} to=\"/admin/view-mess\">\r\n                    View Mess\r\n                  </Link>\r\n\r\n\r\n                  <Link className={`dropdown-item ${currentPath === '/admin/mark-attendance' ? 'active' : ''}`} to=\"/admin/mark-attendance\">\r\n                    Mark Attendance\r\n                  </Link>\r\n\r\n                  <div className=\"dropdown-divider\"></div>\r\n\r\n\r\n                  <Link\r\n                    className={`dropdown-item ${currentPath === '/admin/monthly-attendance' ? 'active' : ''}`}\r\n                    to=\"/admin/monthly-attendance\"\r\n                  >\r\n                    See Monthly Attendances\r\n                  </Link>\r\n\r\n                  <div className=\"dropdown-divider\"></div>\r\n\r\n                  <Link\r\n                    className={`dropdown-item ${currentPath === '/admin/expenses/today' ? 'active' : ''}`}\r\n                    to=\"/admin/expenses/today\"\r\n                  >\r\n                    Today's Expenses\r\n                  </Link>\r\n                  <Link\r\n                    className={`dropdown-item ${currentPath === '/admin/expenses/monthly' ? 'active' : ''}`}\r\n                    to=\"/admin/expenses/monthly\"\r\n                  >\r\n                    Expenses By Month\r\n                  </Link>\r\n                  <Link\r\n                    className={`dropdown-item ${currentPath === '/admin/bill-of-month' ? 'active' : ''}`}\r\n                    to=\"/admin/bill-of-month\"\r\n                  >\r\n                    This Month's Bill\r\n                  </Link>\r\n\r\n                  <div className=\"dropdown-divider\"></div>\r\n\r\n                  <Link\r\n                    className={`dropdown-item ${currentPath === '/admin/expenses/bill-form/' ? 'active' : ''}`}\r\n                    to=\"/admin/expenses/bill-form/\"\r\n                  >\r\n                    Bill Form\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n\r\n            </>\r\n          )}\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","F:\\mess-manager\\frontend\\src\\Screens\\normal\\dashboard.tsx",["246","247","248","249","250","251","252"],[],"\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"./dashboard-cards.css\";\r\n\r\nimport { getMessMenu } from '../../features/mess/mess_actions_creators'\r\nimport Loader from \"../../components/Loader\";\r\nimport Message from \"../../components/Message\";\r\nimport ConvertToWeekDay from \"../../components/ConvertToWeekDay\"\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\n\r\n\r\nfunction Dashboard() {\r\n  const dispatch = useAppDispatch();\r\n  const today = new Date().toISOString().slice(0, 7); //2023-01-23\r\n\r\n\r\n  const [dateState, setDateState] = useState(new Date());\r\n\r\n\r\n\r\n  const { messMenu, loading: loadingMessMenu, error: errorMessMenu } = useAppSelector((state) => state.messMenu);\r\n  const userLogin = useAppSelector((state) => state.userLogin);\r\n  const { error, loading, userInfo } = userLogin;\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const [todaysMess] = messMenu.filter((item: any) => item.day === Intl.DateTimeFormat('en', { weekday: 'long' }).format(new Date(`${today}`)))\r\n  // e.g. it item.day === \"sunday\" \r\n\r\n  useEffect(() => {\r\n    setInterval(() => setDateState(new Date()), 1000);\r\n\r\n    dispatch(getMessMenu())\r\n\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <h2>Welcome</h2>\r\n      <h3>{userInfo?.username}</h3>\r\n      <div>\r\n        Today's Date : <code> {today}</code>\r\n      </div>\r\n      <div>\r\n        Today's time :{\" \"}\r\n        <code>\r\n          {dateState.toLocaleTimeString('en-US')}\r\n          {/*  Expected output: \"1:15:30 AM\" */}\r\n        </code>\r\n      </div>\r\n\r\n      {/* today's menu  */}\r\n\r\n      {loadingMessMenu ? <Loader></Loader> : errorMessMenu ? <Message >{error}</Message> :\r\n\r\n\r\n        <section className=\"light\">\r\n          <div className=\"container py-2\">\r\n            <div className=\"h1 text-center text-dark\" id=\"pageHeaderTitle\">\r\n              What's on <ConvertToWeekDay number={today} />\r\n            </div>\r\n\r\n            <article className=\"postcard light blue\">\r\n              <a className=\"postcard__img_link\" href=\"#\">\r\n                <img\r\n                  className=\"postcard__img\"\r\n                  src=\"https://picsum.photos/1000/1000\"\r\n                  alt=\"Image Title\"\r\n                />\r\n              </a>\r\n              <div className=\"postcard__text t-dark\">\r\n                <h1 className=\"postcard__title blue\">Lunch</h1>\r\n\r\n                <div className=\"postcard__preview-txt\">\r\n                  <ul className=\"list-group\">\r\n                    <li className=\"list-group-item\">{todaysMess?.first_time}</li>\r\n\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n            </article>\r\n            <article className=\"postcard light blue\">\r\n              <a className=\"postcard__img_link\" href=\"#\">\r\n                <img\r\n                  className=\"postcard__img\"\r\n                  src=\"https://picsum.photos/1000/1000\"\r\n                  alt=\"Image Title\"\r\n                />\r\n              </a>\r\n              <div className=\"postcard__text t-dark\">\r\n                <h1 className=\"postcard__title blue\">Dinner</h1>\r\n\r\n                <div className=\"postcard__preview-txt\">\r\n                  <ul className=\"list-group\">\r\n                    <li className=\"list-group-item\">{todaysMess?.second_time}</li>\r\n\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n            </article>\r\n\r\n          </div>\r\n        </section>\r\n\r\n        // )}\r\n      }\r\n\r\n\r\n      {/* table for this month's bill */}\r\n      <section className=\"light\">\r\n        <div className=\"container py-2\">\r\n          <div className=\"h1 text-center text-dark\" id=\"pageHeaderTitle\">\r\n            Your Bill\r\n          </div>\r\n          {/* download pdf button */}\r\n\r\n          <div className=\"text-end\">\r\n\r\n            <button className=\"btn btn-primary\">Download PDF</button>\r\n          </div>\r\n\r\n          <table className=\"table table-striped\">\r\n\r\n            <thead>\r\n\r\n              <tr>\r\n\r\n                <th scope=\"col\">#</th>\r\n\r\n                <th scope=\"col\">Month</th>\r\n\r\n                <th scope=\"col\">Total</th>\r\n\r\n                <th scope=\"col\">Paid</th>\r\n\r\n                <th scope=\"col\">Due</th>\r\n              </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n\r\n              <tr className=\"table-primary\">\r\n\r\n                <th scope=\"row\">0</th>\r\n\r\n                <td scope=\"row\">March</td>\r\n\r\n                <td>4000</td>\r\n              </tr>\r\n\r\n\r\n\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </section>\r\n\r\n\r\n\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","F:\\mess-manager\\frontend\\src\\Screens\\admin\\users\\EditUser.tsx",["253","254"],[],"import React, { useState, useEffect } from 'react'\r\nimport { Link, useParams, useNavigate } from 'react-router-dom'\r\n\r\nimport { useAppDispatch, useAppSelector } from '../../../app/hooks'\r\nimport Loader from '../../../components/Loader'\r\nimport Message from '../../../components/Message'\r\nimport { getUserDetails, updateUser } from '../../../features/user/user_actions_creators'\r\nimport { detailsReset, updateReset } from '../../../features/user/user_slice'\r\n\r\n\r\nexport default function EditUser() {\r\n\r\n\r\n    const { id } = useParams()\r\n    const navigate = useNavigate()\r\n\r\n    const userDetails = useAppSelector(state => state.userDetails)\r\n    const { error, loading, user, success } = userDetails\r\n\r\n    const [username, setUsername] = useState(user.username)\r\n    const [email, setEmail] = useState(user.email)\r\n    const [room, setRoom] = useState(user.room)\r\n    const [phone, setPhone] = useState(user.phone)\r\n    const [hostel, setHostel] = useState(user.hostel)\r\n    const [isAdmin, setIsAdmin] = useState(user.isAdmin)\r\n    const [securityFee, setSecurityFee] = useState(user.security_fee || 0)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n\r\n    const userUpdate = useAppSelector(state => state.userUpdate)\r\n    const { error: errorUpdate, loading: loadingUpdate, success: successUpdate } = userUpdate\r\n\r\n    useEffect(() => {\r\n\r\n\r\n\r\n\r\n        if (!user?.username || user?.id !== Number(id)) {\r\n            dispatch(getUserDetails(id))\r\n        }\r\n        else {\r\n            setUsername(user?.username)\r\n            setEmail(user?.email)\r\n            setIsAdmin(user?.isAdmin)\r\n            setRoom(user?.room)\r\n            setPhone(user?.phone)\r\n            setHostel(user?.hostel)\r\n            setSecurityFee(user?.security_fee)\r\n\r\n        }\r\n\r\n\r\n        if (successUpdate) {\r\n            dispatch(updateReset())\r\n            navigate(\"/admin/view-users/\")\r\n        }\r\n\r\n\r\n    }, [id, user, success, successUpdate])\r\n\r\n\r\n\r\n\r\n    const submitHandler = (e: any) => {\r\n        e.preventDefault()\r\n        dispatch(updateUser({ id: id, username, email, hostel, room, phone, isAdmin, securityFee }))\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n        <>\r\n\r\n            <Link to='/admin/view-users'>\r\n                Go Back\r\n            </Link>\r\n\r\n\r\n            <div className='container'>\r\n\r\n                <div className=\"row justify-content-md-center\">\r\n\r\n                    <div className=\"col-md-6 col-xs-12\">\r\n\r\n\r\n\r\n                        <h1>Edit User</h1>\r\n\r\n                        {loadingUpdate ? <Loader /> :\r\n\r\n                            errorUpdate ? <Message variant='danger'>{errorUpdate}</Message> :\r\n                                successUpdate ? <Message variant='success'>{'Updated'}</Message> :\r\n                                    loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message>\r\n                                        : (\r\n\r\n                                            <form onSubmit={submitHandler}>\r\n\r\n                                                {/* for name */}\r\n                                                < div className='form-group' >\r\n\r\n                                                    <label htmlFor='username'>Name</label>\r\n\r\n                                                    <input\r\n\r\n                                                        className='form-control'\r\n\r\n                                                        type='name'\r\n                                                        placeholder='Enter name'\r\n                                                        value={username}\r\n                                                        onChange={(e) => setUsername(e.target.value)}\r\n                                                    >\r\n                                                    </input>\r\n                                                </div>\r\n\r\n                                                {/* for email */}\r\n                                                <div className='form-group'>\r\n\r\n                                                    <label htmlFor='email'>Email Address</label>\r\n\r\n                                                    <input\r\n                                                        className='form-control'\r\n                                                        type='email'\r\n                                                        placeholder='Enter Email'\r\n                                                        value={email}\r\n                                                        onChange={(e) => setEmail(e.target.value)}\r\n                                                    >\r\n                                                    </input>\r\n                                                </div>\r\n                                                {/* isAdmin */}\r\n\r\n                                                <div className='form-group'>\r\n\r\n                                                    <label htmlFor='isAdmin'>Is Admin</label>\r\n\r\n                                                    <input\r\n\r\n                                                        type='checkbox'\r\n\r\n                                                        checked={isAdmin}\r\n                                                        onChange={(e) => setIsAdmin(e.target.checked)}\r\n                                                    >\r\n\r\n                                                    </input>\r\n\r\n\r\n                                                </div>\r\n\r\n                                                {/* for phone */}\r\n\r\n                                                <div className='form-group' >\r\n\r\n                                                    <label htmlFor='phone'>Phone</label>\r\n\r\n                                                    <input\r\n\r\n                                                        className='form-control'\r\n                                                        type='phone'\r\n                                                        placeholder='Enter phone'\r\n                                                        value={phone}\r\n                                                        onChange={(e) => setPhone(e.target.value)}\r\n                                                    >\r\n                                                    </input>\r\n                                                </div>\r\n                                                {/* for hostel */}\r\n\r\n                                                <div className='form-group'>\r\n\r\n                                                    <label htmlFor='hostel'>Hostel</label>\r\n\r\n                                                    <input\r\n                                                        className='form-control'\r\n                                                        type='text'\r\n                                                        placeholder='Enter hostel'\r\n                                                        value={hostel}\r\n                                                        onChange={(e) => setHostel(e.target.value)}\r\n                                                    >\r\n                                                    </input>\r\n                                                </div>\r\n                                                {/* for room */}\r\n\r\n                                                <div className='form-group' >\r\n\r\n                                                    <label htmlFor='room'>Room</label>\r\n\r\n                                                    <input\r\n                                                        className='form-control'\r\n                                                        type='text'\r\n                                                        placeholder='Enter room'\r\n                                                        value={room}\r\n                                                        onChange={(e) => setRoom(Number(e.target.value))}\r\n                                                    >\r\n                                                    </input>\r\n                                                </div>\r\n\r\n                                                <div className='form-group' >\r\n\r\n                                                    <label htmlFor='room'>Security Fee</label>\r\n\r\n                                                    <input\r\n                                                        className='form-control'\r\n                                                        type='number'\r\n                                                        placeholder='Security'\r\n                                                        value={securityFee}\r\n                                                        onChange={(e) => setSecurityFee(Number(e.target.value))}\r\n                                                    >\r\n                                                    </input>\r\n                                                </div>\r\n\r\n\r\n\r\n                                                <button type='submit' >\r\n                                                    Update\r\n                                                </button>\r\n\r\n                                            </form>)\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        </>\r\n\r\n    )\r\n}\r\n","F:\\mess-manager\\frontend\\src\\Screens\\admin\\users\\AddUsers.tsx",["255","256","257","258","259","260"],[],"import React, { useState, useEffect, useReducer } from \"react\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { useAppDispatch, useAppSelector } from \"../../../app/hooks\";\r\nimport Loader from \"../../../components/Loader\";\r\nimport Message from \"../../../components/Message\";\r\nimport { register } from \"../../../features/user/user_actions_creators\";\r\n\r\n\r\n\r\nfunction AddUsers() {\r\n\r\n    const hostelName = \"Eice Muhammad\"\r\n    const [message, setMessage] = useState(\"\");\r\n    const dispatch = useAppDispatch();\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n\r\n\r\n\r\n\r\n\r\n    // credentials\r\n    const [name, setName] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [room, setRoom] = useState(Number);\r\n    const [hostel, setHostel] = useState(hostelName);\r\n    const [phone, setPhone] = useState(\"\");\r\n\r\n    const [securityFee, setSecurityFee] = useState(0)\r\n\r\n    const [isRegistered, setIsRegistered] = useState(false);\r\n\r\n    const redirect = location.search ? location.search.split(\"=\")[1] : \"/\";\r\n\r\n    const userRegister = useAppSelector((state) => state.userRegister);\r\n    const { error, loading, userInfo, success } = userRegister;\r\n\r\n\r\n    const submitHandler = (e: any) => {\r\n        e.preventDefault();\r\n\r\n        name.includes(\" \") && setName(name.split(\" \").join(\"_\"))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        try {\r\n            setPassword(name)\r\n\r\n            dispatch(register(name, room, password, hostel, phone, securityFee));\r\n            setMessage(\"The user added successfully\")\r\n            setIsRegistered(true)\r\n        } catch (error) {\r\n            setMessage(`There is some error: ${error}`)\r\n\r\n\r\n        }\r\n\r\n\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (isRegistered) {\r\n            navigate(\"/admin/view-users\");\r\n        }\r\n    }, [isRegistered])\r\n\r\n    return (\r\n        // sign up form\r\n\r\n        <div className=\"container\">\r\n\r\n            {message && <Message variant=\"danger\">{message}</Message>}\r\n\r\n            {error && <Message variant=\"danger\">{error}</Message>}\r\n\r\n            {loading && <Loader />}\r\n\r\n            <div className=\"row\">\r\n\r\n                <div className=\"col-md-6 mx-auto\">\r\n\r\n                    <div className=\"card card-body\">\r\n\r\n                        <h3 className=\"text-center mb-4\">\r\n\r\n                            <i className=\"fas fa-user-plus\"></i> Register a New User\r\n                        </h3>\r\n\r\n                        <form onSubmit={submitHandler}>\r\n\r\n                            <div className=\"form-group\">\r\n\r\n                                <label htmlFor=\"name\">Username</label>\r\n\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    id=\"name\"\r\n                                    placeholder=\"Enter Username\"\r\n                                    value={name}\r\n                                    onChange={(e) => setName(e.target.value)}\r\n\r\n                                />\r\n                            </div>\r\n\r\n\r\n                            <div className=\"form-group\">\r\n\r\n                                <label htmlFor=\"room\">Your Room No.</label>\r\n\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    id=\"room\"\r\n                                    placeholder=\"Enter room\"\r\n                                    required\r\n                                    value={room}\r\n                                    onChange={(e) => setRoom(Number(e.target.value))}\r\n                                />\r\n                            </div>\r\n\r\n                            {/* \r\n                            <div className=\"form-group\">\r\n\r\n                                <label htmlFor=\"room\"> Hostel.</label>\r\n\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    id=\"hostel\"\r\n                                    placeholder=\"Enter Hostel\"\r\n                                    required\r\n                                    value={hostel}\r\n                                    onChange={(e) => setHostel(e.target.value)}\r\n                                />\r\n                            </div> */}\r\n\r\n                            <div className=\"form-group\">\r\n\r\n                                <label htmlFor=\"room\"> Phone Number</label>\r\n\r\n                                <input\r\n                                    type=\"number\"\r\n                                    className=\"form-control\"\r\n                                    id=\"phone\"\r\n                                    placeholder=\"Enter Your Phone\"\r\n                                    required\r\n                                    value={phone}\r\n                                    onChange={(e) => setPhone(e.target.value)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n\r\n                                <label htmlFor=\"room\"> Security Deposit</label>\r\n\r\n                                <input\r\n                                    type=\"number\"\r\n                                    className=\"form-control\"\r\n                                    id=\"security-fee\"\r\n                                    placeholder=\"Initial Security Deposits\"\r\n                                    required\r\n                                    value={securityFee}\r\n                                    onChange={(e) => setSecurityFee(Number(e.target.value))}\r\n                                />\r\n                            </div>\r\n\r\n\r\n\r\n\r\n\r\n                            <button type=\"submit\" className=\"btn btn-primary btn-block\">\r\n                                Register\r\n                            </button>\r\n                        </form>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default AddUsers\r\n","F:\\mess-manager\\frontend\\src\\Screens\\admin\\users\\ViewUsers.tsx",[],[],"F:\\mess-manager\\frontend\\src\\Screens\\admin\\expenses\\ThisMonthBill.tsx",["261","262"],[],"// for this month bill\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../../../app/hooks\";\r\nimport { getMessBill } from '../../../features/expenses/expenses_actions_creators'\r\nimport Message from \"../../../components/Message\";\r\nimport Loader from \"../../../components/Loader\";\r\nimport Downloader from '../../../components/Downloader';\r\nimport { descriptionRow } from '../../../components/ExcelMeta/ThisMonthBill'\r\nimport convertToMonth from '../../../components/ConvertToMonth'\r\nfunction ThisMonthBill() {\r\n  const dispatch = useAppDispatch();\r\n  const { messBill, loading, error } = useAppSelector(state => state.getMessBill)\r\n  const today = new Date().toISOString().slice(0, 7);\r\n  const [date, setDate] = useState(today)\r\n  const month = (date.slice(5, 7)) //1\r\n  const year = (today.slice(0, 4)) //2023 \r\n\r\n\r\n  const month_long = convertToMonth(month)\r\n\r\n\r\n\r\n\r\n  const handleSubmit = (e: any) => {\r\n    e.preventDefault()\r\n    dispatch(getMessBill(year, month))\r\n  }\r\n  const data = messBill.bills?.map((bill) => ({\r\n    student: bill.student,\r\n    room: bill.room,\r\n    totalAttendances: bill.total_attendances,\r\n    bill: bill.bill,\r\n    total: bill.total\r\n  }));\r\n  // Custom headings and description\r\n  const headingRow = [`${month_long} Mess Bill`];\r\n\r\n  const dataWithHeaders = [\r\n    // Add the heading row\r\n    headingRow,\r\n\r\n    descriptionRow,\r\n    ,\r\n\r\n    [],\r\n    // Heading row\r\n    ['Student', 'Room', \"Bill\", 'Total Attendances', 'Total'],\r\n    // Original Data\r\n    ...data.map((bill) => [\r\n      bill.student,\r\n      bill.room,\r\n      bill.totalAttendances,\r\n      bill.bill,\r\n      bill.total,\r\n    ]),\r\n  ];\r\n\r\n  useEffect(() => {\r\n    dispatch(getMessBill(year, month))\r\n\r\n\r\n  }, [date])\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"h1 text-center text-dark\" id=\"mess-bill\">\r\n        Calculate Bill for Mess\r\n\r\n\r\n\r\n\r\n        <form className=\"form form-control\" onSubmit={handleSubmit} >\r\n\r\n\r\n\r\n          <label htmlFor=\"month-date\">Month </label>\r\n          <input type=\"month\" id=\"month-date\" value={date} onChange={(e) => setDate(e.target.value)} max={today} />\r\n\r\n\r\n          <button className=\"btn btn-primary\" type=\"submit\">Get</button>\r\n        </form>\r\n      </div>\r\n\r\n      <Downloader tableData={dataWithHeaders} htmlInputId={`mess-bill`} name={\"Expenses-sheet\"} />\r\n\r\n      {loading ? (<Loader ></Loader>) :\r\n        error ? (<Message variant={\"danger\"}>There is some error</Message>)\r\n          :\r\n          <table className=\"table table-striped\">\r\n\r\n            <thead>\r\n\r\n              <tr>\r\n\r\n                <th scope=\"col\">#</th>\r\n\r\n                <th scope=\"col\">Name</th>\r\n                <th scope=\"col\">Room No</th>\r\n                <th scope=\"col\">Total Attendances</th>\r\n\r\n\r\n\r\n                <th scope=\"col\">{month_long}'s Bill</th>\r\n\r\n                {/* <th scope=\"col\">Due Bill</th> */}\r\n\r\n                <th scope=\"col\">Total to be Paid</th>\r\n              </tr>\r\n            </thead>\r\n\r\n            {messBill.bills?.map((bill, index) => <tbody>\r\n\r\n              <tr>\r\n\r\n                <th scope=\"row\" key={bill.id} >{index}</th>\r\n\r\n                <td>{bill.student}</td>\r\n                <td>{bill.room}</td>\r\n                <td>{bill.total_attendances}</td>\r\n\r\n\r\n                <td>{bill.bill}</td>\r\n\r\n                {/* <td>{bill.dues}</td> */}\r\n\r\n                <td>{bill.total}</td>\r\n              </tr>\r\n\r\n\r\n            </tbody>\r\n            )}\r\n          </table>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ThisMonthBill;\r\n","F:\\mess-manager\\frontend\\src\\Screens\\admin\\expenses\\TodayExpenses.tsx",["263","264","265","266","267","268"],[],"\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { counter } from \"../../../components/counter\"\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../../../app/hooks\";\r\nimport { getDailyAttendance, getFirstAndSecond } from '../../../features/attendance/attendance_actions_creators'\r\nimport { addExpenses } from '../../../features/expenses/expenses_actions_creators'\r\nimport Message from \"../../../components/Message\";\r\nimport Loader from \"../../../components/Loader\";\r\nimport { getSum } from \"../../../features/expenses/expenses_actions_creators\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction TodayExpenses() {\r\n    const dispatch = useAppDispatch()\r\n\r\n\r\n    const { getSum: sum, loading: sumLoading, success: sumSuccess, error: sumError } = useAppSelector(state => state.getSum)\r\n\r\n    const [meat, setMeat] = useState(0)\r\n    const [vegetables, setVegetables] = useState(0)\r\n    const [groceryAndOthers, setGroceryAndOthers] = useState(0)\r\n\r\n\r\n\r\n\r\n    const [todayExpensesFirst, setTodayExpensesFirst] = useState(0)\r\n    const [todayExpensesSecond, setTodayExpensesSecond] = useState(0)\r\n\r\n    const [todayExpenses, setTodayExpenses] = useState(0)\r\n\r\n    const { attendance: getAttendanceLi, error: getAttendanceError, loading: getAttendanceLoading } = useAppSelector(state => state.getDailyAttendance)\r\n\r\n    const { success: successExpenses, error: errorExpenses } = useAppSelector(state => state.addExpenses)\r\n\r\n    const { attendances } = useAppSelector(state => state.getFirstAndSecond)\r\n\r\n    const {\r\n        attendances_first_all,\r\n        attendances_second_all,\r\n\r\n    } = attendances\r\n    const submitHandler = (e: any) => {\r\n        e.preventDefault();\r\n\r\n\r\n        if ((Number(attendances_first_all) !== 0 && Number(attendances_second_all) !== 0) && todayExpensesFirst !== 0) {\r\n            let expenses = {\r\n                date: date,\r\n\r\n\r\n                expenses_meat: meat,\r\n                expenses_vegetables: vegetables,\r\n                expenses_grocery_and_other: groceryAndOthers,\r\n                expenses_first_time: todayExpensesFirst,\r\n                expenses_second_time: todayExpensesSecond,\r\n                expenses_total: (todayExpensesFirst + todayExpensesSecond)\r\n\r\n\r\n            }\r\n\r\n            dispatch(addExpenses(expenses))\r\n\r\n        } else {\r\n\r\n            setMessage(\"No attendance today or some other error\")\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    const today = new Date().toISOString().slice(0, 10);\r\n    const [date, setDate] = useState(today)\r\n\r\n\r\n    const [message, setMessage] = useState('')\r\n    // factor\r\n    const [factor, setFactor] = useState(0.6)\r\n\r\n\r\n\r\n    const totalMeatExpenses = sum.meat_sum || 0;\r\n    const totalVegetableExpenses = sum.vegetable_sum || 0\r\n    const totalGroceryExpenses = sum.grocery_and_other_sum || 0;\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        setTodayExpenses(parseFloat((meat + vegetables + groceryAndOthers).toFixed(2)))\r\n\r\n        setTodayExpensesFirst(parseFloat((todayExpenses * factor).toFixed(2))); setTodayExpensesSecond(parseFloat((todayExpenses * (1 - factor)).toFixed(2)))\r\n\r\n\r\n\r\n    }, [todayExpenses, factor, meat, vegetables, groceryAndOthers])\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getDailyAttendance(date));\r\n\r\n        dispatch(getSum(date))\r\n        dispatch(getFirstAndSecond(date))\r\n\r\n        if (successExpenses) {\r\n            setMessage(\"The expense is added successfully\")\r\n            // empty all the inputs\r\n            setTodayExpensesFirst(0)\r\n            setTodayExpensesSecond(0)\r\n            setTodayExpenses(0)\r\n            setMeat(0)\r\n            setVegetables(0)\r\n            setGroceryAndOthers(0)\r\n\r\n        }\r\n\r\n        if (errorExpenses) {\r\n            setMessage(String(errorExpenses))\r\n        }\r\n\r\n    }, [date, errorExpenses, successExpenses, message])\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"container\">\r\n\r\n            {getAttendanceLoading ? (\r\n\r\n                <Loader />\r\n            ) : errorExpenses ? (\r\n\r\n                <Message variant=\"danger\">{errorExpenses}</Message>\r\n            ) : (\r\n                <>\r\n                    <div className=\"h1 text-center text-dark\" id=\"pageHeaderTitle\">\r\n\r\n                        <input type=\"date\" id=\"date\" value={date} onChange={(e) => setDate(e.target.value)} max={today} /> Expenses\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        {message && <Message variant=\"success\">{message}</Message>}\r\n                        {/* {successExpenses && <Message variant=\"success\">{message}</Message>} */}\r\n                        <div className=\"col-md-6 mx-auto\">\r\n\r\n                            <div className=\"card card-body\">\r\n\r\n                                <h2>Set Expenses</h2>\r\n                                <form onSubmit={submitHandler}>\r\n\r\n                                    <div className=\"form-group d-flex justify-content-between\">\r\n\r\n                                        <label htmlFor=\"name\">Meat:</label>\r\n\r\n                                        <input\r\n\r\n                                            className=\"form-group\"\r\n                                            id=\"meat\"\r\n                                            value={meat}\r\n                                            onChange={(e) => setMeat(Number(e.target.value))}\r\n                                            required\r\n                                            min={1}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"form-group d-flex justify-content-between\">\r\n\r\n\r\n                                        <label htmlFor=\"name\">Vegetables:</label>\r\n\r\n                                        <input\r\n\r\n                                            className=\"form-group\"\r\n                                            id=\"vegetables\"\r\n                                            value={vegetables}\r\n                                            onChange={(e) => setVegetables(Number(e.target.value))}\r\n                                            required\r\n                                            min={1}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"form-group d-flex justify-content-between\">\r\n\r\n                                        <label htmlFor=\"name\">Grocery + Others:</label>\r\n\r\n                                        <input\r\n\r\n                                            className=\"form-group\"\r\n                                            id=\"grocery_others\"\r\n                                            value={groceryAndOthers}\r\n                                            onChange={(e) => setGroceryAndOthers(Number(e.target.value))}\r\n                                            required\r\n                                            min={1}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"form-group d-flex justify-content-between\">\r\n\r\n                                        <label htmlFor=\"name\">Total Expenses:</label>\r\n\r\n                                        <input\r\n\r\n                                            className=\"form-group\"\r\n                                            id=\"total\"\r\n                                            value={todayExpenses}\r\n                                            // onChange={(e) => setTodayExpenses(Number(e.target.value))}\r\n                                            required\r\n                                            min={1}\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div className=\"form-group d-flex justify-content-between\">\r\n\r\n                                        <label htmlFor=\"name\">Set Factor For First Time</label>\r\n\r\n                                        <input\r\n                                            type=\"range\"\r\n                                            min=\"0\"\r\n                                            max=\"1\"\r\n                                            step=\"any\"\r\n\r\n                                            list=\"markers\"\r\n                                            className=\"form-group\"\r\n                                            id=\"total\"\r\n                                            value={factor}\r\n\r\n                                            onChange={(e) => setFactor(parseFloat(Number(e.target.value).toFixed(2)))}\r\n                                        />\r\n                                        <span>{factor}</span>\r\n\r\n                                        <datalist id=\"markers\">\r\n                                            <option value=\"0\" label=\"0\">0</option>\r\n                                            <option value=\"0.25\" label=\"1/4\">1/4</option>\r\n                                            <option value=\"0.33\" label=\"1/3\">1/3</option>\r\n                                            <option value=\"0.5\" label=\"1/2\">1/2</option>\r\n                                            <option value=\"0.66\" label=\"2/3\">2/3</option>\r\n                                            <option value=\"1\" label=\"1\">1</option>\r\n                                        </datalist>\r\n                                    </div>\r\n\r\n\r\n                                    <ul className=\"list-group list-group-flush\">\r\n\r\n                                        <label htmlFor=\"name\">First Time:</label>\r\n\r\n                                        <li className=\"list-group-item card-header\"\r\n                                            id=\"first_time\"\r\n                                        >{todayExpensesFirst}</li>\r\n\r\n\r\n                                        <label htmlFor=\"name\">Second Time Expenses:</label>\r\n\r\n                                        <li\r\n                                            className=\"list-group-item card-header\"\r\n                                            id=\"second_time\"\r\n\r\n                                        >{todayExpensesSecond}</li>\r\n                                        <label className=\"list-group-item  card-header\">Total Attendances For First Time</label>\r\n\r\n                                        <li className=\"list-group-item\">{attendances_first_all}</li>\r\n\r\n                                        <label className=\"list-group-item  card-header\">Total Attendances For Second Time</label>\r\n\r\n                                        <li className=\"list-group-item\">{attendances_second_all}</li>\r\n\r\n\r\n                                    </ul>\r\n\r\n\r\n                                    <button type=\"submit\" className=\"btn btn-primary\">\r\n                                        Submit\r\n                                    </button>\r\n\r\n\r\n\r\n                                </form>\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div className=\"col-md-6 mx-auto\">\r\n                            <div className=\"container\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"card\">\r\n                                        {sumLoading ? <Loader /> : sumError ? <Message>{String(sumError)}</Message> :\r\n                                            <div className=\"card-body\">\r\n                                                <h2>Get Sum of Previous Expenses</h2>\r\n                                                <h5 className=\"card-title\">Meat Expenses</h5>\r\n                                                <p className=\"card-text\">{totalMeatExpenses} PKR</p>\r\n                                                <h5 className=\"card-title\">Vegetable Expenses</h5>\r\n                                                <p className=\"card-text\">{totalVegetableExpenses} PKR</p>\r\n\r\n                                                <h5 className=\"card-title\">Grocery Expenses</h5>\r\n                                                <p className=\"card-text\">{totalGroceryExpenses} PKR</p>\r\n                                            </div>\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </>\r\n            )}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default TodayExpenses;\r\n","F:\\mess-manager\\frontend\\src\\Screens\\admin\\expenses\\MonthlyExpenses.tsx",["269","270","271","272","273"],[],"import React from 'react'\r\nimport { getExpensesPerMonth } from '../../../features/expenses/expenses_actions_creators'\r\nimport Loader from \"../../../components/Loader\";\r\nimport Message from \"../../../components/Message\";\r\nimport { useAppDispatch, useAppSelector } from '../../../app/hooks'\r\nimport { useEffect, useState } from 'react';\r\nimport Downloader from '../../../components/Downloader';\r\nimport { headingRow, descriptionRow } from '../../../components/ExcelMeta/MonthlyExpenses';\r\nexport default function MonthlyExpenses() {\r\n    const dispatch = useAppDispatch();\r\n\r\n\r\n    const today = new Date().toISOString().slice(0, 7);\r\n    const [date, setDate] = useState(today)\r\n    const month = (date.slice(5, 7)) //1\r\n    const year = (today.slice(0, 4)) //2023 \r\n\r\n    const [totalExpensesFirst, setTotalExpensesFirst] = useState(0);\r\n    const [totalExpensesSecond, setTotalExpensesSecond] = useState(0);\r\n    const [totalExpenses, setTotalExpenses] = useState(0);\r\n\r\n\r\n    const { expensesPerMonth, loading, success } = useAppSelector(state => state.getExpensesPerMonth)\r\n\r\n    const handleSubmit = (e: any) => {\r\n        e.preventDefault()\r\n        dispatch(getExpensesPerMonth(year, month))\r\n\r\n        calculateTotalExpenses()\r\n\r\n    }\r\n\r\n    const data = expensesPerMonth?.map((expense) => ({\r\n        date: expense.date,\r\n        attendance_first_time: expense.attendance_first_time,\r\n        attendance_second_time: expense.attendance_second_time,\r\n        total_attendances: expense.total_attendances,\r\n\r\n        expenses_total: expense.expenses_total,\r\n    }));\r\n    // Custom headings and description\r\n\r\n\r\n    const dataWithHeaders = [\r\n        // Add the heading row\r\n        headingRow,\r\n\r\n        descriptionRow,\r\n\r\n\r\n        [],\r\n        // Heading row\r\n        ['Date', 'First Time Attendances', \"Second Time Attendances\", \"Total Attendances\", 'Total Expenses'],\r\n        // Original Data\r\n        ...data.map((expense) => [\r\n            expense.date,\r\n            expense.attendance_first_time,\r\n            expense.attendance_second_time,\r\n            expense.total_attendances,\r\n\r\n            expense.expenses_total,\r\n        ]),\r\n    ];\r\n    useEffect(\r\n        () => {\r\n            dispatch(getExpensesPerMonth(year, month))\r\n            success && calculateTotalExpenses()\r\n\r\n\r\n        }, [date, year, month, success, dispatch])\r\n\r\n    const calculateTotalExpenses = () => {\r\n        let TotalExpensesFirst = expensesPerMonth?.reduce(function (acc: any, cur: any) {\r\n            return acc + Number(cur.expenses_first_time)\r\n        }, 0)\r\n\r\n        setTotalExpensesFirst(TotalExpensesFirst)\r\n\r\n        let TotalExpensesSecond = expensesPerMonth?.reduce(function (acc: any, cur: any) {\r\n            return acc + Number(cur.expenses_second_time)\r\n        }, 0)\r\n\r\n        setTotalExpensesSecond(TotalExpensesSecond)\r\n\r\n        let TotalExpenses = expensesPerMonth?.reduce(function (acc: any, cur: any) {\r\n            return acc + Number(cur.expenses_total)\r\n        }, 0)\r\n\r\n        setTotalExpenses(TotalExpenses)\r\n\r\n        console.log(TotalExpenses)\r\n\r\n\r\n    }\r\n    return (\r\n\r\n        <div className='container'>\r\n\r\n            <div >\r\n\r\n                <div className=\"h1 text-center text-dark\" id=\"expensesPageHeaderTitle\">\r\n                    Get Expenses of\r\n\r\n                    <form className=\"form form-control\" onSubmit={handleSubmit} >\r\n\r\n                        <input type=\"month\" id=\"date\" value={date} onChange={(e) => setDate(e.target.value)} max={today} />\r\n\r\n\r\n                        <button className=\"button \" type=\"submit\">Get</button>\r\n                    </form>\r\n                </div>\r\n\r\n            </div >\r\n\r\n            <Downloader tableData={dataWithHeaders} htmlInputId={`expensesPageHeaderTitle`} name={\"Expenses-sheet\"} />\r\n\r\n            < div id=\"expensesPageHeaderTitle\" >\r\n\r\n\r\n                {loading ? (<Loader></Loader >) :\r\n\r\n                    <table className=\"table table-striped table-hover\">\r\n\r\n                        <thead>\r\n\r\n                            <tr>\r\n\r\n                                <th scope=\"col\">#</th>\r\n\r\n                                <th scope=\"col\">Date</th>\r\n\r\n                                <th scope=\"col\">Total Attendances First Time</th>\r\n                                <th scope=\"col\">Total Attendances Second Time</th>\r\n                                <th scope=\"col\">Total Attendances</th>\r\n\r\n                                <th scope=\"col\">Expenses First Time</th>\r\n                                <th scope=\"col\">Expenses Second Time</th>\r\n                                <th scope=\"col\">Expenses Total</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n\r\n                        {expensesPerMonth?.map((item, index) => <tbody>\r\n\r\n                            <tr key={item.id}>\r\n\r\n                                <th scope=\"row\">{index}</th>\r\n\r\n                                <td>{item.date}</td>\r\n\r\n                                <td>{item.attendance_first_time}</td>\r\n                                <td>{item.attendance_second_time}</td>\r\n                                <td>{item.total_attendances}</td>\r\n\r\n                                <td>{item.expenses_first_time}</td>\r\n                                <td>{item.expenses_second_time}</td>\r\n                                <td>{item.expenses_total}</td>\r\n                            </tr>\r\n                        </tbody>)\r\n                        }\r\n\r\n\r\n\r\n                        <thead>\r\n\r\n                            <tr>\r\n\r\n\r\n                                <th scope=\"row\">Total Expenses First Time</th>\r\n                                <th scope=\"row\">Total Expenses Second Time</th>\r\n                                <th scope=\"row\">Total Expenses </th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n\r\n                            <tr>\r\n\r\n\r\n                                <td scope=\"row\" > {totalExpensesFirst && totalExpensesFirst}</td>\r\n                                <td scope=\"row\" >{totalExpensesSecond && totalExpensesSecond}</td>\r\n                                <td scope=\"row\" >{totalExpenses && totalExpenses}</td>\r\n                            </tr>\r\n\r\n                        </tbody>\r\n                    </table>\r\n                }\r\n\r\n            </div >\r\n\r\n\r\n\r\n\r\n        </div >\r\n    );\r\n}\r\n","F:\\mess-manager\\frontend\\src\\Screens\\admin\\expenses\\BillForm.tsx",["274","275","276"],[],"F:\\mess-manager\\frontend\\src\\Screens\\admin\\attendances\\MonthlyAttendance.tsx",[],[],"F:\\mess-manager\\frontend\\src\\Screens\\admin\\mess\\ViewMess.tsx",["277","278","279"],[],"import React, { useEffect } from \"react\";\r\nimport { getMessMenu } from \"../../../features/mess/mess_actions_creators\";\r\n\r\nimport Message from \"../../../components/Message\";\r\nimport { useAppSelector, useAppDispatch } from \"../../../app/hooks\";\r\nimport \"./ViewMess.css\";\r\nimport Loader from \"../../../components/Loader\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Downloader from \"../../../components/Downloader\";\r\nimport { headingRow, descriptionRow } from '../../../components/ExcelMeta/Menu'\r\n\r\nimport { messMenu, menuPerDay } from \"../../../types/messTypes\";\r\nfunction ViewMess() {\r\n\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(getMessMenu());\r\n\r\n\r\n\r\n  }, [dispatch, useAppSelector]);\r\n\r\n  const { messMenu, loading, error } = useAppSelector((state) => state.messMenu);\r\n  const data = messMenu.map((menu: menuPerDay) => ({\r\n\r\n\r\n    day: menu.day,\r\n    first_time: menu.first_time,\r\n    second_time: menu.second_time\r\n\r\n  }))\r\n\r\n\r\n\r\n\r\n  const dataWithHeaders = [\r\n    // Add the heading row\r\n    headingRow,\r\n\r\n    descriptionRow,\r\n\r\n    [],\r\n    // Heading row\r\n    ['Day', 'First Time', 'Second Time'],\r\n    // Original Data\r\n    ...data.map((menu) => [\r\n      menu.day,\r\n      menu.first_time,\r\n      menu.second_time\r\n    ]),\r\n  ];\r\n\r\n  return (\r\n\r\n    <section id=\"tabs\" className=\"project-tab\">\r\n\r\n      <div className=\"container\">\r\n\r\n        <div className=\"row\">\r\n\r\n          <div className=\"col-md-12\">\r\n\r\n\r\n            <Downloader tableData={dataWithHeaders} htmlInputId={'divToPrint'} name={\"Mess-Menu\"} />\r\n\r\n\r\n\r\n          </div>\r\n\r\n\r\n          <div className=\"col-md-12\">\r\n\r\n            <div className=\"tab-content\" id=\"nav-tabContent\">\r\n\r\n              <div\r\n                className=\"tab-pane fade show active\"\r\n                id=\"nav-home\"\r\n                role=\"tabpanel\"\r\n                aria-labelledby=\"nav-home-tab\"\r\n              >\r\n\r\n                {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message>\r\n                  : (\r\n\r\n                    <table id=\"divToPrint\" className=\"table\" cellSpacing=\"0\">\r\n\r\n                      <thead>\r\n\r\n                        <tr>\r\n\r\n                          <th>Day</th>\r\n\r\n                          <th>First Time</th>\r\n\r\n                          <th>Second Time</th>\r\n\r\n                          <th>Edit</th>\r\n                        </tr>\r\n                      </thead>\r\n\r\n\r\n                      <tbody>\r\n\r\n                        {messMenu?.map((menu: menuPerDay) => <tr key={menu.id}>\r\n\r\n                          <td>\r\n\r\n                            <a href=\"#\">{menu.day}</a>\r\n                          </td>\r\n\r\n                          <td>{menu.first_time}</td>\r\n\r\n                          <td>{menu.second_time}</td>\r\n\r\n                          <td><button className=\"btn btn-primary\"><Link\r\n                            to={`/admin/update-mess/${menu.day}`}>Edit</Link>\r\n                          </button> </td>\r\n                        </tr>)}\r\n\r\n\r\n                      </tbody>\r\n                    </table>\r\n                  )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default ViewMess;\r\n","F:\\mess-manager\\frontend\\src\\Screens\\admin\\attendances\\markAttendance.tsx",["280","281","282","283","284","285","286","287"],[],"\r\nimport { listUsers } from \"../../../features/user/user_actions_creators\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../../../app/hooks\";\r\nimport Loader from \"../../../components/Loader\";\r\nimport Message from \"../../../components/Message\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { postAttendance, getDailyAttendance } from \"../../../features/attendance/attendance_actions_creators\";\r\nimport { counter } from \"../../../components/counter\";\r\nimport { User } from '../../../types/userTypes'\r\n\r\nexport default function MarkAttendance() {\r\n\r\n  const dispatch = useAppDispatch();\r\n  const navigate = useNavigate();\r\n  const { users, loading, error } = useAppSelector((state) => state.userList);\r\n\r\n  const today = new Date().toISOString().slice(0, 10);\r\n  const [date, setDate] = useState(today)\r\n  const yesterday = new Date(new Date(date).getTime() - 86400000)\r\n    .toISOString()\r\n    .slice(0, 10);\r\n\r\n  const { userInfo } = useAppSelector((state) => state.userLogin);\r\n  const { success: attendanceSuccess, error: attendanceError, loading: attendanceLoading } = useAppSelector((state) => state.attendance)\r\n  const { attendance: getAttendanceLi, error: getAttendanceError, loading: getAttendanceLoading, success: getAttendanceLiSuccess } = useAppSelector(state => state.getDailyAttendance)\r\n\r\n  // Prs = Present\r\n  const [totalFirstTimePrs, setTotalFirstTimePrs] = useState(0)\r\n  const [totalSecondTimePrs, setTotalSecondTimePrs] = useState(0)\r\n  const [totalGrandPrs, setTotalGrandPrs] = useState(0)\r\n\r\n  const [attendanceValuesFirst, setAttendanceValuesFirst] = useState<{ [key: number]: string }>({});\r\n  const [attendanceValuesSecond, setAttendanceValuesSecond] = useState<{ [key: number]: string }>({});\r\n\r\n\r\n\r\n  const userIds = users?.map((user: User) => user.id)\r\n\r\n\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    try {\r\n      Promise.all(userIds.map((id: number) => {\r\n        const attendance = {\r\n          student: id,\r\n          date: date,\r\n          first_time: attendanceValuesFirst[id],\r\n          second_time: attendanceValuesSecond[id]\r\n        }\r\n\r\n        return Promise.all([\r\n          dispatch(postAttendance(attendance, id)),\r\n          dispatch(getDailyAttendance(date))\r\n        ]);\r\n      }))\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }\r\n\r\n\r\n\r\n  const [otherSelectedFirst, setOtherSelectedFirst] = useState<{ [key: number]: boolean }>({});\r\n  const [otherSelectedSecond, setOtherSelectedSecond] = useState<{ [key: number]: boolean }>({});\r\n\r\n  const handleAttendanceChangeFirst = (e: React.ChangeEvent<HTMLSelectElement> | React.ChangeEvent<HTMLInputElement>, userId: number) => {\r\n    let value = e.target.value;\r\n    const newAttendanceValuesFirst = { ...attendanceValuesFirst, [userId]: value };\r\n\r\n    if (e.target instanceof HTMLInputElement) {\r\n      setAttendanceValuesFirst(newAttendanceValuesFirst);\r\n    }\r\n\r\n    if (e.target instanceof HTMLSelectElement) {\r\n      if (value === 'other') {\r\n        setOtherSelectedFirst(prevState => { return { ...prevState, [userId]: true } });\r\n      } else {\r\n        setOtherSelectedFirst(prevState => { const newState = { ...prevState }; delete newState[userId]; return newState; });\r\n        setAttendanceValuesFirst(newAttendanceValuesFirst);\r\n\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleAttendanceChangeSecond = (e: React.ChangeEvent<HTMLSelectElement> | React.ChangeEvent<HTMLInputElement>, userId: number) => {\r\n    let value = e.target.value;\r\n    const newAttendanceValuesSecond = { ...attendanceValuesSecond, [userId]: value };\r\n\r\n    if (e.target instanceof HTMLInputElement) {\r\n      setAttendanceValuesSecond(newAttendanceValuesSecond);\r\n    }\r\n\r\n    if (e.target instanceof HTMLSelectElement) {\r\n      if (value === 'other') {\r\n        setOtherSelectedSecond(prevState => { return { ...prevState, [userId]: true } });\r\n      } else {\r\n        setOtherSelectedSecond(prevState => { const newState = { ...prevState }; delete newState[userId]; return newState; });\r\n\r\n        setAttendanceValuesSecond(newAttendanceValuesSecond);\r\n\r\n      }\r\n    }\r\n  };\r\n\r\n  const getDefaultAttendance = () => {\r\n    const defaultAttendanceFirst: { [key: number]: string } = {}\r\n    const defaultAttendanceSecond: { [key: number]: string } = {}\r\n\r\n\r\n    for (const user of users) {\r\n\r\n      defaultAttendanceFirst[user.id] = getAttendanceLi.find((att => att.student_id === user.id))?.first_time || \"present\"\r\n      defaultAttendanceSecond[user.id] = getAttendanceLi.find((att => att.student_id === user.id))?.second_time || \"present\"\r\n\r\n    }\r\n\r\n    setAttendanceValuesFirst(defaultAttendanceFirst)\r\n    setAttendanceValuesSecond(defaultAttendanceSecond)\r\n  };\r\n\r\n  function getColorFirst(attendance: string) {\r\n\r\n\r\n\r\n    switch (attendance) {\r\n      case 'absent':\r\n        return 'red';\r\n      case 'double':\r\n        return 'purple';\r\n      case 'present':\r\n      default:\r\n        return '';\r\n    }\r\n\r\n  }\r\n\r\n  function getColorSecond(attendance: string) {\r\n    switch (attendance) {\r\n      case 'absent':\r\n        return 'red';\r\n      case 'double':\r\n        return 'purple';\r\n      case 'present':\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    if (userInfo && userInfo.isAdmin) {\r\n      dispatch(listUsers());\r\n      dispatch(getDailyAttendance(yesterday));\r\n    } else {\r\n      navigate(\"/login\");\r\n    }\r\n\r\n\r\n  }, [attendanceSuccess, userInfo, getAttendanceLiSuccess, date]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n\r\n\r\n    getDefaultAttendance();\r\n  }, [getAttendanceLi]);\r\n\r\n\r\n  return (<>\r\n\r\n    <section>\r\n\r\n      <div className=\"row\">\r\n\r\n        <div className=\"col-md-12 text-dark text-center\">\r\n\r\n          <h3 >Mark Attendance</h3> for <label htmlFor=\"date\">The Date:</label><h4><input type=\"date\" id=\"date\" value={date} onChange={(e) => setDate(e.target.value)} max={today} /></h4>'s meal\r\n        </div>\r\n      </div>\r\n      {loading ? (\r\n\r\n        <Loader />\r\n      ) : (error) ? (\r\n\r\n        <Message variant=\"danger\">{error}</Message>\r\n      ) :\r\n        (\r\n\r\n          <form className=\"form\" onSubmit={handleSubmit}>\r\n\r\n\r\n            <table className=\"table table-bordered\">\r\n\r\n              <thead>\r\n\r\n                <tr>\r\n\r\n                  <th scope=\"col\">#</th>\r\n\r\n                  <th scope=\"col\">Name</th>\r\n\r\n                  <th scope=\"col\">Room no.</th>\r\n\r\n                  <th scope=\"col\">First Time</th>\r\n\r\n                  <th scope=\"col\">Second Time</th>\r\n\r\n                  <th scope=\"col\">Status</th>\r\n                </tr>\r\n              </thead>\r\n\r\n\r\n              {users.map((user, index) => <tbody>\r\n                <tr key={user.id}>\r\n                  <th scope=\"row\" id={`user-id-${user.id}`}>{index}</th>\r\n                  <td className=\"form-group\">\r\n                    <div\r\n                      className=\"form-control\"\r\n                      id={`table-name-${user.id}`}>\r\n                      {user.username}\r\n                    </div>\r\n                  </td>\r\n                  <td className=\"form-group\">\r\n                    <div\r\n\r\n                      className=\"form-control\"\r\n                      id={`table-room-${user.id}`}>\r\n\r\n                      {user.room}\r\n                    </div>\r\n\r\n                  </td>\r\n\r\n                  <td>\r\n                    {getAttendanceLoading ? (\r\n                      \"Loading...\"\r\n                    ) : (\r\n                      <>\r\n                        <select\r\n                          id={`first-attendance-${user.id}`}\r\n                          onChange={(e) => handleAttendanceChangeFirst(e, user.id)}\r\n                          className=\"form-control \"\r\n                          style={{ color: getColorFirst(attendanceValuesFirst[user.id]) }}\r\n                          value={attendanceValuesFirst[user.id]}\r\n                        >\r\n\r\n                          <option value=\"present\">✓ Present</option>\r\n                          <option value=\"absent\">X Absent</option>\r\n                          <option value=\"double\">2 Double</option>\r\n                          <option value=\"other\">Other</option>\r\n                        </select>\r\n                        {otherSelectedFirst[user.id] ? (\r\n                          // <div className=\"container\">\r\n                          <input\r\n                            className=\"form-control \"\r\n                            type=\"number\"\r\n                            id={`customInputFirst-${user.id}`}\r\n                            value={attendanceValuesFirst[user.id] === 'other' ? '' : attendanceValuesFirst[user.id]}\r\n                            onChange={(e) => handleAttendanceChangeFirst(e, user.id)}\r\n                            placeholder=\"Enter custom value\"\r\n                            min={3}\r\n                          />\r\n                          // </div>\r\n                        ) : null}\r\n\r\n\r\n                      </>\r\n                    )}\r\n                  </td>\r\n\r\n                  <td>\r\n                    {getAttendanceLoading ?\r\n                      (\"Loading..\") :\r\n                      (\r\n                        <>\r\n                          <select\r\n                            id={`second-attendance-${user.id}`}\r\n                            onChange={(e) => handleAttendanceChangeSecond(e, user.id)}\r\n                            className=\"form-control\"\r\n                            style={{ color: getColorSecond(attendanceValuesSecond[user.id]) }}\r\n                            value={attendanceValuesSecond[user.id]}\r\n                          >\r\n\r\n                            <option value=\"present\">✓ Present</option>\r\n                            <option value=\"absent\">X Absent</option>\r\n                            <option value=\"double\">2 Double</option>\r\n                            <option value=\"other\">Other</option>\r\n\r\n                          </select>\r\n                          {otherSelectedSecond[user.id] ? (\r\n\r\n                            <input\r\n                              className=\"form-control \"\r\n                              type=\"number\"\r\n                              id={`customInputFirst-${user.id}`}\r\n                              value={attendanceValuesSecond[user.id] === 'other' ? '' : attendanceValuesFirst[user.id]}\r\n                              onChange={(e) => handleAttendanceChangeSecond(e, user.id)}\r\n                              placeholder=\"Enter custom value\"\r\n                              min={3}\r\n                              required\r\n                            />\r\n\r\n                          ) : null}\r\n                        </>\r\n                      )}\r\n                  </td>\r\n                  <td>\r\n\r\n                    {/* <i className=\"bi bi-check2\" >{attendanceError && attendanceError}</i> */}\r\n\r\n                    {attendanceLoading ? (\r\n                      <Loader />\r\n                    ) : attendanceError ? (\r\n                      <Message variant=\"danger\">{attendanceError}</Message>\r\n                    ) : attendanceSuccess ? (\r\n                      <Message variant=\"success\">Noted</Message>\r\n                    ) : null}\r\n\r\n                  </td>\r\n                </tr>\r\n\r\n              </tbody>)\r\n              }\r\n\r\n            </table>\r\n\r\n            <button type=\"submit\" className=\"btn btn-primary\">\r\n              Submit\r\n            </button>\r\n\r\n          </form>\r\n\r\n        )\r\n\r\n\r\n      }\r\n\r\n\r\n    </section>\r\n\r\n    <section>\r\n\r\n      <div className=\"row\">\r\n\r\n        <div className=\"col-md-12 text-dark\">\r\n\r\n          <h3>{today}'s totals </h3>\r\n        </div>\r\n      </div>\r\n\r\n      <table className=\"table table-bordered\">\r\n\r\n        <thead>\r\n\r\n          <tr>\r\n\r\n            <th scope=\"col\">#</th>\r\n\r\n            <th scope=\"col\">Total Members</th>\r\n\r\n\r\n            <th scope=\"col\">Total Attendances First Time</th>\r\n            <th scope=\"col\">Total Attendances Second Time</th>\r\n            <th scope=\"col\">Total Attendances </th>\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n\r\n          <tr>\r\n\r\n            <th scope=\"row\">1</th>\r\n\r\n            <td>{users?.length}</td>\r\n\r\n\r\n\r\n            <td>{totalFirstTimePrs}</td>\r\n            <td>{totalSecondTimePrs}</td>\r\n            <td>{totalGrandPrs}</td>\r\n\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n\r\n    </section>\r\n  </>\r\n  )\r\n\r\n}\r\n\r\n\r\n\r\n","F:\\mess-manager\\frontend\\src\\Screens\\admin\\mess\\UpdateMess.tsx",["288","289","290"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router\";\r\n\r\nimport { getMessMenu, updateMessMenu } from \"../../../features/mess/mess_actions_creators\";\r\n\r\nimport Message from \"../../../components/Message\";\r\nimport { useAppSelector, useAppDispatch } from \"../../../app/hooks\";\r\n\r\nimport \"./ViewMess.css\";\r\nimport Loader from \"../../../components/Loader\";\r\n\r\ntype menuPerDay = {\r\n    id: number;\r\n    day: string;\r\n    first_time: string,\r\n    second_time: string\r\n}\r\n// interface messMenu {\r\n//     messMenu: menuPerDay[]\r\n// }\r\ntype messMenu = menuPerDay[]\r\n\r\n\r\nfunction UpdateMess() {\r\n\r\n    const dispatch = useAppDispatch()\r\n    const { day } = useParams<string>()\r\n\r\n    const [menuFirst, setMenuFirst] = useState<string>()\r\n    const [menuSecond, setMenuSecond] = useState<string>()\r\n    useEffect(() => {\r\n        dispatch(getMessMenu());\r\n    }, [dispatch, useAppSelector]);\r\n\r\n\r\n    const { messMenu, loading, error } = useAppSelector((state) => state.messMenu);\r\n    let menu = messMenu.find((item: menuPerDay) => item.day === day)\r\n\r\n    const handleChange = (e: any) => {\r\n        const { name, value } = e.target;\r\n        if (name === \"firstTime\") {\r\n            setMenuFirst(value)\r\n        } else if (name === \"secondTime\") {\r\n            setMenuSecond(value)\r\n        }\r\n\r\n        console.log({ name, value })\r\n    }\r\n\r\n    const navigate = useNavigate()\r\n    const submitHandler = (e: any) => {\r\n        e.preventDefault();\r\n        if (!menu) {\r\n            throw new Error(\"Day must be provided\")\r\n        }\r\n        dispatch(updateMessMenu(menu.day, {\r\n            id: menu.id,\r\n            day: menu.day,\r\n            first_time: menuFirst as string,\r\n            second_time: menuSecond as string,\r\n        }))\r\n\r\n        navigate(-1)\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <section id=\"tabs\" className=\"project-tab\">\r\n\r\n            <div className=\"container\">\r\n\r\n                <div className=\"col-md-12\">\r\n\r\n                    <div className=\"tab-content\" id=\"nav-tabContent\">\r\n\r\n                        <div\r\n\r\n                            className=\"tab-pane fade show active\"\r\n                            id=\"nav-home\"\r\n                            role=\"tabpanel\"\r\n                            aria-labelledby=\"nav-home-tab\"\r\n                        >\r\n\r\n                            {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message>\r\n                                : (\r\n\r\n                                    <form onSubmit={(e) => submitHandler(e)}>\r\n\r\n\r\n                                        <table className=\"table\" cellSpacing=\"0\">\r\n\r\n                                            <thead>\r\n\r\n                                                <tr>\r\n\r\n                                                    <th>Day</th>\r\n\r\n                                                    <th>First Time</th>\r\n\r\n                                                    <th>Second Time</th>\r\n                                                </tr>\r\n                                            </thead>\r\n\r\n\r\n                                            <tbody>\r\n\r\n                                                <tr >\r\n\r\n                                                    <td >\r\n\r\n                                                        <a href=\"#\">{menu?.day}</a>\r\n                                                    </td>\r\n\r\n                                                    <td className=\"form-group\">\r\n\r\n                                                        <input type=\"text\" name=\"firstTime\" className=\"form-control\" placeholder={menu?.first_time} value={menuFirst} onChange={(e) => handleChange(e)} />\r\n\r\n                                                    </td>\r\n\r\n                                                    <td className=\"form-group\">\r\n\r\n                                                        <input type=\"text\" name=\"secondTime\" className=\"form-control\" placeholder={menu?.second_time} value={menuSecond} onChange={(e) => handleChange(e)} />\r\n\r\n                                                    </td>\r\n                                                </tr>\r\n\r\n\r\n                                            </tbody>\r\n                                        </table>\r\n\r\n                                        <div className=\"row\">\r\n\r\n                                            <div className=\"col-md-12\">\r\n\r\n                                                <button className=\"btn btn-primary\" type=\"submit\">Save</button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </form>\r\n                                )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </section >\r\n    );\r\n}\r\n\r\nexport default UpdateMess;\r\n","F:\\mess-manager\\frontend\\src\\components\\Loader.tsx",[],[],"F:\\mess-manager\\frontend\\src\\components\\Message.tsx",[],[],"F:\\mess-manager\\frontend\\src\\components\\ConvertToWeekDay.tsx",[],[],"F:\\mess-manager\\frontend\\src\\components\\counter.ts",[],[],"F:\\mess-manager\\frontend\\src\\components\\Downloader.tsx",[],[],"F:\\mess-manager\\frontend\\src\\Screens\\admin\\attendances\\DailyAttendance.tsx",[],[],"F:\\mess-manager\\frontend\\src\\Screens\\admin\\attendances\\AttendanceSheet.tsx",[],[],"F:\\mess-manager\\frontend\\src\\app\\hooks.ts",[],[],"F:\\mess-manager\\frontend\\src\\features\\mess\\mess_slice.ts",["291"],[],"import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { messMenu } from \"../../types/messTypes\";\r\n\r\nconst messMenuFromStorage: messMenu | [] = localStorage.getItem(\"messMenu\") !== null\r\n    ? JSON.parse(localStorage.getItem(\"messMenu\")!)\r\n    : [];\r\n\r\n\r\nexport const messMenuSlice = createSlice({\r\n    name: 'mess-menu',\r\n    initialState: {\r\n        messMenu: messMenuFromStorage,\r\n\r\n        loading: false,\r\n        error: null\r\n    },\r\n    reducers: {\r\n\r\n        getMessMenuRequest(state) { state.loading = true },\r\n        getMessMenuSuccess(state, action) { state.loading = false; state.messMenu = action.payload },\r\n        getMessMenuFail(state, action) { state.error = action.payload }\r\n    }\r\n})\r\n\r\nexport const { getMessMenuRequest, getMessMenuSuccess, getMessMenuFail } = messMenuSlice.actions\r\n\r\nexport const messMenuUpdateSlice = createSlice({\r\n    name: 'mess-menu-update',\r\n    initialState: {\r\n        messMenu: messMenuFromStorage,\r\n        success: false,\r\n        error: false,\r\n        loading: false\r\n    },\r\n    reducers: {\r\n        updateMessMenuRequest(state) { state.loading = true },\r\n        updateMessMenuSuccess(state, action) {\r\n            state.loading = false;\r\n            state.success = true;\r\n            state.messMenu = action.payload\r\n        },\r\n\r\n        updateMessMenuFail(state, action) {\r\n            state.error = action.payload\r\n\r\n        }\r\n\r\n    }\r\n})\r\n\r\nexport const { updateMessMenuRequest, updateMessMenuSuccess, updateMessMenuFail } = messMenuUpdateSlice.actions\r\n","F:\\mess-manager\\frontend\\src\\features\\attendance\\attendance_slice.ts",["292","293"],[],"import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\n\r\n\r\nconst AttendanceInitialState = {\r\n    loading: false,\r\n    success: false,\r\n    error: null,\r\n    attendance: [\r\n        {\r\n            id: 0,\r\n            date: '00-00-2000',\r\n            first_time: 'absent',\r\n            second_time: 'absent',\r\n            student: \"Student\",\r\n            student_id: 0\r\n        }\r\n    ]\r\n};\r\nexport const getAttendanceSlice = createSlice({\r\n    name: 'get-attendances',\r\n    initialState: AttendanceInitialState,\r\n    reducers: {\r\n\r\n        getAttendanceRequest(state) { state.loading = true },\r\n        getAttendanceSuccess(state, action) { state.loading = false; state.attendance = action.payload; state.success = true; },\r\n        getAttendanceFail(state, action) { state.error = action.payload; state.loading = false }\r\n\r\n    }\r\n\r\n})\r\n\r\nexport const { getAttendanceRequest, getAttendanceSuccess, getAttendanceFail } = getAttendanceSlice.actions\r\n\r\n\r\n\r\nexport const getMonthlyAttendanceSlice = createSlice({\r\n    name: 'get-monthly-attendances',\r\n    initialState: AttendanceInitialState,\r\n    reducers: {\r\n\r\n        getMonthAttendanceRequest(state) { state.loading = true },\r\n        getMonthAttendanceSuccess(state, action) { state.loading = false; state.attendance = action.payload; state.success = true; },\r\n        getMonthAttendanceFail(state, action) { state.error = action.payload; state.loading = false }\r\n\r\n    }\r\n\r\n})\r\n\r\nexport const { getMonthAttendanceRequest, getMonthAttendanceSuccess, getMonthAttendanceFail } = getMonthlyAttendanceSlice.actions\r\n\r\n\r\nexport const getDailyAttendanceSlice = createSlice({\r\n    name: 'get-daily-attendances',\r\n    initialState: AttendanceInitialState,\r\n    reducers: {\r\n\r\n        getDailyAttendanceRequest(state) { state.loading = true },\r\n        getDailyAttendanceSuccess(state, action) { state.loading = false; state.attendance = action.payload; state.success = true; },\r\n        getDailyAttendanceFail(state, action) { state.error = action.payload; state.loading = false }\r\n\r\n    }\r\n\r\n})\r\n\r\nexport const { getDailyAttendanceRequest, getDailyAttendanceSuccess, getDailyAttendanceFail } = getDailyAttendanceSlice.actions\r\n\r\n\r\n\r\n// we cannot store expenses per month since we don't know which months the user wants and secondly it will bloat the memory\r\n// const expensesPerMonthFromStorage: expenses | [] = localStorage.getItem(\"expensesPerMonth\") !== null\r\n//   ? JSON.parse(localStorage.getItem(\"userInfo\")!)\r\n//   : [];\r\n\r\nexport const postAttendanceSlice = createSlice({\r\n    name: 'post-attendance',\r\n    initialState: {\r\n        loading: false,\r\n        success: false,\r\n        error: null,\r\n        attendance: {}\r\n\r\n    },\r\n    reducers: {\r\n\r\n        postAttendanceRequest(state) { state.loading = true },\r\n        postAttendanceSuccess(state, action) { state.loading = false; state.attendance = action.payload; state.success = true; },\r\n        postAttendanceFail(state, action) { state.error = action.payload; state.loading = false },\r\n\r\n    }\r\n\r\n})\r\n\r\nexport const { postAttendanceRequest, postAttendanceSuccess, postAttendanceFail } = postAttendanceSlice.actions\r\n\r\nexport const getFirstAndSecondSlice = createSlice({\r\n    name: 'get first and second ',\r\n    initialState: {\r\n        loading: false,\r\n        success: false,\r\n        error: null,\r\n        attendances: {\r\n            \"attendances_first_all\": \"0.0\",\r\n            \"attendances_second_all\": \"0.0\"\r\n        }\r\n\r\n    },\r\n    reducers: {\r\n\r\n        getFirstAndSecondRequest(state) { state.loading = true },\r\n        getFirstAndSecondSuccess(state, action) { state.loading = false; state.attendances = action.payload; state.success = true; },\r\n        getFirstAndSecondFail(state, action) { state.error = action.payload; state.loading = false },\r\n\r\n    }\r\n\r\n})\r\n\r\nexport const { getFirstAndSecondRequest, getFirstAndSecondSuccess, getFirstAndSecondFail } = getFirstAndSecondSlice.actions\r\n\r\n","F:\\mess-manager\\frontend\\src\\features\\expenses\\expenses_slice.ts",[],[],"F:\\mess-manager\\frontend\\src\\features\\user\\user_actions_creators.ts",[],[],"F:\\mess-manager\\frontend\\src\\features\\mess\\mess_actions_creators.ts",[],[],"F:\\mess-manager\\frontend\\src\\features\\expenses\\expenses_actions_creators.ts",[],[],"F:\\mess-manager\\frontend\\src\\features\\attendance\\attendance_actions_creators.ts",[],[],"F:\\mess-manager\\frontend\\src\\components\\IdToStudent.tsx",[],[],"F:\\mess-manager\\frontend\\src\\components\\Today.tsx",["294","295","296"],[],"F:\\mess-manager\\frontend\\src\\components\\Date.tsx",[],[],"F:\\mess-manager\\frontend\\src\\Screens\\normal\\Dashboard.tsx",["297","298","299","300","301","302","303"],[],"F:\\mess-manager\\frontend\\src\\components\\ExcelMeta\\ThisMonthBill.ts",[],[],"F:\\mess-manager\\frontend\\src\\components\\ConvertToMonth.ts",[],[],"F:\\mess-manager\\frontend\\src\\components\\ExcelMeta\\Menu.ts",[],[],"F:\\mess-manager\\frontend\\src\\components\\ExcelMeta\\Attendance.ts",[],[],"F:\\mess-manager\\frontend\\src\\components\\ExcelMeta\\MonthlyExpenses.ts",[],[],{"ruleId":"304","severity":1,"message":"305","line":4,"column":8,"nodeType":"306","messageId":"307","endLine":4,"endColumn":23},{"ruleId":"304","severity":1,"message":"308","line":3,"column":95,"nodeType":"306","messageId":"307","endLine":3,"endColumn":114},{"ruleId":"304","severity":1,"message":"309","line":3,"column":10,"nodeType":"306","messageId":"307","endLine":3,"endColumn":26},{"ruleId":"304","severity":1,"message":"310","line":4,"column":10,"nodeType":"306","messageId":"307","endLine":4,"endColumn":20},{"ruleId":"304","severity":1,"message":"311","line":3,"column":10,"nodeType":"306","messageId":"307","endLine":3,"endColumn":14},{"ruleId":"304","severity":1,"message":"312","line":2,"column":10,"nodeType":"306","messageId":"307","endLine":2,"endColumn":21},{"ruleId":"304","severity":1,"message":"313","line":3,"column":17,"nodeType":"306","messageId":"307","endLine":3,"endColumn":26},{"ruleId":"304","severity":1,"message":"314","line":23,"column":18,"nodeType":"306","messageId":"307","endLine":23,"endColumn":25},{"ruleId":"315","severity":1,"message":"316","line":38,"column":6,"nodeType":"317","endLine":38,"endColumn":8,"suggestions":"318"},{"ruleId":"319","severity":1,"message":"320","line":67,"column":15,"nodeType":"321","endLine":67,"endColumn":58},{"ruleId":"322","severity":1,"message":"323","line":68,"column":17,"nodeType":"321","endLine":72,"endColumn":19},{"ruleId":"319","severity":1,"message":"320","line":86,"column":15,"nodeType":"321","endLine":86,"endColumn":58},{"ruleId":"322","severity":1,"message":"323","line":87,"column":17,"nodeType":"321","endLine":91,"endColumn":19},{"ruleId":"324","severity":1,"message":"325","line":149,"column":21,"nodeType":"326","endLine":149,"endColumn":32},{"ruleId":"304","severity":1,"message":"327","line":8,"column":10,"nodeType":"306","messageId":"307","endLine":8,"endColumn":22},{"ruleId":"315","severity":1,"message":"328","line":60,"column":8,"nodeType":"317","endLine":60,"endColumn":42,"suggestions":"329"},{"ruleId":"304","severity":1,"message":"330","line":1,"column":38,"nodeType":"306","messageId":"307","endLine":1,"endColumn":48},{"ruleId":"304","severity":1,"message":"331","line":26,"column":20,"nodeType":"306","messageId":"307","endLine":26,"endColumn":29},{"ruleId":"304","severity":1,"message":"332","line":33,"column":11,"nodeType":"306","messageId":"307","endLine":33,"endColumn":19},{"ruleId":"304","severity":1,"message":"333","line":36,"column":29,"nodeType":"306","messageId":"307","endLine":36,"endColumn":37},{"ruleId":"304","severity":1,"message":"334","line":36,"column":39,"nodeType":"306","messageId":"307","endLine":36,"endColumn":46},{"ruleId":"315","severity":1,"message":"335","line":69,"column":8,"nodeType":"317","endLine":69,"endColumn":22,"suggestions":"336"},{"ruleId":"337","severity":1,"message":"338","line":39,"column":27,"nodeType":"317","messageId":"339","endLine":57,"endColumn":4},{"ruleId":"315","severity":1,"message":"340","line":63,"column":6,"nodeType":"317","endLine":63,"endColumn":12,"suggestions":"341"},{"ruleId":"304","severity":1,"message":"342","line":3,"column":10,"nodeType":"306","messageId":"307","endLine":3,"endColumn":17},{"ruleId":"304","severity":1,"message":"312","line":11,"column":10,"nodeType":"306","messageId":"307","endLine":11,"endColumn":21},{"ruleId":"304","severity":1,"message":"343","line":17,"column":56,"nodeType":"306","messageId":"307","endLine":17,"endColumn":66},{"ruleId":"304","severity":1,"message":"344","line":31,"column":25,"nodeType":"306","messageId":"307","endLine":31,"endColumn":40},{"ruleId":"304","severity":1,"message":"345","line":31,"column":49,"nodeType":"306","messageId":"307","endLine":31,"endColumn":67},{"ruleId":"315","severity":1,"message":"316","line":124,"column":8,"nodeType":"317","endLine":124,"endColumn":55,"suggestions":"346"},{"ruleId":"304","severity":1,"message":"347","line":4,"column":8,"nodeType":"306","messageId":"307","endLine":4,"endColumn":15},{"ruleId":"315","severity":1,"message":"348","line":70,"column":12,"nodeType":"317","endLine":70,"endColumn":50,"suggestions":"349"},{"ruleId":"324","severity":1,"message":"325","line":180,"column":37,"nodeType":"326","endLine":180,"endColumn":48},{"ruleId":"324","severity":1,"message":"325","line":181,"column":37,"nodeType":"326","endLine":181,"endColumn":48},{"ruleId":"324","severity":1,"message":"325","line":182,"column":37,"nodeType":"326","endLine":182,"endColumn":48},{"ruleId":"304","severity":1,"message":"350","line":8,"column":8,"nodeType":"306","messageId":"307","endLine":8,"endColumn":18},{"ruleId":"315","severity":1,"message":"340","line":32,"column":8,"nodeType":"317","endLine":32,"endColumn":30,"suggestions":"351"},{"ruleId":"352","severity":1,"message":"353","line":53,"column":51,"nodeType":"354","messageId":"355","endLine":53,"endColumn":53},{"ruleId":"304","severity":1,"message":"356","line":12,"column":10,"nodeType":"306","messageId":"307","endLine":12,"endColumn":18},{"ruleId":"315","severity":1,"message":"357","line":22,"column":6,"nodeType":"317","endLine":22,"endColumn":32,"suggestions":"358"},{"ruleId":"319","severity":1,"message":"320","line":109,"column":29,"nodeType":"321","endLine":109,"endColumn":41},{"ruleId":"304","severity":1,"message":"311","line":8,"column":10,"nodeType":"306","messageId":"307","endLine":8,"endColumn":14},{"ruleId":"304","severity":1,"message":"342","line":10,"column":10,"nodeType":"306","messageId":"307","endLine":10,"endColumn":17},{"ruleId":"304","severity":1,"message":"345","line":27,"column":47,"nodeType":"306","messageId":"307","endLine":27,"endColumn":65},{"ruleId":"304","severity":1,"message":"359","line":30,"column":29,"nodeType":"306","messageId":"307","endLine":30,"endColumn":49},{"ruleId":"304","severity":1,"message":"360","line":31,"column":30,"nodeType":"306","messageId":"307","endLine":31,"endColumn":51},{"ruleId":"304","severity":1,"message":"361","line":32,"column":25,"nodeType":"306","messageId":"307","endLine":32,"endColumn":41},{"ruleId":"315","severity":1,"message":"362","line":162,"column":6,"nodeType":"317","endLine":162,"endColumn":65,"suggestions":"363"},{"ruleId":"315","severity":1,"message":"364","line":170,"column":6,"nodeType":"317","endLine":170,"endColumn":23,"suggestions":"365"},{"ruleId":"304","severity":1,"message":"356","line":21,"column":6,"nodeType":"306","messageId":"307","endLine":21,"endColumn":14},{"ruleId":"315","severity":1,"message":"357","line":33,"column":8,"nodeType":"317","endLine":33,"endColumn":34,"suggestions":"366"},{"ruleId":"319","severity":1,"message":"320","line":112,"column":57,"nodeType":"321","endLine":112,"endColumn":69},{"ruleId":"304","severity":1,"message":"367","line":1,"column":23,"nodeType":"306","messageId":"307","endLine":1,"endColumn":36},{"ruleId":"304","severity":1,"message":"309","line":1,"column":10,"nodeType":"306","messageId":"307","endLine":1,"endColumn":26},{"ruleId":"304","severity":1,"message":"367","line":1,"column":41,"nodeType":"306","messageId":"307","endLine":1,"endColumn":54},{"ruleId":"304","severity":1,"message":"368","line":1,"column":8,"nodeType":"306","messageId":"307","endLine":1,"endColumn":13},{"ruleId":"304","severity":1,"message":"369","line":5,"column":12,"nodeType":"306","messageId":"307","endLine":5,"endColumn":16},{"ruleId":"304","severity":1,"message":"370","line":5,"column":18,"nodeType":"306","messageId":"307","endLine":5,"endColumn":25},{"ruleId":"304","severity":1,"message":"314","line":23,"column":18,"nodeType":"306","messageId":"307","endLine":23,"endColumn":25},{"ruleId":"315","severity":1,"message":"316","line":38,"column":6,"nodeType":"317","endLine":38,"endColumn":8,"suggestions":"371"},{"ruleId":"319","severity":1,"message":"320","line":67,"column":15,"nodeType":"321","endLine":67,"endColumn":58},{"ruleId":"322","severity":1,"message":"323","line":68,"column":17,"nodeType":"321","endLine":72,"endColumn":19},{"ruleId":"319","severity":1,"message":"320","line":86,"column":15,"nodeType":"321","endLine":86,"endColumn":58},{"ruleId":"322","severity":1,"message":"323","line":87,"column":17,"nodeType":"321","endLine":91,"endColumn":19},{"ruleId":"324","severity":1,"message":"325","line":149,"column":21,"nodeType":"326","endLine":149,"endColumn":32},"@typescript-eslint/no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","'userAttendanceSlice' is defined but never used.","'createAsyncThunk' is defined but never used.","'AxiosError' is defined but never used.","'Link' is defined but never used.","'useSelector' is defined but never used.","'useEffect' is defined but never used.","'loading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["372"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","jsx-a11y/scope","The scope prop can only be used on <th> elements.","JSXAttribute","'detailsReset' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'navigate'. Either include them or remove the dependency array.",["373"],"'useReducer' is defined but never used.","'setHostel' is assigned a value but never used.","'redirect' is assigned a value but never used.","'userInfo' is assigned a value but never used.","'success' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["374"],"no-sparse-arrays","Unexpected comma in middle of array.","unexpectedSparseArray","React Hook useEffect has missing dependencies: 'dispatch', 'month', and 'year'. Either include them or remove the dependency array.",["375"],"'counter' is defined but never used.","'sumSuccess' is assigned a value but never used.","'getAttendanceLi' is assigned a value but never used.","'getAttendanceError' is assigned a value but never used.",["376"],"'Message' is defined but never used.","React Hook useEffect has a missing dependency: 'calculateTotalExpenses'. Either include it or remove the dependency array.",["377"],"'Downloader' is defined but never used.",["378"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'messMenu' is defined but never used.","React Hook useEffect has an unnecessary dependency: 'useAppSelector'. Either exclude it or remove the dependency array. Outer scope values like 'useAppSelector' aren't valid dependencies because mutating them doesn't re-render the component.",["379"],"'setTotalFirstTimePrs' is assigned a value but never used.","'setTotalSecondTimePrs' is assigned a value but never used.","'setTotalGrandPrs' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'navigate', and 'yesterday'. Either include them or remove the dependency array.",["380"],"React Hook useEffect has a missing dependency: 'getDefaultAttendance'. Either include it or remove the dependency array.",["381"],["382"],"'PayloadAction' is defined but never used.","'React' is defined but never used.","'date' is assigned a value but never used.","'setDate' is assigned a value but never used.",["383"],{"desc":"384","fix":"385"},{"desc":"386","fix":"387"},{"desc":"388","fix":"389"},{"desc":"390","fix":"391"},{"desc":"392","fix":"393"},{"desc":"394","fix":"395"},{"desc":"396","fix":"397"},{"desc":"384","fix":"398"},{"desc":"399","fix":"400"},{"desc":"401","fix":"402"},{"desc":"384","fix":"403"},{"desc":"384","fix":"404"},"Update the dependencies array to be: [dispatch]",{"range":"405","text":"406"},"Update the dependencies array to be: [id, user, success, successUpdate, dispatch, navigate]",{"range":"407","text":"408"},"Update the dependencies array to be: [isRegistered, navigate]",{"range":"409","text":"410"},"Update the dependencies array to be: [date, dispatch, month, year]",{"range":"411","text":"412"},"Update the dependencies array to be: [date, errorExpenses, successExpenses, message, dispatch]",{"range":"413","text":"414"},"Update the dependencies array to be: [date, year, month, success, dispatch, calculateTotalExpenses]",{"range":"415","text":"416"},"Update the dependencies array to be: [date, addBillSuccess, dispatch, year, month]",{"range":"417","text":"418"},{"range":"419","text":"406"},"Update the dependencies array to be: [attendanceSuccess, userInfo, getAttendanceLiSuccess, date, dispatch, yesterday, navigate]",{"range":"420","text":"421"},"Update the dependencies array to be: [getAttendanceLi, getDefaultAttendance]",{"range":"422","text":"423"},{"range":"424","text":"406"},{"range":"425","text":"406"},[1137,1139],"[dispatch]",[1891,1925],"[id, user, success, successUpdate, dispatch, navigate]",[1822,1836],"[isRegistered, navigate]",[1763,1769],"[date, dispatch, month, year]",[3760,3807],"[date, errorExpenses, successExpenses, message, dispatch]",[2313,2351],"[date, year, month, success, dispatch, calculateTotalExpenses]",[1185,1207],"[date, addBillSuccess, dispatch, year, month]",[695,721],[5476,5535],"[attendanceSuccess, userInfo, getAttendanceLiSuccess, date, dispatch, yesterday, navigate]",[5604,5621],"[getAttendanceLi, getDefaultAttendance]",[904,930],[1137,1139]]