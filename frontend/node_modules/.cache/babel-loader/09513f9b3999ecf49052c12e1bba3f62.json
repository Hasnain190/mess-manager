{"ast":null,"code":"import _slicedToArray from \"F:/mess-manager/mess_manager/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\n/**\n * React Router v6.0.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { createContext, useRef, useState, useLayoutEffect, createElement, useContext, useEffect, useMemo, useCallback, Children, isValidElement, Fragment } from 'react';\nimport { createMemoryHistory, Action, parsePath } from 'history';\n\nfunction invariant(cond, message) {\n  if (!cond) throw new Error(message);\n}\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nvar alreadyWarned = {};\n\nfunction warningOnce(key, cond, message) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    process.env.NODE_ENV !== \"production\" ? warning(false, message) : void 0;\n  }\n} ///////////////////////////////////////////////////////////////////////////////\n// CONTEXT\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level <Router> API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\n\n\nvar NavigationContext = /*#__PURE__*/createContext(null);\n\nif (process.env.NODE_ENV !== \"production\") {\n  NavigationContext.displayName = \"Navigation\";\n}\n\nvar LocationContext = /*#__PURE__*/createContext(null);\n\nif (process.env.NODE_ENV !== \"production\") {\n  LocationContext.displayName = \"Location\";\n}\n\nvar RouteContext = /*#__PURE__*/createContext({\n  outlet: null,\n  matches: []\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  RouteContext.displayName = \"Route\";\n} ///////////////////////////////////////////////////////////////////////////////\n// COMPONENTS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/api/MemoryRouter\n */\n\n\nfunction MemoryRouter(_ref) {\n  var basename = _ref.basename,\n      children = _ref.children,\n      initialEntries = _ref.initialEntries,\n      initialIndex = _ref.initialIndex;\n  var historyRef = useRef();\n\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries: initialEntries,\n      initialIndex: initialIndex\n    });\n  }\n\n  var history = historyRef.current;\n\n  var _useState = useState({\n    action: history.action,\n    location: history.location\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  useLayoutEffect(function () {\n    return history.listen(setState);\n  }, [history]);\n  return /*#__PURE__*/createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/api/Navigate\n */\n\n\nfunction Navigate(_ref2) {\n  var to = _ref2.to,\n      replace = _ref2.replace,\n      state = _ref2.state;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of\n  // the router loaded. We can help them understand how to avoid that.\n  \"<Navigate> may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  process.env.NODE_ENV !== \"production\" ? warning(!useContext(NavigationContext).static, \"<Navigate> must not be used on the initial render in a <StaticRouter>. \" + \"This is a no-op, but you should modify your code so the <Navigate> is \" + \"only ever rendered in response to some user interaction or state change.\") : void 0;\n  var navigate = useNavigate();\n  useEffect(function () {\n    navigate(to, {\n      replace: replace,\n      state: state\n    });\n  });\n  return null;\n}\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/api/Outlet\n */\n\n\nfunction Outlet(_props) {\n  return useOutlet();\n}\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/api/Route\n */\n\n\nfunction Route(_props) {\n  process.env.NODE_ENV !== \"production\" ? invariant(false, \"A <Route> is only ever to be used as the child of <Routes> element, \" + \"never rendered directly. Please wrap your <Route> in a <Routes>.\") : invariant(false);\n}\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/api/Router\n */\n\n\nfunction Router(_ref3) {\n  var _ref3$basename = _ref3.basename,\n      basenameProp = _ref3$basename === void 0 ? \"/\" : _ref3$basename,\n      _ref3$children = _ref3.children,\n      children = _ref3$children === void 0 ? null : _ref3$children,\n      locationProp = _ref3.location,\n      _ref3$navigationType = _ref3.navigationType,\n      navigationType = _ref3$navigationType === void 0 ? Action.Pop : _ref3$navigationType,\n      navigator = _ref3.navigator,\n      _ref3$static = _ref3.static,\n      staticProp = _ref3$static === void 0 ? false : _ref3$static;\n  !!useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"You cannot render a <Router> inside another <Router>.\" + \" You should never have more than one in your app.\") : invariant(false) : void 0;\n  var basename = normalizePathname(basenameProp);\n  var navigationContext = useMemo(function () {\n    return {\n      basename: basename,\n      navigator: navigator,\n      static: staticProp\n    };\n  }, [basename, navigator, staticProp]);\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  var _locationProp = locationProp,\n      _locationProp$pathnam = _locationProp.pathname,\n      pathname = _locationProp$pathnam === void 0 ? \"/\" : _locationProp$pathnam,\n      _locationProp$search = _locationProp.search,\n      search = _locationProp$search === void 0 ? \"\" : _locationProp$search,\n      _locationProp$hash = _locationProp.hash,\n      hash = _locationProp$hash === void 0 ? \"\" : _locationProp$hash,\n      _locationProp$state = _locationProp.state,\n      state = _locationProp$state === void 0 ? null : _locationProp$state,\n      _locationProp$key = _locationProp.key,\n      key = _locationProp$key === void 0 ? \"default\" : _locationProp$key;\n  var location = useMemo(function () {\n    var trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      pathname: trailingPathname,\n      search: search,\n      hash: hash,\n      state: state,\n      key: key\n    };\n  }, [basename, pathname, search, hash, state, key]);\n  process.env.NODE_ENV !== \"production\" ? warning(location != null, \"<Router basename=\\\"\" + basename + \"\\\"> is not able to match the URL \" + (\"\\\"\" + pathname + search + hash + \"\\\" because it does not start with the \") + \"basename, so the <Router> won't render anything.\") : void 0;\n\n  if (location == null) {\n    return null;\n  }\n\n  return /*#__PURE__*/createElement(NavigationContext.Provider, {\n    value: navigationContext\n  }, /*#__PURE__*/createElement(LocationContext.Provider, {\n    children: children,\n    value: {\n      location: location,\n      navigationType: navigationType\n    }\n  }));\n}\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/api/Routes\n */\n\n\nfunction Routes(_ref4) {\n  var children = _ref4.children,\n      location = _ref4.location;\n  return useRoutes(createRoutesFromChildren(children), location);\n} ///////////////////////////////////////////////////////////////////////////////\n// HOOKS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/api/useHref\n */\n\n\nfunction useHref(to) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useHref() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n\n  var _useContext = useContext(NavigationContext),\n      basename = _useContext.basename,\n      navigator = _useContext.navigator;\n\n  var _useResolvedPath = useResolvedPath(to),\n      hash = _useResolvedPath.hash,\n      pathname = _useResolvedPath.pathname,\n      search = _useResolvedPath.search;\n\n  var joinedPathname = pathname;\n\n  if (basename !== \"/\") {\n    var toPathname = getToPathname(to);\n    var endsWithSlash = toPathname != null && toPathname.endsWith(\"/\");\n    joinedPathname = pathname === \"/\" ? basename + (endsWithSlash ? \"/\" : \"\") : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({\n    pathname: joinedPathname,\n    search: search,\n    hash: hash\n  });\n}\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/api/useInRouterContext\n */\n\n\nfunction useInRouterContext() {\n  return useContext(LocationContext) != null;\n}\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/api/useLocation\n */\n\n\nfunction useLocation() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useLocation() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  return useContext(LocationContext).location;\n}\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/api/useNavigationType\n */\n\n\nfunction useNavigationType() {\n  return useContext(LocationContext).navigationType;\n}\n/**\n * Returns true if the URL for the given \"to\" value matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/api/useMatch\n */\n\n\nfunction useMatch(pattern) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useMatch() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  return matchPath(pattern, useLocation().pathname);\n}\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/api/useNavigate\n */\n\n\nfunction useNavigate() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useNavigate() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n\n  var _useContext2 = useContext(NavigationContext),\n      basename = _useContext2.basename,\n      navigator = _useContext2.navigator;\n\n  var _useContext3 = useContext(RouteContext),\n      matches = _useContext3.matches;\n\n  var _useLocation = useLocation(),\n      locationPathname = _useLocation.pathname;\n\n  var routePathnamesJson = JSON.stringify(matches.map(function (match) {\n    return match.pathnameBase;\n  }));\n  var activeRef = useRef(false);\n  useEffect(function () {\n    activeRef.current = true;\n  });\n  var navigate = useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    process.env.NODE_ENV !== \"production\" ? warning(activeRef.current, \"You should call navigate() in a React.useEffect(), not when \" + \"your component is first rendered.\") : void 0;\n    if (!activeRef.current) return;\n\n    if (typeof to === \"number\") {\n      navigator.go(to);\n      return;\n    }\n\n    var path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname);\n\n    if (basename !== \"/\") {\n      path.pathname = joinPaths([basename, path.pathname]);\n    }\n\n    (!!options.replace ? navigator.replace : navigator.push)(path, options.state);\n  }, [basename, navigator, routePathnamesJson, locationPathname]);\n  return navigate;\n}\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/api/useOutlet\n */\n\n\nfunction useOutlet() {\n  return useContext(RouteContext).outlet;\n}\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/api/useParams\n */\n\n\nfunction useParams() {\n  var _useContext4 = useContext(RouteContext),\n      matches = _useContext4.matches;\n\n  var routeMatch = matches[matches.length - 1];\n  return routeMatch ? routeMatch.params : {};\n}\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/api/useResolvedPath\n */\n\n\nfunction useResolvedPath(to) {\n  var _useContext5 = useContext(RouteContext),\n      matches = _useContext5.matches;\n\n  var _useLocation2 = useLocation(),\n      locationPathname = _useLocation2.pathname;\n\n  var routePathnamesJson = JSON.stringify(matches.map(function (match) {\n    return match.pathnameBase;\n  }));\n  return useMemo(function () {\n    return resolveTo(to, JSON.parse(routePathnamesJson), locationPathname);\n  }, [to, routePathnamesJson, locationPathname]);\n}\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/api/useRoutes\n */\n\n\nfunction useRoutes(routes, locationArg) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useRoutes() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n\n  var _useContext6 = useContext(RouteContext),\n      parentMatches = _useContext6.matches;\n\n  var routeMatch = parentMatches[parentMatches.length - 1];\n  var parentParams = routeMatch ? routeMatch.params : {};\n  var parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  var parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  var parentRoute = routeMatch && routeMatch.route;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    var parentPath = parentRoute && parentRoute.path || \"\";\n    warningOnce(parentPathname, !parentRoute || parentPath.endsWith(\"*\"), \"You rendered descendant <Routes> (or called `useRoutes()`) at \" + (\"\\\"\" + parentPathname + \"\\\" (under <Route path=\\\"\" + parentPath + \"\\\">) but the \") + \"parent route path has no trailing \\\"*\\\". This means if you navigate \" + \"deeper, the parent won't match anymore and therefore the child \" + \"routes will never render.\\n\\n\" + (\"Please change the parent <Route path=\\\"\" + parentPath + \"\\\"> to <Route \") + (\"path=\\\"\" + parentPath + \"/*\\\">.\"));\n  }\n\n  var locationFromContext = useLocation();\n  var location;\n\n  if (locationArg) {\n    var _parsedLocationArg$pa;\n\n    var parsedLocationArg = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n    !(parentPathnameBase === \"/\" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, \" + \"the location pathname must begin with the portion of the URL pathname that was \" + (\"matched by all parent routes. The current pathname base is \\\"\" + parentPathnameBase + \"\\\" \") + (\"but pathname \\\"\" + parsedLocationArg.pathname + \"\\\" was given in the `location` prop.\")) : invariant(false) : void 0;\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  var pathname = location.pathname || \"/\";\n  var remainingPathname = parentPathnameBase === \"/\" ? pathname : pathname.slice(parentPathnameBase.length) || \"/\";\n  var matches = matchRoutes(routes, {\n    pathname: remainingPathname\n  });\n\n  if (process.env.NODE_ENV !== \"production\") {\n    process.env.NODE_ENV !== \"production\" ? warning(parentRoute || matches != null, \"No routes matched location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \") : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(matches == null || matches[matches.length - 1].route.element !== undefined, \"Matched leaf route at location \\\"\" + location.pathname + location.search + location.hash + \"\\\" does not have an element. \" + \"This means it will render an <Outlet /> with a null value by default resulting in an \\\"empty\\\" page.\") : void 0;\n  }\n\n  return _renderMatches(matches && matches.map(function (match) {\n    return Object.assign({}, match, {\n      params: Object.assign({}, parentParams, match.params),\n      pathname: joinPaths([parentPathnameBase, match.pathname]),\n      pathnameBase: match.pathnameBase === \"/\" ? parentPathnameBase : joinPaths([parentPathnameBase, match.pathnameBase])\n    });\n  }), parentMatches);\n} ///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/api/createRoutesFromChildren\n */\n\n\nfunction createRoutesFromChildren(children) {\n  var routes = [];\n  Children.forEach(children, function (element) {\n    if (! /*#__PURE__*/isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    if (element.type === Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(routes, createRoutesFromChildren(element.props.children));\n      return;\n    }\n\n    var route = {\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      index: element.props.index,\n      path: element.props.path\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children);\n    }\n\n    routes.push(route);\n  });\n  return routes;\n}\n/**\n * The parameters that were parsed from the URL path.\n */\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/api/generatePath\n */\n\n\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path.replace(/:(\\w+)/g, function (_, key) {\n    !(params[key] != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Missing \\\":\" + key + \"\\\" param\") : invariant(false) : void 0;\n    return params[key];\n  }).replace(/\\/*\\*$/, function (_) {\n    return params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\");\n  });\n}\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/api/matchRoutes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  var location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  var pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  var branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  var matches = null;\n\n  for (var i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], routes, pathname);\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  routes.forEach(function (route, index) {\n    var meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      !meta.relativePath.startsWith(parentPath) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\") : invariant(false) : void 0;\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    var path = joinPaths([parentPath, meta.relativePath]);\n    var routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      !(route.index !== true) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\")) : invariant(false) : void 0;\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path: path,\n      score: computeScore(path, route.index),\n      routesMeta: routesMeta\n    });\n  });\n  return branches;\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort(function (a, b) {\n    return a.score !== b.score ? b.score - a.score // Higher score first\n    : compareIndexes(a.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }), b.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }));\n  });\n}\n\nvar paramRe = /^:\\w+$/;\nvar dynamicSegmentValue = 3;\nvar indexRouteValue = 2;\nvar emptySegmentValue = 1;\nvar staticSegmentValue = 10;\nvar splatPenalty = -2;\n\nvar isSplat = function isSplat(s) {\n  return s === \"*\";\n};\n\nfunction computeScore(path, index) {\n  var segments = path.split(\"/\");\n  var initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(function (s) {\n    return !isSplat(s);\n  }).reduce(function (score, segment) {\n    return score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue);\n  }, initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  var siblings = a.length === b.length && a.slice(0, -1).every(function (n, i) {\n    return n === b[i];\n  });\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, // TODO: attach original route object inside routesMeta so we don't need this arg\nroutesArg, pathname) {\n  var routes = routesArg;\n  var routesMeta = branch.routesMeta;\n  var matchedParams = {};\n  var matchedPathname = \"/\";\n  var matches = [];\n\n  for (var i = 0; i < routesMeta.length; ++i) {\n    var meta = routesMeta[i];\n    var end = i === routesMeta.length - 1;\n    var remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    var match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end: end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    var route = routes[meta.childrenIndex];\n    matches.push({\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: joinPaths([matchedPathname, match.pathnameBase]),\n      route: route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n\n    routes = route.children;\n  }\n\n  return matches;\n}\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\n\n\nfunction renderMatches(matches) {\n  return _renderMatches(matches);\n}\n\nfunction _renderMatches(matches, parentMatches) {\n  if (parentMatches === void 0) {\n    parentMatches = [];\n  }\n\n  if (matches == null) return null;\n  return matches.reduceRight(function (outlet, match, index) {\n    return /*#__PURE__*/createElement(RouteContext.Provider, {\n      children: match.route.element !== undefined ? match.route.element : /*#__PURE__*/createElement(Outlet, null),\n      value: {\n        outlet: outlet,\n        matches: parentMatches.concat(matches.slice(0, index + 1))\n      }\n    });\n  }, null);\n}\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/api/matchPath\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  var _compilePath = compilePath(pattern.path, pattern.caseSensitive, pattern.end),\n      _compilePath2 = _slicedToArray(_compilePath, 2),\n      matcher = _compilePath2[0],\n      paramNames = _compilePath2[1];\n\n  var match = pathname.match(matcher);\n  if (!match) return null;\n  var matchedPathname = match[0];\n  var pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  var captureGroups = match.slice(1);\n  var params = paramNames.reduce(function (memo, paramName, index) {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      var splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params: params,\n    pathname: matchedPathname,\n    pathnameBase: pathnameBase,\n    pattern: pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  process.env.NODE_ENV !== \"production\" ? warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\")) : void 0;\n  var paramNames = [];\n  var regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, function (_, paramName) {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n    : // Otherwise, at least match a word boundary. This restricts parent\n    // routes to matching only their own words and nothing more, e.g. parent\n    // route \"/home\" should not match \"/home2\".\n    \"(?:\\\\b|$)\";\n  }\n\n  var matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    process.env.NODE_ENV !== \"production\" ? warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\")) : void 0;\n    return value;\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/api/resolvePath\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  var _ref5 = typeof to === \"string\" ? parsePath(to) : to,\n      toPathname = _ref5.pathname,\n      _ref5$search = _ref5.search,\n      search = _ref5$search === void 0 ? \"\" : _ref5$search,\n      _ref5$hash = _ref5.hash,\n      hash = _ref5$hash === void 0 ? \"\" : _ref5$hash;\n\n  var pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname: pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  var segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  var relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(function (segment) {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction resolveTo(toArg, routePathnames, locationPathname) {\n  var to = typeof toArg === \"string\" ? parsePath(toArg) : toArg;\n  var toPathname = toArg === \"\" || to.pathname === \"\" ? \"/\" : to.pathname; // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  var from;\n\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    var routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      var toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  var path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original to value had one.\n\n  if (toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\") && !path.pathname.endsWith(\"/\")) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  var nextChar = pathname.charAt(basename.length);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(basename.length) || \"/\";\n}\n\nvar joinPaths = function joinPaths(paths) {\n  return paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n};\n\nvar normalizePathname = function normalizePathname(pathname) {\n  return pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n};\n\nvar normalizeSearch = function normalizeSearch(search) {\n  return !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n};\n\nvar normalizeHash = function normalizeHash(hash) {\n  return !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n}; ///////////////////////////////////////////////////////////////////////////////\n\n\nexport { MemoryRouter, Navigate, Outlet, Route, Router, Routes, LocationContext as UNSAFE_LocationContext, NavigationContext as UNSAFE_NavigationContext, RouteContext as UNSAFE_RouteContext, createRoutesFromChildren, generatePath, matchPath, matchRoutes, renderMatches, resolvePath, useHref, useInRouterContext, useLocation, useMatch, useNavigate, useNavigationType, useOutlet, useParams, useResolvedPath, useRoutes };","map":{"version":3,"sources":["F:\\mess-manager\\mess_manager\\packages\\react-router\\index.tsx"],"names":["console","alreadyWarned","NavigationContext","React","LocationContext","RouteContext","outlet","matches","initialIndex","historyRef","createMemoryHistory","initialEntries","history","action","location","state","useInRouterContext","navigate","useNavigate","replace","useOutlet","basename","basenameProp","children","navigationType","NavigationType","static","staticProp","normalizePathname","navigationContext","navigator","locationProp","parsePath","pathname","search","hash","key","trailingPathname","stripBasename","useRoutes","createRoutesFromChildren","useResolvedPath","joinedPathname","toPathname","getToPathname","endsWithSlash","joinPaths","matchPath","useLocation","locationPathname","routePathnamesJson","JSON","match","activeRef","options","path","resolveTo","routeMatch","parentMatches","parentParams","parentPathname","parentPathnameBase","parentRoute","parentPath","warningOnce","locationFromContext","parsedLocationArg","remainingPathname","matchRoutes","_renderMatches","params","Object","pathnameBase","routes","element","route","caseSensitive","index","_","branches","flattenRoutes","rankRouteBranches","i","matchRouteBranch","parentsMeta","meta","relativePath","childrenIndex","routesMeta","score","computeScore","b","a","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","initialScore","segment","siblings","n","matchedParams","matchedPathname","end","React.createElement","pattern","compilePath","captureGroups","paramName","splatValue","memo","safelyDecodeURIComponent","paramNames","regexpSource","matcher","decodeURIComponent","fromPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","to","toArg","from","routePathnameIndex","routePathnames","toSegments","resolvePath","nextChar","paths"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport type {\n  History,\n  InitialEntry,\n  Location,\n  MemoryHistory,\n  Path,\n  To\n} from \"history\";\nimport {\n  Action as NavigationType,\n  createMemoryHistory,\n  parsePath\n} from \"history\";\n\nexport type { Location, Path, To, NavigationType };\n\nfunction invariant(cond: any, message: string): asserts cond {\n  if (!cond) throw new Error(message);\n}\n\nfunction warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nconst alreadyWarned: Record<string, boolean> = {};\nfunction warningOnce(key: string, cond: boolean, message: string) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    warning(false, message);\n  }\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// CONTEXT\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level <Router> API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\nexport type Navigator = Omit<\n  History,\n  \"action\" | \"location\" | \"back\" | \"forward\" | \"listen\" | \"block\"\n>;\n\ninterface NavigationContextObject {\n  basename: string;\n  navigator: Navigator;\n  static: boolean;\n}\n\nconst NavigationContext = React.createContext<NavigationContextObject>(null!);\n\nif (__DEV__) {\n  NavigationContext.displayName = \"Navigation\";\n}\n\ninterface LocationContextObject {\n  location: Location;\n  navigationType: NavigationType;\n}\n\nconst LocationContext = React.createContext<LocationContextObject>(null!);\n\nif (__DEV__) {\n  LocationContext.displayName = \"Location\";\n}\n\ninterface RouteContextObject {\n  outlet: React.ReactElement | null;\n  matches: RouteMatch[];\n}\n\nconst RouteContext = React.createContext<RouteContextObject>({\n  outlet: null,\n  matches: []\n});\n\nif (__DEV__) {\n  RouteContext.displayName = \"Route\";\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// COMPONENTS\n///////////////////////////////////////////////////////////////////////////////\n\nexport interface MemoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n}\n\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/api/MemoryRouter\n */\nexport function MemoryRouter({\n  basename,\n  children,\n  initialEntries,\n  initialIndex\n}: MemoryRouterProps): React.ReactElement {\n  let historyRef = React.useRef<MemoryHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({ initialEntries, initialIndex });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface NavigateProps {\n  to: To;\n  replace?: boolean;\n  state?: any;\n}\n\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/api/Navigate\n */\nexport function Navigate({ to, replace, state }: NavigateProps): null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of\n    // the router loaded. We can help them understand how to avoid that.\n    `<Navigate> may be used only in the context of a <Router> component.`\n  );\n\n  warning(\n    !React.useContext(NavigationContext).static,\n    `<Navigate> must not be used on the initial render in a <StaticRouter>. ` +\n      `This is a no-op, but you should modify your code so the <Navigate> is ` +\n      `only ever rendered in response to some user interaction or state change.`\n  );\n\n  let navigate = useNavigate();\n  React.useEffect(() => {\n    navigate(to, { replace, state });\n  });\n\n  return null;\n}\n\nexport interface OutletProps {}\n\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/api/Outlet\n */\nexport function Outlet(_props: OutletProps): React.ReactElement | null {\n  return useOutlet();\n}\n\nexport interface RouteProps {\n  caseSensitive?: boolean;\n  children?: React.ReactNode;\n  element?: React.ReactElement | null;\n  index?: boolean;\n  path?: string;\n}\n\nexport interface PathRouteProps {\n  caseSensitive?: boolean;\n  children?: React.ReactNode;\n  element?: React.ReactElement | null;\n  index?: false;\n  path: string;\n}\n\nexport interface LayoutRouteProps {\n  children?: React.ReactNode;\n  element?: React.ReactElement | null;\n}\n\nexport interface IndexRouteProps {\n  element?: React.ReactElement | null;\n  index: true;\n}\n\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/api/Route\n */\nexport function Route(\n  _props: PathRouteProps | LayoutRouteProps | IndexRouteProps\n): React.ReactElement | null {\n  invariant(\n    false,\n    `A <Route> is only ever to be used as the child of <Routes> element, ` +\n      `never rendered directly. Please wrap your <Route> in a <Routes>.`\n  );\n}\n\nexport interface RouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  location: Partial<Location> | string;\n  navigationType?: NavigationType;\n  navigator: Navigator;\n  static?: boolean;\n}\n\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/api/Router\n */\nexport function Router({\n  basename: basenameProp = \"/\",\n  children = null,\n  location: locationProp,\n  navigationType = NavigationType.Pop,\n  navigator,\n  static: staticProp = false\n}: RouterProps): React.ReactElement | null {\n  invariant(\n    !useInRouterContext(),\n    `You cannot render a <Router> inside another <Router>.` +\n      ` You should never have more than one in your app.`\n  );\n\n  let basename = normalizePathname(basenameProp);\n  let navigationContext = React.useMemo(\n    () => ({ basename, navigator, static: staticProp }),\n    [basename, navigator, staticProp]\n  );\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\"\n  } = locationProp;\n\n  let location = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      pathname: trailingPathname,\n      search,\n      hash,\n      state,\n      key\n    };\n  }, [basename, pathname, search, hash, state, key]);\n\n  warning(\n    location != null,\n    `<Router basename=\"${basename}\"> is not able to match the URL ` +\n      `\"${pathname}${search}${hash}\" because it does not start with the ` +\n      `basename, so the <Router> won't render anything.`\n  );\n\n  if (location == null) {\n    return null;\n  }\n\n  return (\n    <NavigationContext.Provider value={navigationContext}>\n      <LocationContext.Provider\n        children={children}\n        value={{ location, navigationType }}\n      />\n    </NavigationContext.Provider>\n  );\n}\n\nexport interface RoutesProps {\n  children?: React.ReactNode;\n  location?: Partial<Location> | string;\n}\n\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/api/Routes\n */\nexport function Routes({\n  children,\n  location\n}: RoutesProps): React.ReactElement | null {\n  return useRoutes(createRoutesFromChildren(children), location);\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// HOOKS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/api/useHref\n */\nexport function useHref(to: To): string {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useHref() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { hash, pathname, search } = useResolvedPath(to);\n\n  let joinedPathname = pathname;\n  if (basename !== \"/\") {\n    let toPathname = getToPathname(to);\n    let endsWithSlash = toPathname != null && toPathname.endsWith(\"/\");\n    joinedPathname =\n      pathname === \"/\"\n        ? basename + (endsWithSlash ? \"/\" : \"\")\n        : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({ pathname: joinedPathname, search, hash });\n}\n\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/api/useInRouterContext\n */\nexport function useInRouterContext(): boolean {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/api/useLocation\n */\nexport function useLocation(): Location {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useLocation() may be used only in the context of a <Router> component.`\n  );\n\n  return React.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/api/useNavigationType\n */\nexport function useNavigationType(): NavigationType {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns true if the URL for the given \"to\" value matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/api/useMatch\n */\nexport function useMatch<ParamKey extends string = string>(\n  pattern: PathPattern | string\n): PathMatch<ParamKey> | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useMatch() may be used only in the context of a <Router> component.`\n  );\n\n  return matchPath(pattern, useLocation().pathname);\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\nexport interface NavigateFunction {\n  (to: To, options?: NavigateOptions): void;\n  (delta: number): void;\n}\n\nexport interface NavigateOptions {\n  replace?: boolean;\n  state?: any;\n}\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/api/useNavigate\n */\nexport function useNavigate(): NavigateFunction {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useNavigate() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    matches.map(match => match.pathnameBase)\n  );\n\n  let activeRef = React.useRef(false);\n  React.useEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: { replace?: boolean; state?: any } = {}) => {\n      warning(\n        activeRef.current,\n        `You should call navigate() in a React.useEffect(), not when ` +\n          `your component is first rendered.`\n      );\n\n      if (!activeRef.current) return;\n\n      if (typeof to === \"number\") {\n        navigator.go(to);\n        return;\n      }\n\n      let path = resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname\n      );\n\n      if (basename !== \"/\") {\n        path.pathname = joinPaths([basename, path.pathname]);\n      }\n\n      (!!options.replace ? navigator.replace : navigator.push)(\n        path,\n        options.state\n      );\n    },\n    [basename, navigator, routePathnamesJson, locationPathname]\n  );\n\n  return navigate;\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/api/useOutlet\n */\nexport function useOutlet(): React.ReactElement | null {\n  return React.useContext(RouteContext).outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/api/useParams\n */\nexport function useParams<Key extends string = string>(): Readonly<\n  Params<Key>\n> {\n  let { matches } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? (routeMatch.params as any) : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/api/useResolvedPath\n */\nexport function useResolvedPath(to: To): Path {\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    matches.map(match => match.pathnameBase)\n  );\n\n  return React.useMemo(\n    () => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname),\n    [to, routePathnamesJson, locationPathname]\n  );\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/api/useRoutes\n */\nexport function useRoutes(\n  routes: RouteObject[],\n  locationArg?: Partial<Location> | string\n): React.ReactElement | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useRoutes() may be used only in the context of a <Router> component.`\n  );\n\n  let { matches: parentMatches } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n\n  if (__DEV__) {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = (parentRoute && parentRoute.path) || \"\";\n    warningOnce(\n      parentPathname,\n      !parentRoute || parentPath.endsWith(\"*\"),\n      `You rendered descendant <Routes> (or called \\`useRoutes()\\`) at ` +\n        `\"${parentPathname}\" (under <Route path=\"${parentPath}\">) but the ` +\n        `parent route path has no trailing \"*\". This means if you navigate ` +\n        `deeper, the parent won't match anymore and therefore the child ` +\n        `routes will never render.\\n\\n` +\n        `Please change the parent <Route path=\"${parentPath}\"> to <Route ` +\n        `path=\"${parentPath}/*\">.`\n    );\n  }\n\n  let locationFromContext = useLocation();\n\n  let location;\n  if (locationArg) {\n    let parsedLocationArg =\n      typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n    invariant(\n      parentPathnameBase === \"/\" ||\n        parsedLocationArg.pathname?.startsWith(parentPathnameBase),\n      `When overriding the location using \\`<Routes location>\\` or \\`useRoutes(routes, location)\\`, ` +\n        `the location pathname must begin with the portion of the URL pathname that was ` +\n        `matched by all parent routes. The current pathname base is \"${parentPathnameBase}\" ` +\n        `but pathname \"${parsedLocationArg.pathname}\" was given in the \\`location\\` prop.`\n    );\n\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  let pathname = location.pathname || \"/\";\n  let remainingPathname =\n    parentPathnameBase === \"/\"\n      ? pathname\n      : pathname.slice(parentPathnameBase.length) || \"/\";\n  let matches = matchRoutes(routes, { pathname: remainingPathname });\n\n  if (__DEV__) {\n    warning(\n      parentRoute || matches != null,\n      `No routes matched location \"${location.pathname}${location.search}${location.hash}\" `\n    );\n\n    warning(\n      matches == null ||\n        matches[matches.length - 1].route.element !== undefined,\n      `Matched leaf route at location \"${location.pathname}${location.search}${location.hash}\" does not have an element. ` +\n        `This means it will render an <Outlet /> with a null value by default resulting in an \"empty\" page.`\n    );\n  }\n\n  return _renderMatches(\n    matches &&\n      matches.map(match =>\n        Object.assign({}, match, {\n          params: Object.assign({}, parentParams, match.params),\n          pathname: joinPaths([parentPathnameBase, match.pathname]),\n          pathnameBase:\n            match.pathnameBase === \"/\"\n              ? parentPathnameBase\n              : joinPaths([parentPathnameBase, match.pathnameBase])\n        })\n      ),\n    parentMatches\n  );\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/api/createRoutesFromChildren\n */\nexport function createRoutesFromChildren(\n  children: React.ReactNode\n): RouteObject[] {\n  let routes: RouteObject[] = [];\n\n  React.Children.forEach(children, element => {\n    if (!React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(\n        routes,\n        createRoutesFromChildren(element.props.children)\n      );\n      return;\n    }\n\n    let route: RouteObject = {\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      index: element.props.index,\n      path: element.props.path\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children);\n    }\n\n    routes.push(route);\n  });\n\n  return routes;\n}\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport interface RouteObject {\n  caseSensitive?: boolean;\n  children?: RouteObject[];\n  element?: React.ReactNode;\n  index?: boolean;\n  path?: string;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/api/generatePath\n */\nexport function generatePath(path: string, params: Params = {}): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/\\/*\\*$/, _ =>\n      params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\")\n    );\n}\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface RouteMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObject;\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/api/matchRoutes\n */\nexport function matchRoutes(\n  routes: RouteObject[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): RouteMatch[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], routes, pathname);\n  }\n\n  return matches;\n}\n\ninterface RouteMeta {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n}\n\ninterface RouteBranch {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta[];\n}\n\nfunction flattenRoutes(\n  routes: RouteObject[],\n  branches: RouteBranch[] = [],\n  parentsMeta: RouteMeta[] = [],\n  parentPath = \"\"\n): RouteBranch[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map(meta => meta.childrenIndex),\n          b.routesMeta.map(meta => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter(s => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<ParamKey extends string = string>(\n  branch: RouteBranch,\n  // TODO: attach original route object inside routesMeta so we don't need this arg\n  routesArg: RouteObject[],\n  pathname: string\n): RouteMatch<ParamKey>[] | null {\n  let routes = routesArg;\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: RouteMatch[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = routes[meta.childrenIndex];\n\n    matches.push({\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: joinPaths([matchedPathname, match.pathnameBase]),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n\n    routes = route.children!;\n  }\n\n  return matches;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nexport function renderMatches(\n  matches: RouteMatch[] | null\n): React.ReactElement | null {\n  return _renderMatches(matches);\n}\n\nfunction _renderMatches(\n  matches: RouteMatch[] | null,\n  parentMatches: RouteMatch[] = []\n): React.ReactElement | null {\n  if (matches == null) return null;\n\n  return matches.reduceRight((outlet, match, index) => {\n    return (\n      <RouteContext.Provider\n        children={\n          match.route.element !== undefined ? match.route.element : <Outlet />\n        }\n        value={{\n          outlet,\n          matches: parentMatches.concat(matches.slice(0, index + 1))\n        }}\n      />\n    );\n  }, null as React.ReactElement | null);\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: string;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/api/matchPath\n */\nexport function matchPath<ParamKey extends string = string>(\n  pattern: PathPattern | string,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end\n      ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n      : // Otherwise, at least match a word boundary. This restricts parent\n        // routes to matching only their own words and nothing more, e.g. parent\n        // route \"/home\" should not match \"/home2\".\n        \"(?:\\\\b|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/api/resolvePath\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string\n): Path {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : toArg;\n  let toPathname = toArg === \"\" || to.pathname === \"\" ? \"/\" : to.pathname;\n\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  let from: string;\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original to value had one.\n  if (\n    toPathname &&\n    toPathname !== \"/\" &&\n    toPathname.endsWith(\"/\") &&\n    !path.pathname.endsWith(\"/\")\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\nfunction getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\nfunction stripBasename(pathname: string, basename: string): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  let nextChar = pathname.charAt(basename.length);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(basename.length) || \"/\";\n}\n\nconst joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\nconst normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\nconst normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\nconst normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  NavigationContext as UNSAFE_NavigationContext,\n  LocationContext as UNSAFE_LocationContext,\n  RouteContext as UNSAFE_RouteContext\n};\n"]},"metadata":{},"sourceType":"module"}